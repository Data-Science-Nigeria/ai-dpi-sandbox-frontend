// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  HealthCheckHealthGetData,
  HealthCheckHealthGetResponses,
  MetricsMetricsGetData,
  MetricsMetricsGetResponses,
  RootGetData,
  RootGetResponses,
  RegisterApiV1AuthRegisterPostData,
  RegisterApiV1AuthRegisterPostResponses,
  LoginApiV1AuthLoginPostData,
  LoginApiV1AuthLoginPostResponses,
  GetCurrentUserApiV1AuthMeGetData,
  GetCurrentUserApiV1AuthMeGetResponses,
  RefreshTokenApiV1AuthRefreshPostData,
  RefreshTokenApiV1AuthRefreshPostResponses,
  SendSmsApiV1SmsSendPostData,
  SendSmsApiV1SmsSendPostResponses,
  GetSmsStatusApiV1SmsStatusMessageIdGetData,
  GetSmsStatusApiV1SmsStatusMessageIdGetResponses,
  GetSmsStatusApiV1SmsStatusMessageIdGetErrors,
  ChatCompletionApiV1LlmChatPostData,
  ChatCompletionApiV1LlmChatPostResponses,
  CreateEmbeddingsApiV1LlmEmbeddingsPostData,
  CreateEmbeddingsApiV1LlmEmbeddingsPostResponses,
  ListConfigsApiV1ConfigsGetData,
  ListConfigsApiV1ConfigsGetResponses,
  CreateConfigApiV1ConfigsPostData,
  CreateConfigApiV1ConfigsPostResponses,
  GetConfigApiV1ConfigsConfigIdGetData,
  GetConfigApiV1ConfigsConfigIdGetResponses,
  GetConfigApiV1ConfigsConfigIdGetErrors,
  UpdateConfigApiV1ConfigsConfigIdPutData,
  UpdateConfigApiV1ConfigsConfigIdPutResponses,
  UpdateConfigApiV1ConfigsConfigIdPutErrors,
  GetServicesHealthApiV1ServicesHealthGetData,
  GetServicesHealthApiV1ServicesHealthGetResponses,
  GetServicesStatusApiV1ServicesStatusGetData,
  GetServicesStatusApiV1ServicesStatusGetResponses,
  GetServiceHealthApiV1ServicesServiceNameHealthGetData,
  GetServiceHealthApiV1ServicesServiceNameHealthGetResponses,
  GetServiceHealthApiV1ServicesServiceNameHealthGetErrors,
  GetServiceMetricsApiV1ServicesServiceNameMetricsGetData,
  GetServiceMetricsApiV1ServicesServiceNameMetricsGetResponses,
  GetServiceMetricsApiV1ServicesServiceNameMetricsGetErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckHealthGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthCheckHealthGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/health",
    ...options,
  });
};

/**
 * Metrics
 * Prometheus metrics endpoint.
 */
export const metricsMetricsGet = <ThrowOnError extends boolean = false>(
  options?: Options<MetricsMetricsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    MetricsMetricsGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/metrics",
    ...options,
  });
};

/**
 * Root
 * Root endpoint.
 */
export const rootGet = <ThrowOnError extends boolean = false>(
  options?: Options<RootGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    RootGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};

/**
 * Register
 * Register a new user.
 */
export const registerApiV1AuthRegisterPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RegisterApiV1AuthRegisterPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    RegisterApiV1AuthRegisterPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/auth/register",
    ...options,
  });
};

/**
 * Login
 * User login.
 */
export const loginApiV1AuthLoginPost = <ThrowOnError extends boolean = false>(
  options?: Options<LoginApiV1AuthLoginPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    LoginApiV1AuthLoginPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/auth/login",
    ...options,
  });
};

/**
 * Get Current User
 * Get current user info.
 */
export const getCurrentUserApiV1AuthMeGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetCurrentUserApiV1AuthMeGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserApiV1AuthMeGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/auth/me",
    ...options,
  });
};

/**
 * Refresh Token
 * Refresh access token.
 */
export const refreshTokenApiV1AuthRefreshPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<RefreshTokenApiV1AuthRefreshPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    RefreshTokenApiV1AuthRefreshPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/auth/refresh",
    ...options,
  });
};

/**
 * Send Sms
 * Send SMS message.
 */
export const sendSmsApiV1SmsSendPost = <ThrowOnError extends boolean = false>(
  options?: Options<SendSmsApiV1SmsSendPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    SendSmsApiV1SmsSendPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/sms/send",
    ...options,
  });
};

/**
 * Get Sms Status
 * Get SMS delivery status.
 */
export const getSmsStatusApiV1SmsStatusMessageIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetSmsStatusApiV1SmsStatusMessageIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetSmsStatusApiV1SmsStatusMessageIdGetResponses,
    GetSmsStatusApiV1SmsStatusMessageIdGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/sms/status/{message_id}",
    ...options,
  });
};

/**
 * Chat Completion
 * Generate chat completion.
 */
export const chatCompletionApiV1LlmChatPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ChatCompletionApiV1LlmChatPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    ChatCompletionApiV1LlmChatPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/llm/chat",
    ...options,
  });
};

/**
 * Create Embeddings
 * Create text embeddings.
 */
export const createEmbeddingsApiV1LlmEmbeddingsPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<CreateEmbeddingsApiV1LlmEmbeddingsPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateEmbeddingsApiV1LlmEmbeddingsPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/llm/embeddings",
    ...options,
  });
};

/**
 * List Configs
 * List all configurations.
 */
export const listConfigsApiV1ConfigsGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ListConfigsApiV1ConfigsGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ListConfigsApiV1ConfigsGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/configs",
    ...options,
  });
};

/**
 * Create Config
 * Create new configuration.
 */
export const createConfigApiV1ConfigsPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<CreateConfigApiV1ConfigsPostData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    CreateConfigApiV1ConfigsPostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/configs",
    ...options,
  });
};

/**
 * Get Config
 * Get configuration by ID.
 */
export const getConfigApiV1ConfigsConfigIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetConfigApiV1ConfigsConfigIdGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    GetConfigApiV1ConfigsConfigIdGetResponses,
    GetConfigApiV1ConfigsConfigIdGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/configs/{config_id}",
    ...options,
  });
};

/**
 * Update Config
 * Update configuration.
 */
export const updateConfigApiV1ConfigsConfigIdPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpdateConfigApiV1ConfigsConfigIdPutData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    UpdateConfigApiV1ConfigsConfigIdPutResponses,
    UpdateConfigApiV1ConfigsConfigIdPutErrors,
    ThrowOnError
  >({
    url: "/api/v1/configs/{config_id}",
    ...options,
  });
};

/**
 * Get Services Health
 * Get health status of all backend services.
 */
export const getServicesHealthApiV1ServicesHealthGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetServicesHealthApiV1ServicesHealthGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetServicesHealthApiV1ServicesHealthGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/services/health",
    ...options,
  });
};

/**
 * Get Services Status
 * Get detailed status of all services.
 */
export const getServicesStatusApiV1ServicesStatusGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetServicesStatusApiV1ServicesStatusGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetServicesStatusApiV1ServicesStatusGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/api/v1/services/status",
    ...options,
  });
};

/**
 * Get Service Health
 * Get health status of a specific service.
 */
export const getServiceHealthApiV1ServicesServiceNameHealthGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetServiceHealthApiV1ServicesServiceNameHealthGetData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    GetServiceHealthApiV1ServicesServiceNameHealthGetResponses,
    GetServiceHealthApiV1ServicesServiceNameHealthGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/services/{service_name}/health",
    ...options,
  });
};

/**
 * Get Service Metrics
 * Get metrics for a specific service.
 */
export const getServiceMetricsApiV1ServicesServiceNameMetricsGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetServiceMetricsApiV1ServicesServiceNameMetricsGetData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    GetServiceMetricsApiV1ServicesServiceNameMetricsGetResponses,
    GetServiceMetricsApiV1ServicesServiceNameMetricsGetErrors,
    ThrowOnError
  >({
    url: "/api/v1/services/{service_name}/metrics",
    ...options,
  });
};
