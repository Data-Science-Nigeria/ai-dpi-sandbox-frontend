// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "./client";
import type {
  ApiGetHealthHealthCheckData,
  ApiGetHealthHealthCheckResponses,
  ApiGetMetricsMetricsData,
  ApiGetMetricsMetricsResponses,
  ApiGetRootRootData,
  ApiGetRootRootResponses,
  HealthGetApiV1HealthCheckHealthCheckData,
  HealthGetApiV1HealthCheckHealthCheckResponses,
  HealthGetApiV1HealthServicesGetServicesHealthData,
  HealthGetApiV1HealthServicesGetServicesHealthResponses,
  MonitoringGetApiV1MonitoringMetricsGetMetricsData,
  MonitoringGetApiV1MonitoringMetricsGetMetricsResponses,
  MonitoringGetApiV1MonitoringAlertsGetAlertsData,
  MonitoringGetApiV1MonitoringAlertsGetAlertsResponses,
  LoggingPostApiV1LoggingLogCreateLogData,
  LoggingPostApiV1LoggingLogCreateLogResponses,
  LoggingGetApiV1LoggingLogsGetLogsData,
  LoggingGetApiV1LoggingLogsGetLogsResponses,
  RateLimitPostApiV1RateLimiterLimitCheckRateLimitData,
  RateLimitPostApiV1RateLimiterLimitCheckRateLimitResponses,
  RateLimitGetApiV1RateLimiterStatusGetRateLimitStatusData,
  RateLimitGetApiV1RateLimiterStatusGetRateLimitStatusResponses,
  AiPostApiV1AiGenerateGenerateContentData,
  AiPostApiV1AiGenerateGenerateContentResponses,
  AiPostApiV1AiGenerateGenerateContentErrors,
  AiPostApiV1AiAnalyzeAnalyzeTextData,
  AiPostApiV1AiAnalyzeAnalyzeTextResponses,
  AiPostApiV1AiAnalyzeAnalyzeTextErrors,
  AiPostApiV1AiChatChatCompletionData,
  AiPostApiV1AiChatChatCompletionResponses,
  AiPostApiV1AiChatChatCompletionErrors,
  AiPostApiV1AiTranslateTranslateTextData,
  AiPostApiV1AiTranslateTranslateTextResponses,
  AiPostApiV1AiTranslateTranslateTextErrors,
  AiGetApiV1AiModelsGetAvailableModelsData,
  AiGetApiV1AiModelsGetAvailableModelsResponses,
  AiGetApiV1AiConversationsConversationIdGetConversationData,
  AiGetApiV1AiConversationsConversationIdGetConversationResponses,
  AiGetApiV1AiConversationsConversationIdGetConversationErrors,
  AiGetApiV1AiUsageGetUsageStatisticsData,
  AiGetApiV1AiUsageGetUsageStatisticsResponses,
  BvnPostApiV1BvnVerifyVerifyBvnData,
  BvnPostApiV1BvnVerifyVerifyBvnResponses,
  BvnPostApiV1BvnVerifyVerifyBvnErrors,
  BvnGetApiV1BvnStatusBvnGetBvnStatusData,
  BvnGetApiV1BvnStatusBvnGetBvnStatusResponses,
  BvnGetApiV1BvnStatusBvnGetBvnStatusErrors,
  BvnPostApiV1BvnLookupLookupBvnData,
  BvnPostApiV1BvnLookupLookupBvnResponses,
  BvnPostApiV1BvnLookupLookupBvnErrors,
  BvnPostApiV1BvnMatchMatchBvnData,
  BvnPostApiV1BvnMatchMatchBvnResponses,
  BvnPostApiV1BvnMatchMatchBvnErrors,
  BvnGetApiV1BvnBanksGetSupportedBanksData,
  BvnGetApiV1BvnBanksGetSupportedBanksResponses,
  IvrPostApiV1IvrCallInitiateCallData,
  IvrPostApiV1IvrCallInitiateCallResponses,
  IvrGetApiV1IvrMenuGetMenuData,
  IvrGetApiV1IvrMenuGetMenuResponses,
  NinPostApiV1NinVerifyVerifyNinData,
  NinPostApiV1NinVerifyVerifyNinResponses,
  NinPostApiV1NinVerifyVerifyNinErrors,
  NinGetApiV1NinStatusNinGetNinStatusData,
  NinGetApiV1NinStatusNinGetNinStatusResponses,
  NinGetApiV1NinStatusNinGetNinStatusErrors,
  NinPostApiV1NinLookupLookupNinData,
  NinPostApiV1NinLookupLookupNinResponses,
  NinPostApiV1NinLookupLookupNinErrors,
  TwoWaySmsPostApiV1TwoWaySmsSendSendSmsData,
  TwoWaySmsPostApiV1TwoWaySmsSendSendSmsResponses,
  TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsData,
  TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsResponses,
  HealthGetApiV1ServicesHealthGetServicesHealthData,
  HealthGetApiV1ServicesHealthGetServicesHealthResponses,
  HealthGetApiV1DpiHealthGetDpiHealthData,
  HealthGetApiV1DpiHealthGetDpiHealthResponses,
  HealthGetApiV1ServicesServiceNameHealthGetServiceHealthData,
  HealthGetApiV1ServicesServiceNameHealthGetServiceHealthResponses,
  HealthGetApiV1ServicesServiceNameHealthGetServiceHealthErrors,
  HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsData,
  HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsResponses,
  HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsErrors,
  ExamplesGetApiV1ExamplesNinNinExamplesData,
  ExamplesGetApiV1ExamplesNinNinExamplesResponses,
  ExamplesGetApiV1ExamplesSmsSmsExamplesData,
  ExamplesGetApiV1ExamplesSmsSmsExamplesResponses,
  ExamplesGetApiV1ExamplesAuthAuthExamplesData,
  ExamplesGetApiV1ExamplesAuthAuthExamplesResponses,
  ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesData,
  ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesResponses,
  AuthenticationPostApiV1AuthLoginLoginUserData,
  AuthenticationPostApiV1AuthLoginLoginUserResponses,
  AuthenticationPostApiV1AuthLoginLoginUserErrors,
  AuthenticationPostApiV1AuthLoginJsonLoginUserJsonData,
  AuthenticationPostApiV1AuthLoginJsonLoginUserJsonResponses,
  AuthenticationPostApiV1AuthLoginJsonLoginUserJsonErrors,
  AuthenticationGetApiV1AuthMeReadUserMeData,
  AuthenticationGetApiV1AuthMeReadUserMeResponses,
  AuthenticationPostApiV1AuthLogoutLogoutUserData,
  AuthenticationPostApiV1AuthLogoutLogoutUserResponses,
  AuthPostApiV1AuthTokenOauthTokenData,
  AuthPostApiV1AuthTokenOauthTokenResponses,
  AuthPostApiV1AuthTokenOauthTokenErrors,
  AdminGetApiV1AdminUsersListUsersData,
  AdminGetApiV1AdminUsersListUsersResponses,
  AdminGetApiV1AdminUsersListUsersErrors,
  AdminPostApiV1AdminUsersCreateUserData,
  AdminPostApiV1AdminUsersCreateUserResponses,
  AdminPostApiV1AdminUsersCreateUserErrors,
  AdminDeleteApiV1AdminUsersUserIdDeleteUserData,
  AdminDeleteApiV1AdminUsersUserIdDeleteUserResponses,
  AdminDeleteApiV1AdminUsersUserIdDeleteUserErrors,
  AdminGetApiV1AdminUsersUserIdGetUserData,
  AdminGetApiV1AdminUsersUserIdGetUserResponses,
  AdminGetApiV1AdminUsersUserIdGetUserErrors,
  AdminPutApiV1AdminUsersUserIdUpdateUserData,
  AdminPutApiV1AdminUsersUserIdUpdateUserResponses,
  AdminPutApiV1AdminUsersUserIdUpdateUserErrors,
  AdminPostApiV1AdminUsersUserIdActivateActivateUserData,
  AdminPostApiV1AdminUsersUserIdActivateActivateUserResponses,
  AdminPostApiV1AdminUsersUserIdActivateActivateUserErrors,
  AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserData,
  AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserResponses,
  AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserErrors,
  AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordData,
  AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordResponses,
  AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordErrors,
  Oauth2PostApiV1Oauth2ClientsCreateOauthClientData,
  Oauth2PostApiV1Oauth2ClientsCreateOauthClientResponses,
  Oauth2PostApiV1Oauth2ClientsCreateOauthClientErrors,
  Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientData,
  Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientResponses,
  Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientErrors,
  Oauth2GetApiV1Oauth2AuthorizeAuthorizeData,
  Oauth2GetApiV1Oauth2AuthorizeAuthorizeResponses,
  Oauth2GetApiV1Oauth2AuthorizeAuthorizeErrors,
  SmsPostApiV1SmsSendSendSmsData,
  SmsPostApiV1SmsSendSendSmsResponses,
  SmsPostApiV1SmsSendSendSmsErrors,
  SmsPostApiV1SmsBulkSendBulkSmsData,
  SmsPostApiV1SmsBulkSendBulkSmsResponses,
  SmsPostApiV1SmsBulkSendBulkSmsErrors,
  SmsPostApiV1SmsOtpGenerateGenerateOtpData,
  SmsPostApiV1SmsOtpGenerateGenerateOtpResponses,
  SmsPostApiV1SmsOtpGenerateGenerateOtpErrors,
  SmsPostApiV1SmsOtpVerifyVerifyOtpData,
  SmsPostApiV1SmsOtpVerifyVerifyOtpResponses,
  SmsPostApiV1SmsOtpVerifyVerifyOtpErrors,
  SmsGetApiV1SmsStatusMessageIdGetMessageStatusData,
  SmsGetApiV1SmsStatusMessageIdGetMessageStatusResponses,
  SmsGetApiV1SmsStatusMessageIdGetMessageStatusErrors,
  SmsGetApiV1SmsBalanceGetSmsBalanceData,
  SmsGetApiV1SmsBalanceGetSmsBalanceResponses,
  SmsGetApiV1SmsTemplatesGetMessageTemplatesData,
  SmsGetApiV1SmsTemplatesGetMessageTemplatesResponses,
  ApiGetMetricsMetrics2Data,
  ApiGetMetricsMetrics2Responses,
  ApiGetHealthHealthCheck2Data,
  ApiGetHealthHealthCheck2Responses,
  ApiGetRootRoot2Data,
  ApiGetRootRoot2Responses,
  ApiGetWellKnownOpenidConfigurationOpenidConfigurationData,
  ApiGetWellKnownOpenidConfigurationOpenidConfigurationResponses,
  ApiGetWellKnownJwksJsonJwksData,
  ApiGetWellKnownJwksJsonJwksResponses,
  Oauth2PostApiV1Oauth2TokenGetTokenData,
  Oauth2PostApiV1Oauth2TokenGetTokenResponses,
  Oauth2PostApiV1Oauth2TokenGetTokenErrors,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Health Check
 * Health check endpoint.
 */
export const apiGetHealthHealthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<ApiGetHealthHealthCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiGetHealthHealthCheckResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/health",
    ...options,
  });
};

/**
 * Metrics
 * Prometheus metrics endpoint.
 */
export const apiGetMetricsMetrics = <ThrowOnError extends boolean = false>(
  options?: Options<ApiGetMetricsMetricsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiGetMetricsMetricsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/metrics",
    ...options,
  });
};

/**
 * Root
 * Root endpoint.
 */
export const apiGetRootRoot = <ThrowOnError extends boolean = false>(
  options?: Options<ApiGetRootRootData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiGetRootRootResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/",
    ...options,
  });
};

/**
 * Health Check
 */
export const healthGetApiV1HealthCheckHealthCheck = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<HealthGetApiV1HealthCheckHealthCheckData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthGetApiV1HealthCheckHealthCheckResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/health/check",
    ...options,
  });
};

/**
 * Get Services Health
 */
export const healthGetApiV1HealthServicesGetServicesHealth = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    HealthGetApiV1HealthServicesGetServicesHealthData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthGetApiV1HealthServicesGetServicesHealthResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/health/services",
    ...options,
  });
};

/**
 * Get Metrics
 */
export const monitoringGetApiV1MonitoringMetricsGetMetrics = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    MonitoringGetApiV1MonitoringMetricsGetMetricsData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    MonitoringGetApiV1MonitoringMetricsGetMetricsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/monitoring/metrics",
    ...options,
  });
};

/**
 * Get Alerts
 */
export const monitoringGetApiV1MonitoringAlertsGetAlerts = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    MonitoringGetApiV1MonitoringAlertsGetAlertsData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    MonitoringGetApiV1MonitoringAlertsGetAlertsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/monitoring/alerts",
    ...options,
  });
};

/**
 * Create Log
 */
export const loggingPostApiV1LoggingLogCreateLog = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<LoggingPostApiV1LoggingLogCreateLogData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    LoggingPostApiV1LoggingLogCreateLogResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/logging/log",
    ...options,
  });
};

/**
 * Get Logs
 */
export const loggingGetApiV1LoggingLogsGetLogs = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<LoggingGetApiV1LoggingLogsGetLogsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    LoggingGetApiV1LoggingLogsGetLogsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/logging/logs",
    ...options,
  });
};

/**
 * Check Rate Limit
 */
export const rateLimitPostApiV1RateLimiterLimitCheckRateLimit = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    RateLimitPostApiV1RateLimiterLimitCheckRateLimitData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).post<
    RateLimitPostApiV1RateLimiterLimitCheckRateLimitResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/rate-limiter/limit",
    ...options,
  });
};

/**
 * Get Rate Limit Status
 */
export const rateLimitGetApiV1RateLimiterStatusGetRateLimitStatus = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    RateLimitGetApiV1RateLimiterStatusGetRateLimitStatusData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    RateLimitGetApiV1RateLimiterStatusGetRateLimitStatusResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/rate-limiter/status",
    ...options,
  });
};

/**
 * Generate Content
 * 📝 Generate Content
 */
export const aiPostApiV1AiGenerateGenerateContent = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AiPostApiV1AiGenerateGenerateContentData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AiPostApiV1AiGenerateGenerateContentResponses,
    AiPostApiV1AiGenerateGenerateContentErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ai/generate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Analyze Text
 * 🔍 Analyze Text Content
 */
export const aiPostApiV1AiAnalyzeAnalyzeText = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AiPostApiV1AiAnalyzeAnalyzeTextData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AiPostApiV1AiAnalyzeAnalyzeTextResponses,
    AiPostApiV1AiAnalyzeAnalyzeTextErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ai/analyze",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Chat Completion
 * 🤖 Interactive Chat Completion
 */
export const aiPostApiV1AiChatChatCompletion = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AiPostApiV1AiChatChatCompletionData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AiPostApiV1AiChatChatCompletionResponses,
    AiPostApiV1AiChatChatCompletionErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ai/chat",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Translate Text
 * 🌍 Nigerian Language Translation
 */
export const aiPostApiV1AiTranslateTranslateText = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AiPostApiV1AiTranslateTranslateTextData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AiPostApiV1AiTranslateTranslateTextResponses,
    AiPostApiV1AiTranslateTranslateTextErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ai/translate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Available Models
 * 🧠 Get Available AI Models
 */
export const aiGetApiV1AiModelsGetAvailableModels = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AiGetApiV1AiModelsGetAvailableModelsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AiGetApiV1AiModelsGetAvailableModelsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ai/models",
    ...options,
  });
};

/**
 * Get Conversation
 * 💬 Get Conversation History
 */
export const aiGetApiV1AiConversationsConversationIdGetConversation = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AiGetApiV1AiConversationsConversationIdGetConversationData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    AiGetApiV1AiConversationsConversationIdGetConversationResponses,
    AiGetApiV1AiConversationsConversationIdGetConversationErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ai/conversations/{conversation_id}",
    ...options,
  });
};

/**
 * Get Usage Statistics
 * 📊 Get Token Usage Statistics
 */
export const aiGetApiV1AiUsageGetUsageStatistics = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AiGetApiV1AiUsageGetUsageStatisticsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AiGetApiV1AiUsageGetUsageStatisticsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ai/usage",
    ...options,
  });
};

/**
 * Verify Bvn
 * 🇳🇬 Verify Bank Verification Number (BVN)
 */
export const bvnPostApiV1BvnVerifyVerifyBvn = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BvnPostApiV1BvnVerifyVerifyBvnData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    BvnPostApiV1BvnVerifyVerifyBvnResponses,
    BvnPostApiV1BvnVerifyVerifyBvnErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/bvn/verify",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Bvn Status
 * 📊 Get BVN Verification Status
 */
export const bvnGetApiV1BvnStatusBvnGetBvnStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BvnGetApiV1BvnStatusBvnGetBvnStatusData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    BvnGetApiV1BvnStatusBvnGetBvnStatusResponses,
    BvnGetApiV1BvnStatusBvnGetBvnStatusErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/bvn/status/{bvn}",
    ...options,
  });
};

/**
 * Lookup Bvn
 * 🔍 Basic BVN Lookup
 */
export const bvnPostApiV1BvnLookupLookupBvn = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BvnPostApiV1BvnLookupLookupBvnData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    BvnPostApiV1BvnLookupLookupBvnResponses,
    BvnPostApiV1BvnLookupLookupBvnErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/bvn/lookup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Match Bvn
 * 🔗 Match BVN with User Data
 */
export const bvnPostApiV1BvnMatchMatchBvn = <
  ThrowOnError extends boolean = false,
>(
  options: Options<BvnPostApiV1BvnMatchMatchBvnData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    BvnPostApiV1BvnMatchMatchBvnResponses,
    BvnPostApiV1BvnMatchMatchBvnErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/bvn/match",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Supported Banks
 * 🏦 Get Supported Nigerian Banks
 */
export const bvnGetApiV1BvnBanksGetSupportedBanks = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<BvnGetApiV1BvnBanksGetSupportedBanksData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    BvnGetApiV1BvnBanksGetSupportedBanksResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/bvn/banks",
    ...options,
  });
};

/**
 * Initiate Call
 */
export const ivrPostApiV1IvrCallInitiateCall = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<IvrPostApiV1IvrCallInitiateCallData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    IvrPostApiV1IvrCallInitiateCallResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ivr/call",
    ...options,
  });
};

/**
 * Get Menu
 */
export const ivrGetApiV1IvrMenuGetMenu = <ThrowOnError extends boolean = false>(
  options?: Options<IvrGetApiV1IvrMenuGetMenuData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    IvrGetApiV1IvrMenuGetMenuResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/ivr/menu",
    ...options,
  });
};

/**
 * Verify Nin
 * 🇳🇬 Verify Nigerian Identity Number (NIN)
 */
export const ninPostApiV1NinVerifyVerifyNin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NinPostApiV1NinVerifyVerifyNinData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    NinPostApiV1NinVerifyVerifyNinResponses,
    NinPostApiV1NinVerifyVerifyNinErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/nin/verify",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Nin Status
 * 📊 Get NIN Verification Status
 */
export const ninGetApiV1NinStatusNinGetNinStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NinGetApiV1NinStatusNinGetNinStatusData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    NinGetApiV1NinStatusNinGetNinStatusResponses,
    NinGetApiV1NinStatusNinGetNinStatusErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/nin/status/{nin}",
    ...options,
  });
};

/**
 * Lookup Nin
 * 🔍 Basic NIN Lookup
 */
export const ninPostApiV1NinLookupLookupNin = <
  ThrowOnError extends boolean = false,
>(
  options: Options<NinPostApiV1NinLookupLookupNinData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    NinPostApiV1NinLookupLookupNinResponses,
    NinPostApiV1NinLookupLookupNinErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/nin/lookup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Send Sms
 */
export const twoWaySmsPostApiV1TwoWaySmsSendSendSms = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<TwoWaySmsPostApiV1TwoWaySmsSendSendSmsData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).post<
    TwoWaySmsPostApiV1TwoWaySmsSendSendSmsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/two-way-sms/send",
    ...options,
  });
};

/**
 * Receive Sms
 */
export const twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSms = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).post<
    TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/two-way-sms/receive",
    ...options,
  });
};

/**
 * Get Services Health
 * 💚 Platform Health Overview
 *
 * Comprehensive health check for all backend services.
 * Essential for monitoring Nigerian DPI platform status.
 */
export const healthGetApiV1ServicesHealthGetServicesHealth = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    HealthGetApiV1ServicesHealthGetServicesHealthData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthGetApiV1ServicesHealthGetServicesHealthResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/services/health",
    ...options,
  });
};

/**
 * Get Dpi Health
 * 🇳🇬 Nigerian DPI Services Health
 *
 * Focused health check for core DPI services.
 * Tailored for Nigerian startup developers.
 */
export const healthGetApiV1DpiHealthGetDpiHealth = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<HealthGetApiV1DpiHealthGetDpiHealthData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthGetApiV1DpiHealthGetDpiHealthResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/dpi/health",
    ...options,
  });
};

/**
 * Get Service Health
 * 🔍 Individual Service Health
 *
 * Detailed health check for a specific service.
 * Essential for troubleshooting and monitoring.
 */
export const healthGetApiV1ServicesServiceNameHealthGetServiceHealth = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    HealthGetApiV1ServicesServiceNameHealthGetServiceHealthData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    HealthGetApiV1ServicesServiceNameHealthGetServiceHealthResponses,
    HealthGetApiV1ServicesServiceNameHealthGetServiceHealthErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/services/{service_name}/health",
    ...options,
  });
};

/**
 * Get Service Metrics
 * 📈 Service Performance Metrics
 *
 * Detailed performance and usage metrics for specific service.
 * Critical for capacity planning and optimization.
 */
export const healthGetApiV1ServicesServiceNameMetricsGetServiceMetrics = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsResponses,
    HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/services/{service_name}/metrics",
    ...options,
  });
};

/**
 * Nin Examples
 * 📋 NIN Verification Examples
 */
export const examplesGetApiV1ExamplesNinNinExamples = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ExamplesGetApiV1ExamplesNinNinExamplesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ExamplesGetApiV1ExamplesNinNinExamplesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/examples/nin",
    ...options,
  });
};

/**
 * Sms Examples
 * 📱 Nigerian SMS Examples
 */
export const examplesGetApiV1ExamplesSmsSmsExamples = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ExamplesGetApiV1ExamplesSmsSmsExamplesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ExamplesGetApiV1ExamplesSmsSmsExamplesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/examples/sms",
    ...options,
  });
};

/**
 * Auth Examples
 * 🔐 OAuth2 Bearer Token Examples
 */
export const examplesGetApiV1ExamplesAuthAuthExamples = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ExamplesGetApiV1ExamplesAuthAuthExamplesData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ExamplesGetApiV1ExamplesAuthAuthExamplesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/examples/auth",
    ...options,
  });
};

/**
 * Integration Examples
 * 🚀 Complete DPI Integration Examples
 */
export const examplesGetApiV1ExamplesIntegrationIntegrationExamples = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/examples/integration",
    ...options,
  });
};

/**
 * Login User
 * 🔐 OAuth2 Compatible Login
 *
 * Authenticate user with form data and return JWT tokens.
 * Compatible with OAuth2 password flow for API clients.
 *
 * **Request Format:**
 * - Content-Type: application/x-www-form-urlencoded
 * - username: Email or username
 * - password: User password
 *
 * **Response:**
 * - access_token: JWT token for API access
 * - refresh_token: Token for refreshing access
 * - token_type: "bearer"
 * - expires_in: Token expiration in seconds
 *
 * **Use Cases:**
 * - OAuth2 client applications
 * - API integrations requiring form-based auth
 * - Third-party service authentication
 */
export const authenticationPostApiV1AuthLoginLoginUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthenticationPostApiV1AuthLoginLoginUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AuthenticationPostApiV1AuthLoginLoginUserResponses,
    AuthenticationPostApiV1AuthLoginLoginUserErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options.headers,
    },
  });
};

/**
 * Login User Json
 * 🚀 JSON Login for Nigerian Startups
 *
 * Primary login endpoint for Nigerian DPI developers.
 * Accepts JSON payload with email or username authentication.
 *
 * **Request Example:**
 * ```json
 * {
 * "identifier": "adebayo@fintech.ng",  // Email or username
 * "password": "SecurePass123"
 * }
 * ```
 *
 * **Features:**
 * - ✅ Email or username login
 * - ✅ JWT token generation
 * - ✅ Last login tracking
 * - ✅ Request correlation ID support
 *
 * **Nigerian Context:**
 * - Supports Nigerian email domains (.ng, .com.ng)
 * - Optimized for fintech and DPI applications
 * - Audit logging for regulatory compliance
 */
export const authenticationPostApiV1AuthLoginJsonLoginUserJson = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AuthenticationPostApiV1AuthLoginJsonLoginUserJsonData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).post<
    AuthenticationPostApiV1AuthLoginJsonLoginUserJsonResponses,
    AuthenticationPostApiV1AuthLoginJsonLoginUserJsonErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/login/json",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Read User Me
 * 👤 Get Current User Profile
 *
 * Retrieve authenticated user's profile information.
 * Requires valid JWT token in Authorization header.
 *
 * **Headers Required:**
 * - Authorization: Bearer {access_token}
 *
 * **Returns:**
 * - User profile with Nigerian DPI context
 * - NIN/BVN verification status
 * - Account activity information
 *
 * **Security:**
 * - Token validation required
 * - Active user status check
 * - Soft-delete filtering applied
 */
export const authenticationGetApiV1AuthMeReadUserMe = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AuthenticationGetApiV1AuthMeReadUserMeData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthenticationGetApiV1AuthMeReadUserMeResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/me",
    ...options,
  });
};

/**
 * Logout User
 * 🚪 User Logout
 *
 * Logout current user session.
 * Client should remove tokens from storage.
 *
 * **Process:**
 * 1. Client receives logout confirmation
 * 2. Client removes access/refresh tokens
 * 3. Tokens become invalid on next request
 *
 * **Best Practice:**
 * - Clear all stored authentication data
 * - Redirect to login page
 * - Invalidate any cached user data
 *
 * **Note:** Server-side token blacklisting available
 * for enhanced security in production.
 */
export const authenticationPostApiV1AuthLogoutLogoutUser = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    AuthenticationPostApiV1AuthLogoutLogoutUserData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthenticationPostApiV1AuthLogoutLogoutUserResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/logout",
    ...options,
  });
};

/**
 * Oauth Token
 * 🔑 OAuth2 Token Endpoint
 */
export const authPostApiV1AuthTokenOauthToken = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthPostApiV1AuthTokenOauthTokenData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AuthPostApiV1AuthTokenOauthTokenResponses,
    AuthPostApiV1AuthTokenOauthTokenErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/token",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * List Users
 * 📄 List All Nigerian Startup Users
 *
 * Retrieve paginated list of all registered users.
 * Includes verification status and activity metrics.
 *
 * **Query Parameters:**
 * - skip: Number of records to skip (default: 0)
 * - limit: Maximum records to return (default: 100)
 *
 * **Response Includes:**
 * - User profiles with NIN/BVN status
 * - Last login and activity data
 * - Account verification levels
 * - Soft-delete filtering applied
 *
 * **Admin Only:** Platform oversight and user management
 */
export const adminGetApiV1AdminUsersListUsers = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<AdminGetApiV1AdminUsersListUsersData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    AdminGetApiV1AdminUsersListUsersResponses,
    AdminGetApiV1AdminUsersListUsersErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/admin/users",
    ...options,
  });
};

/**
 * Create User
 * 👥 Create Nigerian Startup Account
 *
 * Create new user account for Nigerian DPI developers.
 * Only accessible by platform administrators.
 *
 * **Request Example:**
 * ```json
 * {
 * "email": "developer@fintech.ng",
 * "username": "fintech_dev",
 * "password": "TempPass123",
 * "first_name": "Adebayo",
 * "last_name": "Ogundimu",
 * "role": "developer"  // Optional: admin, developer
 * }
 * ```
 *
 * **Features:**
 * - ✅ Email uniqueness validation
 * - ✅ Username availability check
 * - ✅ Automatic welcome email
 * - ✅ Nigerian domain support (.ng, .com.ng)
 *
 * **Admin Access Required:**
 * - Must be authenticated as admin
 * - Closed sandbox: Only 9 Nigerian startups
 */
export const adminPostApiV1AdminUsersCreateUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AdminPostApiV1AdminUsersCreateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    AdminPostApiV1AdminUsersCreateUserResponses,
    AdminPostApiV1AdminUsersCreateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/admin/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Delete User
 * 🗑️ Soft Delete User Account
 *
 * Mark user account as deleted (soft delete).
 * Preserves data for audit compliance.
 *
 * **Process:**
 * 1. Sets is_deleted = true
 * 2. Records deletion timestamp
 * 3. Maintains audit trail
 * 4. Frees email/username for reuse
 *
 * **Data Retention:**
 * - User data preserved for compliance
 * - API access immediately revoked
 * - Email/username become available
 *
 * **NDPR Compliant:** Nigerian Data Protection Regulation
 */
export const adminDeleteApiV1AdminUsersUserIdDeleteUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AdminDeleteApiV1AdminUsersUserIdDeleteUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).delete<
    AdminDeleteApiV1AdminUsersUserIdDeleteUserResponses,
    AdminDeleteApiV1AdminUsersUserIdDeleteUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/admin/users/{user_id}",
    ...options,
  });
};

/**
 * Get User
 * 🔍 Get Specific User Details
 *
 * Retrieve detailed information for a specific user.
 * Includes full profile and verification status.
 *
 * **Path Parameters:**
 * - user_id: Unique user identifier
 *
 * **Returns:**
 * - Complete user profile
 * - NIN/BVN verification status
 * - Account activity history
 * - Role and permissions
 *
 * **Use Cases:**
 * - User support and troubleshooting
 * - Account verification review
 * - Compliance auditing
 */
export const adminGetApiV1AdminUsersUserIdGetUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AdminGetApiV1AdminUsersUserIdGetUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    AdminGetApiV1AdminUsersUserIdGetUserResponses,
    AdminGetApiV1AdminUsersUserIdGetUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/admin/users/{user_id}",
    ...options,
  });
};

/**
 * Update User
 * ✏️ Update User Profile
 *
 * Modify user account information and settings.
 * Supports partial updates with validation.
 *
 * **Updatable Fields:**
 * - first_name, last_name
 * - email (with uniqueness check)
 * - username (with availability check)
 * - role (admin, developer)
 * - is_active status
 *
 * **Validation:**
 * - Email format and domain validation
 * - Username uniqueness across platform
 * - Role permission verification
 *
 * **Audit Trail:** All changes logged for compliance
 */
export const adminPutApiV1AdminUsersUserIdUpdateUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AdminPutApiV1AdminUsersUserIdUpdateUserData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).put<
    AdminPutApiV1AdminUsersUserIdUpdateUserResponses,
    AdminPutApiV1AdminUsersUserIdUpdateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/admin/users/{user_id}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Activate User
 * ✅ Activate User Account
 *
 * Enable user account for API access.
 * Restores full platform functionality.
 *
 * **Effects:**
 * - Enables login and API access
 * - Restores DPI service usage
 * - Allows NIN/BVN verification
 * - Resumes audit logging
 *
 * **Use Cases:**
 * - New account activation
 * - Account restoration after suspension
 * - Startup onboarding completion
 *
 * **Notification:** User receives activation email
 */
export const adminPostApiV1AdminUsersUserIdActivateActivateUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AdminPostApiV1AdminUsersUserIdActivateActivateUserData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).post<
    AdminPostApiV1AdminUsersUserIdActivateActivateUserResponses,
    AdminPostApiV1AdminUsersUserIdActivateActivateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/admin/users/{user_id}/activate",
    ...options,
  });
};

/**
 * Deactivate User
 * ❌ Deactivate User Account
 *
 * Suspend user account and revoke API access.
 * Temporary suspension without data loss.
 *
 * **Effects:**
 * - Blocks login attempts
 * - Revokes API access tokens
 * - Suspends DPI service usage
 * - Maintains audit trail
 *
 * **Use Cases:**
 * - Policy violation suspension
 * - Security incident response
 * - Temporary account freeze
 *
 * **Reversible:** Account can be reactivated
 */
export const adminPostApiV1AdminUsersUserIdDeactivateDeactivateUser = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).post<
    AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserResponses,
    AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/admin/users/{user_id}/deactivate",
    ...options,
  });
};

/**
 * Reset User Password
 * 🔑 Admin Password Reset
 *
 * Reset user password for account recovery.
 * Sends secure notification to user email.
 *
 * **Request Body:**
 * ```json
 * {
 * "new_password": "NewSecurePass123"
 * }
 * ```
 *
 * **Security Process:**
 * 1. Validates admin permissions
 * 2. Hashes new password securely
 * 3. Updates user credentials
 * 4. Sends notification email
 * 5. Logs password change event
 *
 * **Best Practice:** User should change password on next login
 */
export const adminPostApiV1AdminUsersUserIdResetPasswordResetUserPassword = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).post<
    AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordResponses,
    AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/admin/users/{user_id}/reset-password",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Create Oauth Client
 * Create a new OAuth2 client.
 */
export const oauth2PostApiV1Oauth2ClientsCreateOauthClient = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    Oauth2PostApiV1Oauth2ClientsCreateOauthClientData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).post<
    Oauth2PostApiV1Oauth2ClientsCreateOauthClientResponses,
    Oauth2PostApiV1Oauth2ClientsCreateOauthClientErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/oauth2/clients",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Oauth Client
 * Get OAuth2 client by ID.
 */
export const oauth2GetApiV1Oauth2ClientsClientIdGetOauthClient = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientResponses,
    Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/oauth2/clients/{client_id}",
    ...options,
  });
};

/**
 * Authorize
 * OAuth2 authorization endpoint.
 */
export const oauth2GetApiV1Oauth2AuthorizeAuthorize = <
  ThrowOnError extends boolean = false,
>(
  options: Options<Oauth2GetApiV1Oauth2AuthorizeAuthorizeData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    Oauth2GetApiV1Oauth2AuthorizeAuthorizeResponses,
    Oauth2GetApiV1Oauth2AuthorizeAuthorizeErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/oauth2/authorize",
    ...options,
  });
};

/**
 * Send Sms
 * 📱 Send SMS to Nigerian Number
 */
export const smsPostApiV1SmsSendSendSms = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SmsPostApiV1SmsSendSendSmsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SmsPostApiV1SmsSendSendSmsResponses,
    SmsPostApiV1SmsSendSendSmsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/sms/send",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Send Bulk Sms
 * 📤 Send Bulk SMS Messages
 */
export const smsPostApiV1SmsBulkSendBulkSms = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SmsPostApiV1SmsBulkSendBulkSmsData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SmsPostApiV1SmsBulkSendBulkSmsResponses,
    SmsPostApiV1SmsBulkSendBulkSmsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/sms/bulk",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Generate Otp
 * 🔐 Generate and Send OTP
 */
export const smsPostApiV1SmsOtpGenerateGenerateOtp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SmsPostApiV1SmsOtpGenerateGenerateOtpResponses,
    SmsPostApiV1SmsOtpGenerateGenerateOtpErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/sms/otp/generate",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Verify Otp
 * ✅ Verify OTP Code
 */
export const smsPostApiV1SmsOtpVerifyVerifyOtp = <
  ThrowOnError extends boolean = false,
>(
  options: Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    SmsPostApiV1SmsOtpVerifyVerifyOtpResponses,
    SmsPostApiV1SmsOtpVerifyVerifyOtpErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/sms/otp/verify",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Message Status
 * 📊 Check Message Delivery Status
 */
export const smsGetApiV1SmsStatusMessageIdGetMessageStatus = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SmsGetApiV1SmsStatusMessageIdGetMessageStatusData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    SmsGetApiV1SmsStatusMessageIdGetMessageStatusResponses,
    SmsGetApiV1SmsStatusMessageIdGetMessageStatusErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/sms/status/{message_id}",
    ...options,
  });
};

/**
 * Get Sms Balance
 * 💰 Check SMS Credit Balance
 */
export const smsGetApiV1SmsBalanceGetSmsBalance = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<SmsGetApiV1SmsBalanceGetSmsBalanceData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    SmsGetApiV1SmsBalanceGetSmsBalanceResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/sms/balance",
    ...options,
  });
};

/**
 * Get Message Templates
 * 📝 Get Message Templates
 */
export const smsGetApiV1SmsTemplatesGetMessageTemplates = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    SmsGetApiV1SmsTemplatesGetMessageTemplatesData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    SmsGetApiV1SmsTemplatesGetMessageTemplatesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/sms/templates",
    ...options,
  });
};

/**
 * Metrics
 * Endpoint that serves Prometheus metrics.
 */
export const apiGetMetricsMetrics2 = <ThrowOnError extends boolean = false>(
  options?: Options<ApiGetMetricsMetrics2Data, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiGetMetricsMetrics2Responses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/metrics",
    ...options,
  });
};

/**
 * Health Check
 * Health check endpoint.
 */
export const apiGetHealthHealthCheck2 = <ThrowOnError extends boolean = false>(
  options?: Options<ApiGetHealthHealthCheck2Data, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiGetHealthHealthCheck2Responses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/health",
    ...options,
  });
};

/**
 * Root
 * Root endpoint.
 */
export const apiGetRootRoot2 = <ThrowOnError extends boolean = false>(
  options?: Options<ApiGetRootRoot2Data, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiGetRootRoot2Responses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/",
    ...options,
  });
};

/**
 * Openid Configuration
 * OpenID Connect Discovery endpoint.
 */
export const apiGetWellKnownOpenidConfigurationOpenidConfiguration = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    ApiGetWellKnownOpenidConfigurationOpenidConfigurationData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiGetWellKnownOpenidConfigurationOpenidConfigurationResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/.well-known/openid_configuration",
    ...options,
  });
};

/**
 * Jwks
 * JSON Web Key Set endpoint.
 */
export const apiGetWellKnownJwksJsonJwks = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ApiGetWellKnownJwksJsonJwksData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ApiGetWellKnownJwksJsonJwksResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/.well-known/jwks.json",
    ...options,
  });
};

/**
 * Get Token
 * OAuth2 token endpoint.
 */
export const oauth2PostApiV1Oauth2TokenGetToken = <
  ThrowOnError extends boolean = false,
>(
  options: Options<Oauth2PostApiV1Oauth2TokenGetTokenData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    Oauth2PostApiV1Oauth2TokenGetTokenResponses,
    Oauth2PostApiV1Oauth2TokenGetTokenErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/oauth2/token",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options.headers,
    },
  });
};
