// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options as ClientOptions,
  type TDataShape,
  type Client,
  urlSearchParamsBodySerializer,
} from "./client";
import type {
  HealthCheckHealthGetData,
  HealthCheckHealthGetResponses,
  RootGetData,
  RootGetResponses,
  OpenidConfigurationWellKnownOpenidConfigurationGetData,
  OpenidConfigurationWellKnownOpenidConfigurationGetResponses,
  JwksWellKnownJwksJsonGetData,
  JwksWellKnownJwksJsonGetResponses,
  RegisterUserApiV1AuthRegisterPostData,
  RegisterUserApiV1AuthRegisterPostResponses,
  RegisterUserApiV1AuthRegisterPostErrors,
  LoginUserApiV1AuthLoginPostData,
  LoginUserApiV1AuthLoginPostResponses,
  LoginUserApiV1AuthLoginPostErrors,
  LoginUserJsonApiV1AuthLoginJsonPostData,
  LoginUserJsonApiV1AuthLoginJsonPostResponses,
  LoginUserJsonApiV1AuthLoginJsonPostErrors,
  GetUserInfoApiV1AuthUserinfoGetData,
  GetUserInfoApiV1AuthUserinfoGetResponses,
  ReadUserMeApiV1AuthMeGetData,
  ReadUserMeApiV1AuthMeGetResponses,
  CreateOauthClientApiV1Oauth2ClientsPostData,
  CreateOauthClientApiV1Oauth2ClientsPostResponses,
  CreateOauthClientApiV1Oauth2ClientsPostErrors,
  GetOauthClientApiV1Oauth2ClientsClientIdGetData,
  GetOauthClientApiV1Oauth2ClientsClientIdGetResponses,
  GetOauthClientApiV1Oauth2ClientsClientIdGetErrors,
  AuthorizeApiV1Oauth2AuthorizeGetData,
  AuthorizeApiV1Oauth2AuthorizeGetResponses,
  AuthorizeApiV1Oauth2AuthorizeGetErrors,
  GetTokenApiV1Oauth2TokenPostData,
  GetTokenApiV1Oauth2TokenPostResponses,
  GetTokenApiV1Oauth2TokenPostErrors,
  VerifyNinBvnApiV1IdentityVerifyNinBvnPostData,
  VerifyNinBvnApiV1IdentityVerifyNinBvnPostResponses,
  VerifyNinBvnApiV1IdentityVerifyNinBvnPostErrors,
  GetVerificationStatusApiV1IdentityVerificationStatusGetData,
  GetVerificationStatusApiV1IdentityVerificationStatusGetResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckHealthGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthCheckHealthGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/health",
    ...options,
  });
};

/**
 * Root
 * Root endpoint.
 */
export const rootGet = <ThrowOnError extends boolean = false>(
  options?: Options<RootGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    RootGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};

/**
 * Openid Configuration
 * OpenID Connect Discovery endpoint.
 */
export const openidConfigurationWellKnownOpenidConfigurationGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    OpenidConfigurationWellKnownOpenidConfigurationGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    OpenidConfigurationWellKnownOpenidConfigurationGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/.well-known/openid_configuration",
    ...options,
  });
};

/**
 * Jwks
 * JSON Web Key Set endpoint.
 */
export const jwksWellKnownJwksJsonGet = <ThrowOnError extends boolean = false>(
  options?: Options<JwksWellKnownJwksJsonGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    JwksWellKnownJwksJsonGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/.well-known/jwks.json",
    ...options,
  });
};

/**
 * Register User
 * Register a new user.
 */
export const registerUserApiV1AuthRegisterPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<RegisterUserApiV1AuthRegisterPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    RegisterUserApiV1AuthRegisterPostResponses,
    RegisterUserApiV1AuthRegisterPostErrors,
    ThrowOnError
  >({
    url: "/api/v1/auth/register",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Login User
 * OAuth2 compatible token login, get an access token for future requests.
 */
export const loginUserApiV1AuthLoginPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoginUserApiV1AuthLoginPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginUserApiV1AuthLoginPostResponses,
    LoginUserApiV1AuthLoginPostErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/api/v1/auth/login",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options.headers,
    },
  });
};

/**
 * Login User Json
 * Login with JSON payload.
 */
export const loginUserJsonApiV1AuthLoginJsonPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<LoginUserJsonApiV1AuthLoginJsonPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    LoginUserJsonApiV1AuthLoginJsonPostResponses,
    LoginUserJsonApiV1AuthLoginJsonPostErrors,
    ThrowOnError
  >({
    url: "/api/v1/auth/login/json",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get User Info
 * Get current user information.
 */
export const getUserInfoApiV1AuthUserinfoGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetUserInfoApiV1AuthUserinfoGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserInfoApiV1AuthUserinfoGetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/userinfo",
    ...options,
  });
};

/**
 * Read User Me
 * Get current user.
 */
export const readUserMeApiV1AuthMeGet = <ThrowOnError extends boolean = false>(
  options?: Options<ReadUserMeApiV1AuthMeGetData, ThrowOnError>
) => {
  return (options?.client ?? _heyApiClient).get<
    ReadUserMeApiV1AuthMeGetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/auth/me",
    ...options,
  });
};

/**
 * Create Oauth Client
 * Create a new OAuth2 client.
 */
export const createOauthClientApiV1Oauth2ClientsPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CreateOauthClientApiV1Oauth2ClientsPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    CreateOauthClientApiV1Oauth2ClientsPostResponses,
    CreateOauthClientApiV1Oauth2ClientsPostErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/oauth2/clients",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Oauth Client
 * Get OAuth2 client by ID.
 */
export const getOauthClientApiV1Oauth2ClientsClientIdGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    GetOauthClientApiV1Oauth2ClientsClientIdGetData,
    ThrowOnError
  >
) => {
  return (options.client ?? _heyApiClient).get<
    GetOauthClientApiV1Oauth2ClientsClientIdGetResponses,
    GetOauthClientApiV1Oauth2ClientsClientIdGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/oauth2/clients/{client_id}",
    ...options,
  });
};

/**
 * Authorize
 * OAuth2 authorization endpoint.
 */
export const authorizeApiV1Oauth2AuthorizeGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<AuthorizeApiV1Oauth2AuthorizeGetData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).get<
    AuthorizeApiV1Oauth2AuthorizeGetResponses,
    AuthorizeApiV1Oauth2AuthorizeGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/oauth2/authorize",
    ...options,
  });
};

/**
 * Get Token
 * OAuth2 token endpoint.
 */
export const getTokenApiV1Oauth2TokenPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetTokenApiV1Oauth2TokenPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    GetTokenApiV1Oauth2TokenPostResponses,
    GetTokenApiV1Oauth2TokenPostErrors,
    ThrowOnError
  >({
    ...urlSearchParamsBodySerializer,
    url: "/api/v1/oauth2/token",
    ...options,
    headers: {
      "Content-Type": "application/x-www-form-urlencoded",
      ...options.headers,
    },
  });
};

/**
 * Verify Nin Bvn
 * Verify NIN and/or BVN for the current user.
 */
export const verifyNinBvnApiV1IdentityVerifyNinBvnPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<VerifyNinBvnApiV1IdentityVerifyNinBvnPostData, ThrowOnError>
) => {
  return (options.client ?? _heyApiClient).post<
    VerifyNinBvnApiV1IdentityVerifyNinBvnPostResponses,
    VerifyNinBvnApiV1IdentityVerifyNinBvnPostErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/identity/verify-nin-bvn",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Verification Status
 * Get current user's verification status.
 */
export const getVerificationStatusApiV1IdentityVerificationStatusGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    GetVerificationStatusApiV1IdentityVerificationStatusGetData,
    ThrowOnError
  >
) => {
  return (options?.client ?? _heyApiClient).get<
    GetVerificationStatusApiV1IdentityVerificationStatusGetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/api/v1/identity/verification-status",
    ...options,
  });
};
