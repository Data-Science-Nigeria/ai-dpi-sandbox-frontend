// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  healthCheckHealthGet,
  metricsMetricsGet,
  rootGet,
  proxyAuthServiceApiV1AuthPathPatch,
  proxyAuthServiceApiV1AuthPathPatch2,
  proxyAuthServiceApiV1AuthPathPatch4,
  proxyAuthServiceApiV1AuthPathPatch5,
  proxyAuthServiceApiV1AuthPathPatch6,
  proxySmsServiceApiV1SmsPathPatch,
  proxySmsServiceApiV1SmsPathPatch2,
  proxySmsServiceApiV1SmsPathPatch4,
  proxySmsServiceApiV1SmsPathPatch5,
  proxySmsServiceApiV1SmsPathPatch6,
  proxyLlmServiceApiV1LlmPathPatch,
  proxyLlmServiceApiV1LlmPathPatch2,
  proxyLlmServiceApiV1LlmPathPatch4,
  proxyLlmServiceApiV1LlmPathPatch5,
  proxyLlmServiceApiV1LlmPathPatch6,
  proxyConfigServiceApiV1ConfigsPathPatch,
  proxyConfigServiceApiV1ConfigsPathPatch2,
  proxyConfigServiceApiV1ConfigsPathPatch4,
  proxyConfigServiceApiV1ConfigsPathPatch5,
  proxyConfigServiceApiV1ConfigsPathPatch6,
  getServicesHealthApiV1ServicesHealthGet,
  getServicesStatusApiV1ServicesStatusGet,
  getServiceHealthApiV1ServicesServiceNameHealthGet,
  getServiceMetricsApiV1ServicesServiceNameMetricsGet,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  HealthCheckHealthGetData,
  MetricsMetricsGetData,
  RootGetData,
  ProxyAuthServiceApiV1AuthPathPatchData,
  ProxyAuthServiceApiV1AuthPathPatchError,
  ProxyAuthServiceApiV1AuthPathPatch2Data,
  ProxyAuthServiceApiV1AuthPathPatch4Data,
  ProxyAuthServiceApiV1AuthPathPatch4Error,
  ProxyAuthServiceApiV1AuthPathPatch5Data,
  ProxyAuthServiceApiV1AuthPathPatch5Error,
  ProxyAuthServiceApiV1AuthPathPatch6Data,
  ProxyAuthServiceApiV1AuthPathPatch6Error,
  ProxySmsServiceApiV1SmsPathPatchData,
  ProxySmsServiceApiV1SmsPathPatchError,
  ProxySmsServiceApiV1SmsPathPatch2Data,
  ProxySmsServiceApiV1SmsPathPatch4Data,
  ProxySmsServiceApiV1SmsPathPatch4Error,
  ProxySmsServiceApiV1SmsPathPatch5Data,
  ProxySmsServiceApiV1SmsPathPatch5Error,
  ProxySmsServiceApiV1SmsPathPatch6Data,
  ProxySmsServiceApiV1SmsPathPatch6Error,
  ProxyLlmServiceApiV1LlmPathPatchData,
  ProxyLlmServiceApiV1LlmPathPatchError,
  ProxyLlmServiceApiV1LlmPathPatch2Data,
  ProxyLlmServiceApiV1LlmPathPatch4Data,
  ProxyLlmServiceApiV1LlmPathPatch4Error,
  ProxyLlmServiceApiV1LlmPathPatch5Data,
  ProxyLlmServiceApiV1LlmPathPatch5Error,
  ProxyLlmServiceApiV1LlmPathPatch6Data,
  ProxyLlmServiceApiV1LlmPathPatch6Error,
  ProxyConfigServiceApiV1ConfigsPathPatchData,
  ProxyConfigServiceApiV1ConfigsPathPatchError,
  ProxyConfigServiceApiV1ConfigsPathPatch2Data,
  ProxyConfigServiceApiV1ConfigsPathPatch4Data,
  ProxyConfigServiceApiV1ConfigsPathPatch4Error,
  ProxyConfigServiceApiV1ConfigsPathPatch5Data,
  ProxyConfigServiceApiV1ConfigsPathPatch5Error,
  ProxyConfigServiceApiV1ConfigsPathPatch6Data,
  ProxyConfigServiceApiV1ConfigsPathPatch6Error,
  GetServicesHealthApiV1ServicesHealthGetData,
  GetServicesStatusApiV1ServicesStatusGetData,
  GetServiceHealthApiV1ServicesServiceNameHealthGetData,
  GetServiceMetricsApiV1ServicesServiceNameMetricsGetData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const healthCheckHealthGetQueryKey = (
  options?: Options<HealthCheckHealthGetData>
) => createQueryKey("healthCheckHealthGet", options);

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGetOptions = (
  options?: Options<HealthCheckHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthCheckHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckHealthGetQueryKey(options),
  });
};

export const metricsMetricsGetQueryKey = (
  options?: Options<MetricsMetricsGetData>
) => createQueryKey("metricsMetricsGet", options);

/**
 * Metrics
 * Prometheus metrics endpoint.
 */
export const metricsMetricsGetOptions = (
  options?: Options<MetricsMetricsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metricsMetricsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metricsMetricsGetQueryKey(options),
  });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) =>
  createQueryKey("rootGet", options);

/**
 * Root
 * Root endpoint.
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rootGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootGetQueryKey(options),
  });
};

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathPatchMutation = (
  options?: Partial<Options<ProxyAuthServiceApiV1AuthPathPatchData>>
): UseMutationOptions<
  unknown,
  ProxyAuthServiceApiV1AuthPathPatchError,
  Options<ProxyAuthServiceApiV1AuthPathPatchData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyAuthServiceApiV1AuthPathPatchError,
    Options<ProxyAuthServiceApiV1AuthPathPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyAuthServiceApiV1AuthPathPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyAuthServiceApiV1AuthPathPatch2QueryKey = (
  options: Options<ProxyAuthServiceApiV1AuthPathPatch2Data>
) => createQueryKey("proxyAuthServiceApiV1AuthPathPatch2", options);

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathPatch2Options = (
  options: Options<ProxyAuthServiceApiV1AuthPathPatch2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyAuthServiceApiV1AuthPathPatch2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyAuthServiceApiV1AuthPathPatch2QueryKey(options),
  });
};

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathPatch4Mutation = (
  options?: Partial<Options<ProxyAuthServiceApiV1AuthPathPatch4Data>>
): UseMutationOptions<
  unknown,
  ProxyAuthServiceApiV1AuthPathPatch4Error,
  Options<ProxyAuthServiceApiV1AuthPathPatch4Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyAuthServiceApiV1AuthPathPatch4Error,
    Options<ProxyAuthServiceApiV1AuthPathPatch4Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyAuthServiceApiV1AuthPathPatch4({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyAuthServiceApiV1AuthPathPatch5QueryKey = (
  options: Options<ProxyAuthServiceApiV1AuthPathPatch5Data>
) => createQueryKey("proxyAuthServiceApiV1AuthPathPatch5", options);

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathPatch5Options = (
  options: Options<ProxyAuthServiceApiV1AuthPathPatch5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyAuthServiceApiV1AuthPathPatch5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyAuthServiceApiV1AuthPathPatch5QueryKey(options),
  });
};

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathPatch5Mutation = (
  options?: Partial<Options<ProxyAuthServiceApiV1AuthPathPatch5Data>>
): UseMutationOptions<
  unknown,
  ProxyAuthServiceApiV1AuthPathPatch5Error,
  Options<ProxyAuthServiceApiV1AuthPathPatch5Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyAuthServiceApiV1AuthPathPatch5Error,
    Options<ProxyAuthServiceApiV1AuthPathPatch5Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyAuthServiceApiV1AuthPathPatch5({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathPatch6Mutation = (
  options?: Partial<Options<ProxyAuthServiceApiV1AuthPathPatch6Data>>
): UseMutationOptions<
  unknown,
  ProxyAuthServiceApiV1AuthPathPatch6Error,
  Options<ProxyAuthServiceApiV1AuthPathPatch6Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyAuthServiceApiV1AuthPathPatch6Error,
    Options<ProxyAuthServiceApiV1AuthPathPatch6Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyAuthServiceApiV1AuthPathPatch6({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathPatchMutation = (
  options?: Partial<Options<ProxySmsServiceApiV1SmsPathPatchData>>
): UseMutationOptions<
  unknown,
  ProxySmsServiceApiV1SmsPathPatchError,
  Options<ProxySmsServiceApiV1SmsPathPatchData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxySmsServiceApiV1SmsPathPatchError,
    Options<ProxySmsServiceApiV1SmsPathPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxySmsServiceApiV1SmsPathPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxySmsServiceApiV1SmsPathPatch2QueryKey = (
  options: Options<ProxySmsServiceApiV1SmsPathPatch2Data>
) => createQueryKey("proxySmsServiceApiV1SmsPathPatch2", options);

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathPatch2Options = (
  options: Options<ProxySmsServiceApiV1SmsPathPatch2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxySmsServiceApiV1SmsPathPatch2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxySmsServiceApiV1SmsPathPatch2QueryKey(options),
  });
};

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathPatch4Mutation = (
  options?: Partial<Options<ProxySmsServiceApiV1SmsPathPatch4Data>>
): UseMutationOptions<
  unknown,
  ProxySmsServiceApiV1SmsPathPatch4Error,
  Options<ProxySmsServiceApiV1SmsPathPatch4Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxySmsServiceApiV1SmsPathPatch4Error,
    Options<ProxySmsServiceApiV1SmsPathPatch4Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxySmsServiceApiV1SmsPathPatch4({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxySmsServiceApiV1SmsPathPatch5QueryKey = (
  options: Options<ProxySmsServiceApiV1SmsPathPatch5Data>
) => createQueryKey("proxySmsServiceApiV1SmsPathPatch5", options);

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathPatch5Options = (
  options: Options<ProxySmsServiceApiV1SmsPathPatch5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxySmsServiceApiV1SmsPathPatch5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxySmsServiceApiV1SmsPathPatch5QueryKey(options),
  });
};

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathPatch5Mutation = (
  options?: Partial<Options<ProxySmsServiceApiV1SmsPathPatch5Data>>
): UseMutationOptions<
  unknown,
  ProxySmsServiceApiV1SmsPathPatch5Error,
  Options<ProxySmsServiceApiV1SmsPathPatch5Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxySmsServiceApiV1SmsPathPatch5Error,
    Options<ProxySmsServiceApiV1SmsPathPatch5Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxySmsServiceApiV1SmsPathPatch5({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathPatch6Mutation = (
  options?: Partial<Options<ProxySmsServiceApiV1SmsPathPatch6Data>>
): UseMutationOptions<
  unknown,
  ProxySmsServiceApiV1SmsPathPatch6Error,
  Options<ProxySmsServiceApiV1SmsPathPatch6Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxySmsServiceApiV1SmsPathPatch6Error,
    Options<ProxySmsServiceApiV1SmsPathPatch6Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxySmsServiceApiV1SmsPathPatch6({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathPatchMutation = (
  options?: Partial<Options<ProxyLlmServiceApiV1LlmPathPatchData>>
): UseMutationOptions<
  unknown,
  ProxyLlmServiceApiV1LlmPathPatchError,
  Options<ProxyLlmServiceApiV1LlmPathPatchData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyLlmServiceApiV1LlmPathPatchError,
    Options<ProxyLlmServiceApiV1LlmPathPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyLlmServiceApiV1LlmPathPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyLlmServiceApiV1LlmPathPatch2QueryKey = (
  options: Options<ProxyLlmServiceApiV1LlmPathPatch2Data>
) => createQueryKey("proxyLlmServiceApiV1LlmPathPatch2", options);

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathPatch2Options = (
  options: Options<ProxyLlmServiceApiV1LlmPathPatch2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyLlmServiceApiV1LlmPathPatch2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyLlmServiceApiV1LlmPathPatch2QueryKey(options),
  });
};

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathPatch4Mutation = (
  options?: Partial<Options<ProxyLlmServiceApiV1LlmPathPatch4Data>>
): UseMutationOptions<
  unknown,
  ProxyLlmServiceApiV1LlmPathPatch4Error,
  Options<ProxyLlmServiceApiV1LlmPathPatch4Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyLlmServiceApiV1LlmPathPatch4Error,
    Options<ProxyLlmServiceApiV1LlmPathPatch4Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyLlmServiceApiV1LlmPathPatch4({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyLlmServiceApiV1LlmPathPatch5QueryKey = (
  options: Options<ProxyLlmServiceApiV1LlmPathPatch5Data>
) => createQueryKey("proxyLlmServiceApiV1LlmPathPatch5", options);

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathPatch5Options = (
  options: Options<ProxyLlmServiceApiV1LlmPathPatch5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyLlmServiceApiV1LlmPathPatch5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyLlmServiceApiV1LlmPathPatch5QueryKey(options),
  });
};

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathPatch5Mutation = (
  options?: Partial<Options<ProxyLlmServiceApiV1LlmPathPatch5Data>>
): UseMutationOptions<
  unknown,
  ProxyLlmServiceApiV1LlmPathPatch5Error,
  Options<ProxyLlmServiceApiV1LlmPathPatch5Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyLlmServiceApiV1LlmPathPatch5Error,
    Options<ProxyLlmServiceApiV1LlmPathPatch5Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyLlmServiceApiV1LlmPathPatch5({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathPatch6Mutation = (
  options?: Partial<Options<ProxyLlmServiceApiV1LlmPathPatch6Data>>
): UseMutationOptions<
  unknown,
  ProxyLlmServiceApiV1LlmPathPatch6Error,
  Options<ProxyLlmServiceApiV1LlmPathPatch6Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyLlmServiceApiV1LlmPathPatch6Error,
    Options<ProxyLlmServiceApiV1LlmPathPatch6Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyLlmServiceApiV1LlmPathPatch6({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Config Service
 * Proxy requests to config service.
 */
export const proxyConfigServiceApiV1ConfigsPathPatchMutation = (
  options?: Partial<Options<ProxyConfigServiceApiV1ConfigsPathPatchData>>
): UseMutationOptions<
  unknown,
  ProxyConfigServiceApiV1ConfigsPathPatchError,
  Options<ProxyConfigServiceApiV1ConfigsPathPatchData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyConfigServiceApiV1ConfigsPathPatchError,
    Options<ProxyConfigServiceApiV1ConfigsPathPatchData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyConfigServiceApiV1ConfigsPathPatch({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyConfigServiceApiV1ConfigsPathPatch2QueryKey = (
  options: Options<ProxyConfigServiceApiV1ConfigsPathPatch2Data>
) => createQueryKey("proxyConfigServiceApiV1ConfigsPathPatch2", options);

/**
 * Proxy Config Service
 * Proxy requests to config service.
 */
export const proxyConfigServiceApiV1ConfigsPathPatch2Options = (
  options: Options<ProxyConfigServiceApiV1ConfigsPathPatch2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyConfigServiceApiV1ConfigsPathPatch2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyConfigServiceApiV1ConfigsPathPatch2QueryKey(options),
  });
};

/**
 * Proxy Config Service
 * Proxy requests to config service.
 */
export const proxyConfigServiceApiV1ConfigsPathPatch4Mutation = (
  options?: Partial<Options<ProxyConfigServiceApiV1ConfigsPathPatch4Data>>
): UseMutationOptions<
  unknown,
  ProxyConfigServiceApiV1ConfigsPathPatch4Error,
  Options<ProxyConfigServiceApiV1ConfigsPathPatch4Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyConfigServiceApiV1ConfigsPathPatch4Error,
    Options<ProxyConfigServiceApiV1ConfigsPathPatch4Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyConfigServiceApiV1ConfigsPathPatch4({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyConfigServiceApiV1ConfigsPathPatch5QueryKey = (
  options: Options<ProxyConfigServiceApiV1ConfigsPathPatch5Data>
) => createQueryKey("proxyConfigServiceApiV1ConfigsPathPatch5", options);

/**
 * Proxy Config Service
 * Proxy requests to config service.
 */
export const proxyConfigServiceApiV1ConfigsPathPatch5Options = (
  options: Options<ProxyConfigServiceApiV1ConfigsPathPatch5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyConfigServiceApiV1ConfigsPathPatch5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyConfigServiceApiV1ConfigsPathPatch5QueryKey(options),
  });
};

/**
 * Proxy Config Service
 * Proxy requests to config service.
 */
export const proxyConfigServiceApiV1ConfigsPathPatch5Mutation = (
  options?: Partial<Options<ProxyConfigServiceApiV1ConfigsPathPatch5Data>>
): UseMutationOptions<
  unknown,
  ProxyConfigServiceApiV1ConfigsPathPatch5Error,
  Options<ProxyConfigServiceApiV1ConfigsPathPatch5Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyConfigServiceApiV1ConfigsPathPatch5Error,
    Options<ProxyConfigServiceApiV1ConfigsPathPatch5Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyConfigServiceApiV1ConfigsPathPatch5({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Config Service
 * Proxy requests to config service.
 */
export const proxyConfigServiceApiV1ConfigsPathPatch6Mutation = (
  options?: Partial<Options<ProxyConfigServiceApiV1ConfigsPathPatch6Data>>
): UseMutationOptions<
  unknown,
  ProxyConfigServiceApiV1ConfigsPathPatch6Error,
  Options<ProxyConfigServiceApiV1ConfigsPathPatch6Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyConfigServiceApiV1ConfigsPathPatch6Error,
    Options<ProxyConfigServiceApiV1ConfigsPathPatch6Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyConfigServiceApiV1ConfigsPathPatch6({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getServicesHealthApiV1ServicesHealthGetQueryKey = (
  options?: Options<GetServicesHealthApiV1ServicesHealthGetData>
) => createQueryKey("getServicesHealthApiV1ServicesHealthGet", options);

/**
 * Get Services Health
 * Get health status of all backend services.
 */
export const getServicesHealthApiV1ServicesHealthGetOptions = (
  options?: Options<GetServicesHealthApiV1ServicesHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServicesHealthApiV1ServicesHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServicesHealthApiV1ServicesHealthGetQueryKey(options),
  });
};

export const getServicesStatusApiV1ServicesStatusGetQueryKey = (
  options?: Options<GetServicesStatusApiV1ServicesStatusGetData>
) => createQueryKey("getServicesStatusApiV1ServicesStatusGet", options);

/**
 * Get Services Status
 * Get detailed status of all services.
 */
export const getServicesStatusApiV1ServicesStatusGetOptions = (
  options?: Options<GetServicesStatusApiV1ServicesStatusGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServicesStatusApiV1ServicesStatusGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServicesStatusApiV1ServicesStatusGetQueryKey(options),
  });
};

export const getServiceHealthApiV1ServicesServiceNameHealthGetQueryKey = (
  options: Options<GetServiceHealthApiV1ServicesServiceNameHealthGetData>
) =>
  createQueryKey("getServiceHealthApiV1ServicesServiceNameHealthGet", options);

/**
 * Get Service Health
 * Get health status of a specific service.
 */
export const getServiceHealthApiV1ServicesServiceNameHealthGetOptions = (
  options: Options<GetServiceHealthApiV1ServicesServiceNameHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServiceHealthApiV1ServicesServiceNameHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey:
      getServiceHealthApiV1ServicesServiceNameHealthGetQueryKey(options),
  });
};

export const getServiceMetricsApiV1ServicesServiceNameMetricsGetQueryKey = (
  options: Options<GetServiceMetricsApiV1ServicesServiceNameMetricsGetData>
) =>
  createQueryKey(
    "getServiceMetricsApiV1ServicesServiceNameMetricsGet",
    options
  );

/**
 * Get Service Metrics
 * Get metrics for a specific service.
 */
export const getServiceMetricsApiV1ServicesServiceNameMetricsGetOptions = (
  options: Options<GetServiceMetricsApiV1ServicesServiceNameMetricsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await getServiceMetricsApiV1ServicesServiceNameMetricsGet({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      getServiceMetricsApiV1ServicesServiceNameMetricsGetQueryKey(options),
  });
};
