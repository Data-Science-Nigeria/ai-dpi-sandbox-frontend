// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  apiGetHealthHealthCheck,
  apiGetMetricsMetrics,
  apiGetRootRoot,
  healthGetApiV1HealthCheckHealthCheck,
  healthGetApiV1HealthServicesGetServicesHealth,
  monitoringGetApiV1MonitoringMetricsGetMetrics,
  monitoringGetApiV1MonitoringAlertsGetAlerts,
  loggingPostApiV1LoggingLogCreateLog,
  loggingGetApiV1LoggingLogsGetLogs,
  rateLimitPostApiV1RateLimiterLimitCheckRateLimit,
  rateLimitGetApiV1RateLimiterStatusGetRateLimitStatus,
  apiPostApiV1VerifyVerifyBvn,
  apiGetApiV1StatusBvnGetBvnStatus,
  apiPostApiV1LookupLookupBvnBasic,
  apiPostApiV1MatchMatchBvn,
  apiGetApiV1BanksGetSupportedBanks,
  ivrPostApiV1IvrCallInitiateCall,
  ivrGetApiV1IvrMenuGetMenu,
  apiPostApiV1VerifyVerifyNin,
  apiGetApiV1StatusNinGetNinStatus,
  apiPostApiV1LookupLookupNinBasic,
  twoWaySmsPostApiV1TwoWaySmsSendSendSms,
  twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSms,
  healthGetApiV1ServicesHealthGetServicesHealth,
  healthGetApiV1DpiHealthGetDpiHealth,
  healthGetApiV1ServicesServiceNameHealthGetServiceHealth,
  healthGetApiV1ServicesServiceNameMetricsGetServiceMetrics,
  examplesGetApiV1ExamplesNinNinExamples,
  examplesGetApiV1ExamplesSmsSmsExamples,
  examplesGetApiV1ExamplesAuthAuthExamples,
  examplesGetApiV1ExamplesIntegrationIntegrationExamples,
  authenticationPostApiV1AuthLoginLoginUser,
  authenticationPostApiV1AuthLoginJsonLoginUserJson,
  authenticationGetApiV1AuthMeReadUserMe,
  authenticationPostApiV1AuthLogoutLogoutUser,
  authPostApiV1AuthTokenOauthToken,
  adminGetApiV1AdminUsersListUsers,
  adminPostApiV1AdminUsersCreateUser,
  adminDeleteApiV1AdminUsersUserIdDeleteUser,
  adminGetApiV1AdminUsersUserIdGetUser,
  adminPutApiV1AdminUsersUserIdUpdateUser,
  adminPostApiV1AdminUsersUserIdActivateActivateUser,
  adminPostApiV1AdminUsersUserIdDeactivateDeactivateUser,
  adminPostApiV1AdminUsersUserIdResetPasswordResetUserPassword,
  oauth2PostApiV1Oauth2ClientsCreateOauthClient,
  oauth2GetApiV1Oauth2ClientsClientIdGetOauthClient,
  oauth2GetApiV1Oauth2AuthorizeAuthorize,
  smsPostApiV1SmsSendSendSms,
  smsPostApiV1SmsBulkSendBulkSms,
  smsPostApiV1SmsOtpGenerateGenerateOtp,
  smsPostApiV1SmsOtpVerifyVerifyOtp,
  smsGetApiV1SmsStatusMessageIdGetMessageStatus,
  smsGetApiV1SmsBalanceGetSmsBalance,
  smsGetApiV1SmsTemplatesGetMessageTemplates,
  aiPostApiV1AiChatChatCompletion,
  aiPostApiV1AiGenerateGenerateContent,
  aiPostApiV1AiAnalyzeAnalyzeText,
  aiPostApiV1AiTranslateTranslateText,
  aiGetApiV1AiModelsGetAvailableModels,
  aiGetApiV1AiConversationsConversationIdGetConversation,
  aiGetApiV1AiUsageGetUsageStatistics,
  apiGetMetricsMetrics2,
  apiGetHealthHealthCheck2,
  apiGetRootRoot2,
  apiGetWellKnownOpenidConfigurationOpenidConfiguration,
  apiGetWellKnownJwksJsonJwks,
  oauth2PostApiV1Oauth2TokenGetToken,
  apiGetHealthHealthCheck3,
  apiGetRootRoot3,
  apiGetMetricsMetrics3,
  apiGetHealthHealthCheck4,
  apiGetMetricsMetrics4,
  apiGetHealthHealthCheck5,
  apiGetMetricsMetrics5,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  ApiGetHealthHealthCheckData,
  ApiGetMetricsMetricsData,
  ApiGetRootRootData,
  HealthGetApiV1HealthCheckHealthCheckData,
  HealthGetApiV1HealthServicesGetServicesHealthData,
  MonitoringGetApiV1MonitoringMetricsGetMetricsData,
  MonitoringGetApiV1MonitoringAlertsGetAlertsData,
  LoggingPostApiV1LoggingLogCreateLogData,
  LoggingGetApiV1LoggingLogsGetLogsData,
  RateLimitPostApiV1RateLimiterLimitCheckRateLimitData,
  RateLimitGetApiV1RateLimiterStatusGetRateLimitStatusData,
  ApiPostApiV1VerifyVerifyBvnData,
  ApiPostApiV1VerifyVerifyBvnError,
  ApiPostApiV1VerifyVerifyBvnResponse,
  ApiGetApiV1StatusBvnGetBvnStatusData,
  ApiPostApiV1LookupLookupBvnBasicData,
  ApiPostApiV1LookupLookupBvnBasicError,
  ApiPostApiV1LookupLookupBvnBasicResponse,
  ApiPostApiV1MatchMatchBvnData,
  ApiPostApiV1MatchMatchBvnError,
  ApiPostApiV1MatchMatchBvnResponse,
  ApiGetApiV1BanksGetSupportedBanksData,
  IvrPostApiV1IvrCallInitiateCallData,
  IvrGetApiV1IvrMenuGetMenuData,
  ApiPostApiV1VerifyVerifyNinData,
  ApiPostApiV1VerifyVerifyNinError,
  ApiPostApiV1VerifyVerifyNinResponse,
  ApiGetApiV1StatusNinGetNinStatusData,
  ApiPostApiV1LookupLookupNinBasicData,
  ApiPostApiV1LookupLookupNinBasicError,
  ApiPostApiV1LookupLookupNinBasicResponse,
  TwoWaySmsPostApiV1TwoWaySmsSendSendSmsData,
  TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsData,
  HealthGetApiV1ServicesHealthGetServicesHealthData,
  HealthGetApiV1DpiHealthGetDpiHealthData,
  HealthGetApiV1ServicesServiceNameHealthGetServiceHealthData,
  HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsData,
  ExamplesGetApiV1ExamplesNinNinExamplesData,
  ExamplesGetApiV1ExamplesSmsSmsExamplesData,
  ExamplesGetApiV1ExamplesAuthAuthExamplesData,
  ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesData,
  AuthenticationPostApiV1AuthLoginLoginUserData,
  AuthenticationPostApiV1AuthLoginLoginUserError,
  AuthenticationPostApiV1AuthLoginLoginUserResponse,
  AuthenticationPostApiV1AuthLoginJsonLoginUserJsonData,
  AuthenticationPostApiV1AuthLoginJsonLoginUserJsonError,
  AuthenticationPostApiV1AuthLoginJsonLoginUserJsonResponse,
  AuthenticationGetApiV1AuthMeReadUserMeData,
  AuthenticationPostApiV1AuthLogoutLogoutUserData,
  AuthPostApiV1AuthTokenOauthTokenData,
  AuthPostApiV1AuthTokenOauthTokenError,
  AdminGetApiV1AdminUsersListUsersData,
  AdminPostApiV1AdminUsersCreateUserData,
  AdminPostApiV1AdminUsersCreateUserError,
  AdminPostApiV1AdminUsersCreateUserResponse,
  AdminDeleteApiV1AdminUsersUserIdDeleteUserData,
  AdminDeleteApiV1AdminUsersUserIdDeleteUserError,
  AdminGetApiV1AdminUsersUserIdGetUserData,
  AdminPutApiV1AdminUsersUserIdUpdateUserData,
  AdminPutApiV1AdminUsersUserIdUpdateUserError,
  AdminPutApiV1AdminUsersUserIdUpdateUserResponse,
  AdminPostApiV1AdminUsersUserIdActivateActivateUserData,
  AdminPostApiV1AdminUsersUserIdActivateActivateUserError,
  AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserData,
  AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserError,
  AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordData,
  AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordError,
  Oauth2PostApiV1Oauth2ClientsCreateOauthClientData,
  Oauth2PostApiV1Oauth2ClientsCreateOauthClientError,
  Oauth2PostApiV1Oauth2ClientsCreateOauthClientResponse,
  Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientData,
  Oauth2GetApiV1Oauth2AuthorizeAuthorizeData,
  SmsPostApiV1SmsSendSendSmsData,
  SmsPostApiV1SmsSendSendSmsError,
  SmsPostApiV1SmsBulkSendBulkSmsData,
  SmsPostApiV1SmsBulkSendBulkSmsError,
  SmsPostApiV1SmsOtpGenerateGenerateOtpData,
  SmsPostApiV1SmsOtpGenerateGenerateOtpError,
  SmsPostApiV1SmsOtpVerifyVerifyOtpData,
  SmsPostApiV1SmsOtpVerifyVerifyOtpError,
  SmsGetApiV1SmsStatusMessageIdGetMessageStatusData,
  SmsGetApiV1SmsBalanceGetSmsBalanceData,
  SmsGetApiV1SmsTemplatesGetMessageTemplatesData,
  AiPostApiV1AiChatChatCompletionData,
  AiPostApiV1AiChatChatCompletionError,
  AiPostApiV1AiGenerateGenerateContentData,
  AiPostApiV1AiGenerateGenerateContentError,
  AiPostApiV1AiAnalyzeAnalyzeTextData,
  AiPostApiV1AiAnalyzeAnalyzeTextError,
  AiPostApiV1AiTranslateTranslateTextData,
  AiPostApiV1AiTranslateTranslateTextError,
  AiGetApiV1AiModelsGetAvailableModelsData,
  AiGetApiV1AiConversationsConversationIdGetConversationData,
  AiGetApiV1AiUsageGetUsageStatisticsData,
  ApiGetMetricsMetrics2Data,
  ApiGetHealthHealthCheck2Data,
  ApiGetRootRoot2Data,
  ApiGetWellKnownOpenidConfigurationOpenidConfigurationData,
  ApiGetWellKnownJwksJsonJwksData,
  Oauth2PostApiV1Oauth2TokenGetTokenData,
  Oauth2PostApiV1Oauth2TokenGetTokenError,
  Oauth2PostApiV1Oauth2TokenGetTokenResponse,
  ApiGetHealthHealthCheck3Data,
  ApiGetRootRoot3Data,
  ApiGetMetricsMetrics3Data,
  ApiGetHealthHealthCheck4Data,
  ApiGetMetricsMetrics4Data,
  ApiGetHealthHealthCheck5Data,
  ApiGetMetricsMetrics5Data,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: readonly string[];
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: readonly string[]
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const apiGetHealthHealthCheckQueryKey = (
  options?: Options<ApiGetHealthHealthCheckData>
) => createQueryKey("apiGetHealthHealthCheck", options);

/**
 * Health Check
 * Health check endpoint.
 */
export const apiGetHealthHealthCheckOptions = (
  options?: Options<ApiGetHealthHealthCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetHealthHealthCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetHealthHealthCheckQueryKey(options),
  });
};

export const apiGetMetricsMetricsQueryKey = (
  options?: Options<ApiGetMetricsMetricsData>
) => createQueryKey("apiGetMetricsMetrics", options);

/**
 * Metrics
 * Prometheus metrics endpoint.
 */
export const apiGetMetricsMetricsOptions = (
  options?: Options<ApiGetMetricsMetricsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetMetricsMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetMetricsMetricsQueryKey(options),
  });
};

export const apiGetRootRootQueryKey = (options?: Options<ApiGetRootRootData>) =>
  createQueryKey("apiGetRootRoot", options);

/**
 * Root
 * Root endpoint.
 */
export const apiGetRootRootOptions = (
  options?: Options<ApiGetRootRootData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetRootRoot({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetRootRootQueryKey(options),
  });
};

export const healthGetApiV1HealthCheckHealthCheckQueryKey = (
  options?: Options<HealthGetApiV1HealthCheckHealthCheckData>
) => createQueryKey("healthGetApiV1HealthCheckHealthCheck", options);

/**
 * Health Check
 */
export const healthGetApiV1HealthCheckHealthCheckOptions = (
  options?: Options<HealthGetApiV1HealthCheckHealthCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthGetApiV1HealthCheckHealthCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthGetApiV1HealthCheckHealthCheckQueryKey(options),
  });
};

export const healthGetApiV1HealthServicesGetServicesHealthQueryKey = (
  options?: Options<HealthGetApiV1HealthServicesGetServicesHealthData>
) => createQueryKey("healthGetApiV1HealthServicesGetServicesHealth", options);

/**
 * Get Services Health
 */
export const healthGetApiV1HealthServicesGetServicesHealthOptions = (
  options?: Options<HealthGetApiV1HealthServicesGetServicesHealthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthGetApiV1HealthServicesGetServicesHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthGetApiV1HealthServicesGetServicesHealthQueryKey(options),
  });
};

export const monitoringGetApiV1MonitoringMetricsGetMetricsQueryKey = (
  options?: Options<MonitoringGetApiV1MonitoringMetricsGetMetricsData>
) => createQueryKey("monitoringGetApiV1MonitoringMetricsGetMetrics", options);

/**
 * Get Metrics
 */
export const monitoringGetApiV1MonitoringMetricsGetMetricsOptions = (
  options?: Options<MonitoringGetApiV1MonitoringMetricsGetMetricsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await monitoringGetApiV1MonitoringMetricsGetMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: monitoringGetApiV1MonitoringMetricsGetMetricsQueryKey(options),
  });
};

export const monitoringGetApiV1MonitoringAlertsGetAlertsQueryKey = (
  options?: Options<MonitoringGetApiV1MonitoringAlertsGetAlertsData>
) => createQueryKey("monitoringGetApiV1MonitoringAlertsGetAlerts", options);

/**
 * Get Alerts
 */
export const monitoringGetApiV1MonitoringAlertsGetAlertsOptions = (
  options?: Options<MonitoringGetApiV1MonitoringAlertsGetAlertsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await monitoringGetApiV1MonitoringAlertsGetAlerts({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: monitoringGetApiV1MonitoringAlertsGetAlertsQueryKey(options),
  });
};

export const loggingPostApiV1LoggingLogCreateLogQueryKey = (
  options?: Options<LoggingPostApiV1LoggingLogCreateLogData>
) => createQueryKey("loggingPostApiV1LoggingLogCreateLog", options);

/**
 * Create Log
 */
export const loggingPostApiV1LoggingLogCreateLogOptions = (
  options?: Options<LoggingPostApiV1LoggingLogCreateLogData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loggingPostApiV1LoggingLogCreateLog({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loggingPostApiV1LoggingLogCreateLogQueryKey(options),
  });
};

/**
 * Create Log
 */
export const loggingPostApiV1LoggingLogCreateLogMutation = (
  options?: Partial<Options<LoggingPostApiV1LoggingLogCreateLogData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<LoggingPostApiV1LoggingLogCreateLogData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<LoggingPostApiV1LoggingLogCreateLogData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loggingPostApiV1LoggingLogCreateLog({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loggingGetApiV1LoggingLogsGetLogsQueryKey = (
  options?: Options<LoggingGetApiV1LoggingLogsGetLogsData>
) => createQueryKey("loggingGetApiV1LoggingLogsGetLogs", options);

/**
 * Get Logs
 */
export const loggingGetApiV1LoggingLogsGetLogsOptions = (
  options?: Options<LoggingGetApiV1LoggingLogsGetLogsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loggingGetApiV1LoggingLogsGetLogs({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loggingGetApiV1LoggingLogsGetLogsQueryKey(options),
  });
};

export const rateLimitPostApiV1RateLimiterLimitCheckRateLimitQueryKey = (
  options?: Options<RateLimitPostApiV1RateLimiterLimitCheckRateLimitData>
) =>
  createQueryKey("rateLimitPostApiV1RateLimiterLimitCheckRateLimit", options);

/**
 * Check Rate Limit
 */
export const rateLimitPostApiV1RateLimiterLimitCheckRateLimitOptions = (
  options?: Options<RateLimitPostApiV1RateLimiterLimitCheckRateLimitData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rateLimitPostApiV1RateLimiterLimitCheckRateLimit({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rateLimitPostApiV1RateLimiterLimitCheckRateLimitQueryKey(options),
  });
};

/**
 * Check Rate Limit
 */
export const rateLimitPostApiV1RateLimiterLimitCheckRateLimitMutation = (
  options?: Partial<
    Options<RateLimitPostApiV1RateLimiterLimitCheckRateLimitData>
  >
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<RateLimitPostApiV1RateLimiterLimitCheckRateLimitData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<RateLimitPostApiV1RateLimiterLimitCheckRateLimitData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await rateLimitPostApiV1RateLimiterLimitCheckRateLimit({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const rateLimitGetApiV1RateLimiterStatusGetRateLimitStatusQueryKey = (
  options?: Options<RateLimitGetApiV1RateLimiterStatusGetRateLimitStatusData>
) =>
  createQueryKey(
    "rateLimitGetApiV1RateLimiterStatusGetRateLimitStatus",
    options
  );

/**
 * Get Rate Limit Status
 */
export const rateLimitGetApiV1RateLimiterStatusGetRateLimitStatusOptions = (
  options?: Options<RateLimitGetApiV1RateLimiterStatusGetRateLimitStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await rateLimitGetApiV1RateLimiterStatusGetRateLimitStatus({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      rateLimitGetApiV1RateLimiterStatusGetRateLimitStatusQueryKey(options),
  });
};

export const apiPostApiV1VerifyVerifyBvnQueryKey = (
  options: Options<ApiPostApiV1VerifyVerifyBvnData>
) => createQueryKey("apiPostApiV1VerifyVerifyBvn", options);

/**
 * Verify Bvn
 * Verify BVN using Dojah API.
 */
export const apiPostApiV1VerifyVerifyBvnOptions = (
  options: Options<ApiPostApiV1VerifyVerifyBvnData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiPostApiV1VerifyVerifyBvn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiPostApiV1VerifyVerifyBvnQueryKey(options),
  });
};

/**
 * Verify Bvn
 * Verify BVN using Dojah API.
 */
export const apiPostApiV1VerifyVerifyBvnMutation = (
  options?: Partial<Options<ApiPostApiV1VerifyVerifyBvnData>>
): UseMutationOptions<
  ApiPostApiV1VerifyVerifyBvnResponse,
  ApiPostApiV1VerifyVerifyBvnError,
  Options<ApiPostApiV1VerifyVerifyBvnData>
> => {
  const mutationOptions: UseMutationOptions<
    ApiPostApiV1VerifyVerifyBvnResponse,
    ApiPostApiV1VerifyVerifyBvnError,
    Options<ApiPostApiV1VerifyVerifyBvnData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiPostApiV1VerifyVerifyBvn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiGetApiV1StatusBvnGetBvnStatusQueryKey = (
  options: Options<ApiGetApiV1StatusBvnGetBvnStatusData>
) => createQueryKey("apiGetApiV1StatusBvnGetBvnStatus", options);

/**
 * Get Bvn Status
 * Get BVN verification status.
 */
export const apiGetApiV1StatusBvnGetBvnStatusOptions = (
  options: Options<ApiGetApiV1StatusBvnGetBvnStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetApiV1StatusBvnGetBvnStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetApiV1StatusBvnGetBvnStatusQueryKey(options),
  });
};

export const apiPostApiV1LookupLookupBvnBasicQueryKey = (
  options: Options<ApiPostApiV1LookupLookupBvnBasicData>
) => createQueryKey("apiPostApiV1LookupLookupBvnBasic", options);

/**
 * Lookup Bvn Basic
 * Basic BVN lookup without full verification.
 */
export const apiPostApiV1LookupLookupBvnBasicOptions = (
  options: Options<ApiPostApiV1LookupLookupBvnBasicData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiPostApiV1LookupLookupBvnBasic({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiPostApiV1LookupLookupBvnBasicQueryKey(options),
  });
};

/**
 * Lookup Bvn Basic
 * Basic BVN lookup without full verification.
 */
export const apiPostApiV1LookupLookupBvnBasicMutation = (
  options?: Partial<Options<ApiPostApiV1LookupLookupBvnBasicData>>
): UseMutationOptions<
  ApiPostApiV1LookupLookupBvnBasicResponse,
  ApiPostApiV1LookupLookupBvnBasicError,
  Options<ApiPostApiV1LookupLookupBvnBasicData>
> => {
  const mutationOptions: UseMutationOptions<
    ApiPostApiV1LookupLookupBvnBasicResponse,
    ApiPostApiV1LookupLookupBvnBasicError,
    Options<ApiPostApiV1LookupLookupBvnBasicData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiPostApiV1LookupLookupBvnBasic({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiPostApiV1MatchMatchBvnQueryKey = (
  options: Options<ApiPostApiV1MatchMatchBvnData>
) => createQueryKey("apiPostApiV1MatchMatchBvn", options);

/**
 * Match Bvn
 * Match BVN against provided identity attributes (placeholder).
 */
export const apiPostApiV1MatchMatchBvnOptions = (
  options: Options<ApiPostApiV1MatchMatchBvnData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiPostApiV1MatchMatchBvn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiPostApiV1MatchMatchBvnQueryKey(options),
  });
};

/**
 * Match Bvn
 * Match BVN against provided identity attributes (placeholder).
 */
export const apiPostApiV1MatchMatchBvnMutation = (
  options?: Partial<Options<ApiPostApiV1MatchMatchBvnData>>
): UseMutationOptions<
  ApiPostApiV1MatchMatchBvnResponse,
  ApiPostApiV1MatchMatchBvnError,
  Options<ApiPostApiV1MatchMatchBvnData>
> => {
  const mutationOptions: UseMutationOptions<
    ApiPostApiV1MatchMatchBvnResponse,
    ApiPostApiV1MatchMatchBvnError,
    Options<ApiPostApiV1MatchMatchBvnData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiPostApiV1MatchMatchBvn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiGetApiV1BanksGetSupportedBanksQueryKey = (
  options?: Options<ApiGetApiV1BanksGetSupportedBanksData>
) => createQueryKey("apiGetApiV1BanksGetSupportedBanks", options);

/**
 * Get Supported Banks
 * Return supported Nigerian banks (placeholder list).
 */
export const apiGetApiV1BanksGetSupportedBanksOptions = (
  options?: Options<ApiGetApiV1BanksGetSupportedBanksData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetApiV1BanksGetSupportedBanks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetApiV1BanksGetSupportedBanksQueryKey(options),
  });
};

export const ivrPostApiV1IvrCallInitiateCallQueryKey = (
  options?: Options<IvrPostApiV1IvrCallInitiateCallData>
) => createQueryKey("ivrPostApiV1IvrCallInitiateCall", options);

/**
 * Initiate Call
 */
export const ivrPostApiV1IvrCallInitiateCallOptions = (
  options?: Options<IvrPostApiV1IvrCallInitiateCallData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ivrPostApiV1IvrCallInitiateCall({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: ivrPostApiV1IvrCallInitiateCallQueryKey(options),
  });
};

/**
 * Initiate Call
 */
export const ivrPostApiV1IvrCallInitiateCallMutation = (
  options?: Partial<Options<IvrPostApiV1IvrCallInitiateCallData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<IvrPostApiV1IvrCallInitiateCallData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<IvrPostApiV1IvrCallInitiateCallData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ivrPostApiV1IvrCallInitiateCall({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const ivrGetApiV1IvrMenuGetMenuQueryKey = (
  options?: Options<IvrGetApiV1IvrMenuGetMenuData>
) => createQueryKey("ivrGetApiV1IvrMenuGetMenu", options);

/**
 * Get Menu
 */
export const ivrGetApiV1IvrMenuGetMenuOptions = (
  options?: Options<IvrGetApiV1IvrMenuGetMenuData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ivrGetApiV1IvrMenuGetMenu({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: ivrGetApiV1IvrMenuGetMenuQueryKey(options),
  });
};

export const apiPostApiV1VerifyVerifyNinQueryKey = (
  options: Options<ApiPostApiV1VerifyVerifyNinData>
) => createQueryKey("apiPostApiV1VerifyVerifyNin", options);

/**
 * Verify Nin
 * Verify NIN using Dojah API.
 */
export const apiPostApiV1VerifyVerifyNinOptions = (
  options: Options<ApiPostApiV1VerifyVerifyNinData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiPostApiV1VerifyVerifyNin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiPostApiV1VerifyVerifyNinQueryKey(options),
  });
};

/**
 * Verify Nin
 * Verify NIN using Dojah API.
 */
export const apiPostApiV1VerifyVerifyNinMutation = (
  options?: Partial<Options<ApiPostApiV1VerifyVerifyNinData>>
): UseMutationOptions<
  ApiPostApiV1VerifyVerifyNinResponse,
  ApiPostApiV1VerifyVerifyNinError,
  Options<ApiPostApiV1VerifyVerifyNinData>
> => {
  const mutationOptions: UseMutationOptions<
    ApiPostApiV1VerifyVerifyNinResponse,
    ApiPostApiV1VerifyVerifyNinError,
    Options<ApiPostApiV1VerifyVerifyNinData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiPostApiV1VerifyVerifyNin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiGetApiV1StatusNinGetNinStatusQueryKey = (
  options: Options<ApiGetApiV1StatusNinGetNinStatusData>
) => createQueryKey("apiGetApiV1StatusNinGetNinStatus", options);

/**
 * Get Nin Status
 * Get NIN verification status.
 */
export const apiGetApiV1StatusNinGetNinStatusOptions = (
  options: Options<ApiGetApiV1StatusNinGetNinStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetApiV1StatusNinGetNinStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetApiV1StatusNinGetNinStatusQueryKey(options),
  });
};

export const apiPostApiV1LookupLookupNinBasicQueryKey = (
  options: Options<ApiPostApiV1LookupLookupNinBasicData>
) => createQueryKey("apiPostApiV1LookupLookupNinBasic", options);

/**
 * Lookup Nin Basic
 * Basic NIN lookup without full verification.
 */
export const apiPostApiV1LookupLookupNinBasicOptions = (
  options: Options<ApiPostApiV1LookupLookupNinBasicData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiPostApiV1LookupLookupNinBasic({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiPostApiV1LookupLookupNinBasicQueryKey(options),
  });
};

/**
 * Lookup Nin Basic
 * Basic NIN lookup without full verification.
 */
export const apiPostApiV1LookupLookupNinBasicMutation = (
  options?: Partial<Options<ApiPostApiV1LookupLookupNinBasicData>>
): UseMutationOptions<
  ApiPostApiV1LookupLookupNinBasicResponse,
  ApiPostApiV1LookupLookupNinBasicError,
  Options<ApiPostApiV1LookupLookupNinBasicData>
> => {
  const mutationOptions: UseMutationOptions<
    ApiPostApiV1LookupLookupNinBasicResponse,
    ApiPostApiV1LookupLookupNinBasicError,
    Options<ApiPostApiV1LookupLookupNinBasicData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await apiPostApiV1LookupLookupNinBasic({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const twoWaySmsPostApiV1TwoWaySmsSendSendSmsQueryKey = (
  options?: Options<TwoWaySmsPostApiV1TwoWaySmsSendSendSmsData>
) => createQueryKey("twoWaySmsPostApiV1TwoWaySmsSendSendSms", options);

/**
 * Send Sms
 */
export const twoWaySmsPostApiV1TwoWaySmsSendSendSmsOptions = (
  options?: Options<TwoWaySmsPostApiV1TwoWaySmsSendSendSmsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await twoWaySmsPostApiV1TwoWaySmsSendSendSms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: twoWaySmsPostApiV1TwoWaySmsSendSendSmsQueryKey(options),
  });
};

/**
 * Send Sms
 */
export const twoWaySmsPostApiV1TwoWaySmsSendSendSmsMutation = (
  options?: Partial<Options<TwoWaySmsPostApiV1TwoWaySmsSendSendSmsData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<TwoWaySmsPostApiV1TwoWaySmsSendSendSmsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<TwoWaySmsPostApiV1TwoWaySmsSendSendSmsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await twoWaySmsPostApiV1TwoWaySmsSendSendSms({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsQueryKey = (
  options?: Options<TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsData>
) => createQueryKey("twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSms", options);

/**
 * Receive Sms
 */
export const twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsOptions = (
  options?: Options<TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsQueryKey(options),
  });
};

/**
 * Receive Sms
 */
export const twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsMutation = (
  options?: Partial<Options<TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<TwoWaySmsPostApiV1TwoWaySmsReceiveReceiveSmsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await twoWaySmsPostApiV1TwoWaySmsReceiveReceiveSms({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const healthGetApiV1ServicesHealthGetServicesHealthQueryKey = (
  options?: Options<HealthGetApiV1ServicesHealthGetServicesHealthData>
) => createQueryKey("healthGetApiV1ServicesHealthGetServicesHealth", options);

/**
 * Get Services Health
 * 💚 Platform Health Overview
 *
 * Comprehensive health check for all backend services.
 * Essential for monitoring Nigerian DPI platform status.
 */
export const healthGetApiV1ServicesHealthGetServicesHealthOptions = (
  options?: Options<HealthGetApiV1ServicesHealthGetServicesHealthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthGetApiV1ServicesHealthGetServicesHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthGetApiV1ServicesHealthGetServicesHealthQueryKey(options),
  });
};

export const healthGetApiV1DpiHealthGetDpiHealthQueryKey = (
  options?: Options<HealthGetApiV1DpiHealthGetDpiHealthData>
) => createQueryKey("healthGetApiV1DpiHealthGetDpiHealth", options);

/**
 * Get Dpi Health
 * 🇳🇬 Nigerian DPI Services Health
 *
 * Focused health check for core DPI services.
 * Tailored for Nigerian startup developers.
 */
export const healthGetApiV1DpiHealthGetDpiHealthOptions = (
  options?: Options<HealthGetApiV1DpiHealthGetDpiHealthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthGetApiV1DpiHealthGetDpiHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthGetApiV1DpiHealthGetDpiHealthQueryKey(options),
  });
};

export const healthGetApiV1ServicesServiceNameHealthGetServiceHealthQueryKey = (
  options: Options<HealthGetApiV1ServicesServiceNameHealthGetServiceHealthData>
) =>
  createQueryKey(
    "healthGetApiV1ServicesServiceNameHealthGetServiceHealth",
    options
  );

/**
 * Get Service Health
 * 🔍 Individual Service Health
 *
 * Detailed health check for a specific service.
 * Essential for troubleshooting and monitoring.
 */
export const healthGetApiV1ServicesServiceNameHealthGetServiceHealthOptions = (
  options: Options<HealthGetApiV1ServicesServiceNameHealthGetServiceHealthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await healthGetApiV1ServicesServiceNameHealthGetServiceHealth({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      healthGetApiV1ServicesServiceNameHealthGetServiceHealthQueryKey(options),
  });
};

export const healthGetApiV1ServicesServiceNameMetricsGetServiceMetricsQueryKey =
  (
    options: Options<HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsData>
  ) =>
    createQueryKey(
      "healthGetApiV1ServicesServiceNameMetricsGetServiceMetrics",
      options
    );

/**
 * Get Service Metrics
 * 📈 Service Performance Metrics
 *
 * Detailed performance and usage metrics for specific service.
 * Critical for capacity planning and optimization.
 */
export const healthGetApiV1ServicesServiceNameMetricsGetServiceMetricsOptions =
  (
    options: Options<HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await healthGetApiV1ServicesServiceNameMetricsGetServiceMetrics({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          });
        return data;
      },
      queryKey:
        healthGetApiV1ServicesServiceNameMetricsGetServiceMetricsQueryKey(
          options
        ),
    });
  };

export const examplesGetApiV1ExamplesNinNinExamplesQueryKey = (
  options?: Options<ExamplesGetApiV1ExamplesNinNinExamplesData>
) => createQueryKey("examplesGetApiV1ExamplesNinNinExamples", options);

/**
 * Nin Examples
 * 📋 NIN Verification Examples
 */
export const examplesGetApiV1ExamplesNinNinExamplesOptions = (
  options?: Options<ExamplesGetApiV1ExamplesNinNinExamplesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await examplesGetApiV1ExamplesNinNinExamples({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: examplesGetApiV1ExamplesNinNinExamplesQueryKey(options),
  });
};

export const examplesGetApiV1ExamplesSmsSmsExamplesQueryKey = (
  options?: Options<ExamplesGetApiV1ExamplesSmsSmsExamplesData>
) => createQueryKey("examplesGetApiV1ExamplesSmsSmsExamples", options);

/**
 * Sms Examples
 * 📱 Nigerian SMS Examples
 */
export const examplesGetApiV1ExamplesSmsSmsExamplesOptions = (
  options?: Options<ExamplesGetApiV1ExamplesSmsSmsExamplesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await examplesGetApiV1ExamplesSmsSmsExamples({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: examplesGetApiV1ExamplesSmsSmsExamplesQueryKey(options),
  });
};

export const examplesGetApiV1ExamplesAuthAuthExamplesQueryKey = (
  options?: Options<ExamplesGetApiV1ExamplesAuthAuthExamplesData>
) => createQueryKey("examplesGetApiV1ExamplesAuthAuthExamples", options);

/**
 * Auth Examples
 * 🔐 OAuth2 Bearer Token Examples
 */
export const examplesGetApiV1ExamplesAuthAuthExamplesOptions = (
  options?: Options<ExamplesGetApiV1ExamplesAuthAuthExamplesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await examplesGetApiV1ExamplesAuthAuthExamples({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: examplesGetApiV1ExamplesAuthAuthExamplesQueryKey(options),
  });
};

export const examplesGetApiV1ExamplesIntegrationIntegrationExamplesQueryKey = (
  options?: Options<ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesData>
) =>
  createQueryKey(
    "examplesGetApiV1ExamplesIntegrationIntegrationExamples",
    options
  );

/**
 * Integration Examples
 * 🚀 Complete DPI Integration Examples
 */
export const examplesGetApiV1ExamplesIntegrationIntegrationExamplesOptions = (
  options?: Options<ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await examplesGetApiV1ExamplesIntegrationIntegrationExamples({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      examplesGetApiV1ExamplesIntegrationIntegrationExamplesQueryKey(options),
  });
};

export const authenticationPostApiV1AuthLoginLoginUserQueryKey = (
  options: Options<AuthenticationPostApiV1AuthLoginLoginUserData>
) => createQueryKey("authenticationPostApiV1AuthLoginLoginUser", options);

/**
 * Login User
 * 🔐 OAuth2 Compatible Login
 *
 * Authenticate user with form data and return JWT tokens.
 * Compatible with OAuth2 password flow for API clients.
 *
 * **Request Format:**
 * - Content-Type: application/x-www-form-urlencoded
 * - username: Email or username
 * - password: User password
 *
 * **Response:**
 * - access_token: JWT token for API access
 * - refresh_token: Token for refreshing access
 * - token_type: "bearer"
 * - expires_in: Token expiration in seconds
 *
 * **Use Cases:**
 * - OAuth2 client applications
 * - API integrations requiring form-based auth
 * - Third-party service authentication
 */
export const authenticationPostApiV1AuthLoginLoginUserOptions = (
  options: Options<AuthenticationPostApiV1AuthLoginLoginUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationPostApiV1AuthLoginLoginUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationPostApiV1AuthLoginLoginUserQueryKey(options),
  });
};

/**
 * Login User
 * 🔐 OAuth2 Compatible Login
 *
 * Authenticate user with form data and return JWT tokens.
 * Compatible with OAuth2 password flow for API clients.
 *
 * **Request Format:**
 * - Content-Type: application/x-www-form-urlencoded
 * - username: Email or username
 * - password: User password
 *
 * **Response:**
 * - access_token: JWT token for API access
 * - refresh_token: Token for refreshing access
 * - token_type: "bearer"
 * - expires_in: Token expiration in seconds
 *
 * **Use Cases:**
 * - OAuth2 client applications
 * - API integrations requiring form-based auth
 * - Third-party service authentication
 */
export const authenticationPostApiV1AuthLoginLoginUserMutation = (
  options?: Partial<Options<AuthenticationPostApiV1AuthLoginLoginUserData>>
): UseMutationOptions<
  AuthenticationPostApiV1AuthLoginLoginUserResponse,
  AuthenticationPostApiV1AuthLoginLoginUserError,
  Options<AuthenticationPostApiV1AuthLoginLoginUserData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthenticationPostApiV1AuthLoginLoginUserResponse,
    AuthenticationPostApiV1AuthLoginLoginUserError,
    Options<AuthenticationPostApiV1AuthLoginLoginUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authenticationPostApiV1AuthLoginLoginUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authenticationPostApiV1AuthLoginJsonLoginUserJsonQueryKey = (
  options: Options<AuthenticationPostApiV1AuthLoginJsonLoginUserJsonData>
) =>
  createQueryKey("authenticationPostApiV1AuthLoginJsonLoginUserJson", options);

/**
 * Login User Json
 * 🚀 JSON Login for Nigerian Startups
 *
 * Primary login endpoint for Nigerian DPI developers.
 * Accepts JSON payload with email or username authentication.
 *
 * **Request Example:**
 * ```json
 * {
 * "identifier": "adebayo@fintech.ng",  // Email or username
 * "password": "SecurePass123"
 * }
 * ```
 *
 * **Features:**
 * - ✅ Email or username login
 * - ✅ JWT token generation
 * - ✅ Last login tracking
 * - ✅ Request correlation ID support
 *
 * **Nigerian Context:**
 * - Supports Nigerian email domains (.ng, .com.ng)
 * - Optimized for fintech and DPI applications
 * - Audit logging for regulatory compliance
 */
export const authenticationPostApiV1AuthLoginJsonLoginUserJsonOptions = (
  options: Options<AuthenticationPostApiV1AuthLoginJsonLoginUserJsonData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationPostApiV1AuthLoginJsonLoginUserJson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey:
      authenticationPostApiV1AuthLoginJsonLoginUserJsonQueryKey(options),
  });
};

/**
 * Login User Json
 * 🚀 JSON Login for Nigerian Startups
 *
 * Primary login endpoint for Nigerian DPI developers.
 * Accepts JSON payload with email or username authentication.
 *
 * **Request Example:**
 * ```json
 * {
 * "identifier": "adebayo@fintech.ng",  // Email or username
 * "password": "SecurePass123"
 * }
 * ```
 *
 * **Features:**
 * - ✅ Email or username login
 * - ✅ JWT token generation
 * - ✅ Last login tracking
 * - ✅ Request correlation ID support
 *
 * **Nigerian Context:**
 * - Supports Nigerian email domains (.ng, .com.ng)
 * - Optimized for fintech and DPI applications
 * - Audit logging for regulatory compliance
 */
export const authenticationPostApiV1AuthLoginJsonLoginUserJsonMutation = (
  options?: Partial<
    Options<AuthenticationPostApiV1AuthLoginJsonLoginUserJsonData>
  >
): UseMutationOptions<
  AuthenticationPostApiV1AuthLoginJsonLoginUserJsonResponse,
  AuthenticationPostApiV1AuthLoginJsonLoginUserJsonError,
  Options<AuthenticationPostApiV1AuthLoginJsonLoginUserJsonData>
> => {
  const mutationOptions: UseMutationOptions<
    AuthenticationPostApiV1AuthLoginJsonLoginUserJsonResponse,
    AuthenticationPostApiV1AuthLoginJsonLoginUserJsonError,
    Options<AuthenticationPostApiV1AuthLoginJsonLoginUserJsonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authenticationPostApiV1AuthLoginJsonLoginUserJson({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authenticationGetApiV1AuthMeReadUserMeQueryKey = (
  options?: Options<AuthenticationGetApiV1AuthMeReadUserMeData>
) => createQueryKey("authenticationGetApiV1AuthMeReadUserMe", options);

/**
 * Read User Me
 * 👤 Get Current User Profile
 *
 * Retrieve authenticated user's profile information.
 * Requires valid JWT token in Authorization header.
 *
 * **Headers Required:**
 * - Authorization: Bearer {access_token}
 *
 * **Returns:**
 * - User profile with Nigerian DPI context
 * - NIN/BVN verification status
 * - Account activity information
 *
 * **Security:**
 * - Token validation required
 * - Active user status check
 * - Soft-delete filtering applied
 */
export const authenticationGetApiV1AuthMeReadUserMeOptions = (
  options?: Options<AuthenticationGetApiV1AuthMeReadUserMeData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationGetApiV1AuthMeReadUserMe({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationGetApiV1AuthMeReadUserMeQueryKey(options),
  });
};

export const authenticationPostApiV1AuthLogoutLogoutUserQueryKey = (
  options?: Options<AuthenticationPostApiV1AuthLogoutLogoutUserData>
) => createQueryKey("authenticationPostApiV1AuthLogoutLogoutUser", options);

/**
 * Logout User
 * 🚪 User Logout
 *
 * Logout current user session.
 * Client should remove tokens from storage.
 *
 * **Process:**
 * 1. Client receives logout confirmation
 * 2. Client removes access/refresh tokens
 * 3. Tokens become invalid on next request
 *
 * **Best Practice:**
 * - Clear all stored authentication data
 * - Redirect to login page
 * - Invalidate any cached user data
 *
 * **Note:** Server-side token blacklisting available
 * for enhanced security in production.
 */
export const authenticationPostApiV1AuthLogoutLogoutUserOptions = (
  options?: Options<AuthenticationPostApiV1AuthLogoutLogoutUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authenticationPostApiV1AuthLogoutLogoutUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authenticationPostApiV1AuthLogoutLogoutUserQueryKey(options),
  });
};

/**
 * Logout User
 * 🚪 User Logout
 *
 * Logout current user session.
 * Client should remove tokens from storage.
 *
 * **Process:**
 * 1. Client receives logout confirmation
 * 2. Client removes access/refresh tokens
 * 3. Tokens become invalid on next request
 *
 * **Best Practice:**
 * - Clear all stored authentication data
 * - Redirect to login page
 * - Invalidate any cached user data
 *
 * **Note:** Server-side token blacklisting available
 * for enhanced security in production.
 */
export const authenticationPostApiV1AuthLogoutLogoutUserMutation = (
  options?: Partial<Options<AuthenticationPostApiV1AuthLogoutLogoutUserData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<AuthenticationPostApiV1AuthLogoutLogoutUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<AuthenticationPostApiV1AuthLogoutLogoutUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authenticationPostApiV1AuthLogoutLogoutUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authPostApiV1AuthTokenOauthTokenQueryKey = (
  options: Options<AuthPostApiV1AuthTokenOauthTokenData>
) => createQueryKey("authPostApiV1AuthTokenOauthToken", options);

/**
 * Oauth Token
 * 🔑 OAuth2 Token Endpoint
 */
export const authPostApiV1AuthTokenOauthTokenOptions = (
  options: Options<AuthPostApiV1AuthTokenOauthTokenData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authPostApiV1AuthTokenOauthToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authPostApiV1AuthTokenOauthTokenQueryKey(options),
  });
};

/**
 * Oauth Token
 * 🔑 OAuth2 Token Endpoint
 */
export const authPostApiV1AuthTokenOauthTokenMutation = (
  options?: Partial<Options<AuthPostApiV1AuthTokenOauthTokenData>>
): UseMutationOptions<
  unknown,
  AuthPostApiV1AuthTokenOauthTokenError,
  Options<AuthPostApiV1AuthTokenOauthTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthPostApiV1AuthTokenOauthTokenError,
    Options<AuthPostApiV1AuthTokenOauthTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authPostApiV1AuthTokenOauthToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetApiV1AdminUsersListUsersQueryKey = (
  options?: Options<AdminGetApiV1AdminUsersListUsersData>
) => createQueryKey("adminGetApiV1AdminUsersListUsers", options);

/**
 * List Users
 * 📄 List All Nigerian Startup Users
 *
 * Retrieve paginated list of all registered users.
 * Includes verification status and activity metrics.
 *
 * **Query Parameters:**
 * - skip: Number of records to skip (default: 0)
 * - limit: Maximum records to return (default: 100)
 *
 * **Response Includes:**
 * - User profiles with NIN/BVN status
 * - Last login and activity data
 * - Account verification levels
 * - Soft-delete filtering applied
 *
 * **Admin Only:** Platform oversight and user management
 */
export const adminGetApiV1AdminUsersListUsersOptions = (
  options?: Options<AdminGetApiV1AdminUsersListUsersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await adminGetApiV1AdminUsersListUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetApiV1AdminUsersListUsersQueryKey(options),
  });
};

export const adminPostApiV1AdminUsersCreateUserQueryKey = (
  options: Options<AdminPostApiV1AdminUsersCreateUserData>
) => createQueryKey("adminPostApiV1AdminUsersCreateUser", options);

/**
 * Create User
 * 👥 Create Nigerian Startup Account
 *
 * Create new user account for Nigerian DPI developers.
 * Only accessible by platform administrators.
 *
 * **Request Example:**
 * ```json
 * {
 * "email": "developer@fintech.ng",
 * "username": "fintech_dev",
 * "password": "TempPass123",
 * "first_name": "Adebayo",
 * "last_name": "Ogundimu",
 * "role": "developer"  // Optional: admin, developer
 * }
 * ```
 *
 * **Features:**
 * - ✅ Email uniqueness validation
 * - ✅ Username availability check
 * - ✅ Automatic welcome email
 * - ✅ Nigerian domain support (.ng, .com.ng)
 *
 * **Admin Access Required:**
 * - Must be authenticated as admin
 * - Closed sandbox: Only 9 Nigerian startups
 */
export const adminPostApiV1AdminUsersCreateUserOptions = (
  options: Options<AdminPostApiV1AdminUsersCreateUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await adminPostApiV1AdminUsersCreateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminPostApiV1AdminUsersCreateUserQueryKey(options),
  });
};

/**
 * Create User
 * 👥 Create Nigerian Startup Account
 *
 * Create new user account for Nigerian DPI developers.
 * Only accessible by platform administrators.
 *
 * **Request Example:**
 * ```json
 * {
 * "email": "developer@fintech.ng",
 * "username": "fintech_dev",
 * "password": "TempPass123",
 * "first_name": "Adebayo",
 * "last_name": "Ogundimu",
 * "role": "developer"  // Optional: admin, developer
 * }
 * ```
 *
 * **Features:**
 * - ✅ Email uniqueness validation
 * - ✅ Username availability check
 * - ✅ Automatic welcome email
 * - ✅ Nigerian domain support (.ng, .com.ng)
 *
 * **Admin Access Required:**
 * - Must be authenticated as admin
 * - Closed sandbox: Only 9 Nigerian startups
 */
export const adminPostApiV1AdminUsersCreateUserMutation = (
  options?: Partial<Options<AdminPostApiV1AdminUsersCreateUserData>>
): UseMutationOptions<
  AdminPostApiV1AdminUsersCreateUserResponse,
  AdminPostApiV1AdminUsersCreateUserError,
  Options<AdminPostApiV1AdminUsersCreateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    AdminPostApiV1AdminUsersCreateUserResponse,
    AdminPostApiV1AdminUsersCreateUserError,
    Options<AdminPostApiV1AdminUsersCreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await adminPostApiV1AdminUsersCreateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete User
 * 🗑️ Soft Delete User Account
 *
 * Mark user account as deleted (soft delete).
 * Preserves data for audit compliance.
 *
 * **Process:**
 * 1. Sets is_deleted = true
 * 2. Records deletion timestamp
 * 3. Maintains audit trail
 * 4. Frees email/username for reuse
 *
 * **Data Retention:**
 * - User data preserved for compliance
 * - API access immediately revoked
 * - Email/username become available
 *
 * **NDPR Compliant:** Nigerian Data Protection Regulation
 */
export const adminDeleteApiV1AdminUsersUserIdDeleteUserMutation = (
  options?: Partial<Options<AdminDeleteApiV1AdminUsersUserIdDeleteUserData>>
): UseMutationOptions<
  unknown,
  AdminDeleteApiV1AdminUsersUserIdDeleteUserError,
  Options<AdminDeleteApiV1AdminUsersUserIdDeleteUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AdminDeleteApiV1AdminUsersUserIdDeleteUserError,
    Options<AdminDeleteApiV1AdminUsersUserIdDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await adminDeleteApiV1AdminUsersUserIdDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminGetApiV1AdminUsersUserIdGetUserQueryKey = (
  options: Options<AdminGetApiV1AdminUsersUserIdGetUserData>
) => createQueryKey("adminGetApiV1AdminUsersUserIdGetUser", options);

/**
 * Get User
 * 🔍 Get Specific User Details
 *
 * Retrieve detailed information for a specific user.
 * Includes full profile and verification status.
 *
 * **Path Parameters:**
 * - user_id: Unique user identifier
 *
 * **Returns:**
 * - Complete user profile
 * - NIN/BVN verification status
 * - Account activity history
 * - Role and permissions
 *
 * **Use Cases:**
 * - User support and troubleshooting
 * - Account verification review
 * - Compliance auditing
 */
export const adminGetApiV1AdminUsersUserIdGetUserOptions = (
  options: Options<AdminGetApiV1AdminUsersUserIdGetUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await adminGetApiV1AdminUsersUserIdGetUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: adminGetApiV1AdminUsersUserIdGetUserQueryKey(options),
  });
};

/**
 * Update User
 * ✏️ Update User Profile
 *
 * Modify user account information and settings.
 * Supports partial updates with validation.
 *
 * **Updatable Fields:**
 * - first_name, last_name
 * - email (with uniqueness check)
 * - username (with availability check)
 * - role (admin, developer)
 * - is_active status
 *
 * **Validation:**
 * - Email format and domain validation
 * - Username uniqueness across platform
 * - Role permission verification
 *
 * **Audit Trail:** All changes logged for compliance
 */
export const adminPutApiV1AdminUsersUserIdUpdateUserMutation = (
  options?: Partial<Options<AdminPutApiV1AdminUsersUserIdUpdateUserData>>
): UseMutationOptions<
  AdminPutApiV1AdminUsersUserIdUpdateUserResponse,
  AdminPutApiV1AdminUsersUserIdUpdateUserError,
  Options<AdminPutApiV1AdminUsersUserIdUpdateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    AdminPutApiV1AdminUsersUserIdUpdateUserResponse,
    AdminPutApiV1AdminUsersUserIdUpdateUserError,
    Options<AdminPutApiV1AdminUsersUserIdUpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await adminPutApiV1AdminUsersUserIdUpdateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const adminPostApiV1AdminUsersUserIdActivateActivateUserQueryKey = (
  options: Options<AdminPostApiV1AdminUsersUserIdActivateActivateUserData>
) =>
  createQueryKey("adminPostApiV1AdminUsersUserIdActivateActivateUser", options);

/**
 * Activate User
 * ✅ Activate User Account
 *
 * Enable user account for API access.
 * Restores full platform functionality.
 *
 * **Effects:**
 * - Enables login and API access
 * - Restores DPI service usage
 * - Allows NIN/BVN verification
 * - Resumes audit logging
 *
 * **Use Cases:**
 * - New account activation
 * - Account restoration after suspension
 * - Startup onboarding completion
 *
 * **Notification:** User receives activation email
 */
export const adminPostApiV1AdminUsersUserIdActivateActivateUserOptions = (
  options: Options<AdminPostApiV1AdminUsersUserIdActivateActivateUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await adminPostApiV1AdminUsersUserIdActivateActivateUser(
        {
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        }
      );
      return data;
    },
    queryKey:
      adminPostApiV1AdminUsersUserIdActivateActivateUserQueryKey(options),
  });
};

/**
 * Activate User
 * ✅ Activate User Account
 *
 * Enable user account for API access.
 * Restores full platform functionality.
 *
 * **Effects:**
 * - Enables login and API access
 * - Restores DPI service usage
 * - Allows NIN/BVN verification
 * - Resumes audit logging
 *
 * **Use Cases:**
 * - New account activation
 * - Account restoration after suspension
 * - Startup onboarding completion
 *
 * **Notification:** User receives activation email
 */
export const adminPostApiV1AdminUsersUserIdActivateActivateUserMutation = (
  options?: Partial<
    Options<AdminPostApiV1AdminUsersUserIdActivateActivateUserData>
  >
): UseMutationOptions<
  unknown,
  AdminPostApiV1AdminUsersUserIdActivateActivateUserError,
  Options<AdminPostApiV1AdminUsersUserIdActivateActivateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AdminPostApiV1AdminUsersUserIdActivateActivateUserError,
    Options<AdminPostApiV1AdminUsersUserIdActivateActivateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await adminPostApiV1AdminUsersUserIdActivateActivateUser(
        {
          ...options,
          ...localOptions,
          throwOnError: true,
        }
      );
      return data;
    },
  };
  return mutationOptions;
};

export const adminPostApiV1AdminUsersUserIdDeactivateDeactivateUserQueryKey = (
  options: Options<AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserData>
) =>
  createQueryKey(
    "adminPostApiV1AdminUsersUserIdDeactivateDeactivateUser",
    options
  );

/**
 * Deactivate User
 * ❌ Deactivate User Account
 *
 * Suspend user account and revoke API access.
 * Temporary suspension without data loss.
 *
 * **Effects:**
 * - Blocks login attempts
 * - Revokes API access tokens
 * - Suspends DPI service usage
 * - Maintains audit trail
 *
 * **Use Cases:**
 * - Policy violation suspension
 * - Security incident response
 * - Temporary account freeze
 *
 * **Reversible:** Account can be reactivated
 */
export const adminPostApiV1AdminUsersUserIdDeactivateDeactivateUserOptions = (
  options: Options<AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await adminPostApiV1AdminUsersUserIdDeactivateDeactivateUser({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      adminPostApiV1AdminUsersUserIdDeactivateDeactivateUserQueryKey(options),
  });
};

/**
 * Deactivate User
 * ❌ Deactivate User Account
 *
 * Suspend user account and revoke API access.
 * Temporary suspension without data loss.
 *
 * **Effects:**
 * - Blocks login attempts
 * - Revokes API access tokens
 * - Suspends DPI service usage
 * - Maintains audit trail
 *
 * **Use Cases:**
 * - Policy violation suspension
 * - Security incident response
 * - Temporary account freeze
 *
 * **Reversible:** Account can be reactivated
 */
export const adminPostApiV1AdminUsersUserIdDeactivateDeactivateUserMutation = (
  options?: Partial<
    Options<AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserData>
  >
): UseMutationOptions<
  unknown,
  AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserError,
  Options<AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserError,
    Options<AdminPostApiV1AdminUsersUserIdDeactivateDeactivateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } =
        await adminPostApiV1AdminUsersUserIdDeactivateDeactivateUser({
          ...options,
          ...localOptions,
          throwOnError: true,
        });
      return data;
    },
  };
  return mutationOptions;
};

export const adminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordQueryKey =
  (
    options: Options<AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordData>
  ) =>
    createQueryKey(
      "adminPostApiV1AdminUsersUserIdResetPasswordResetUserPassword",
      options
    );

/**
 * Reset User Password
 * 🔑 Admin Password Reset
 *
 * Reset user password for account recovery.
 * Sends secure notification to user email.
 *
 * **Request Body:**
 * ```json
 * {
 * "new_password": "NewSecurePass123"
 * }
 * ```
 *
 * **Security Process:**
 * 1. Validates admin permissions
 * 2. Hashes new password securely
 * 3. Updates user credentials
 * 4. Sends notification email
 * 5. Logs password change event
 *
 * **Best Practice:** User should change password on next login
 */
export const adminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordOptions =
  (
    options: Options<AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await adminPostApiV1AdminUsersUserIdResetPasswordResetUserPassword({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          });
        return data;
      },
      queryKey:
        adminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordQueryKey(
          options
        ),
    });
  };

/**
 * Reset User Password
 * 🔑 Admin Password Reset
 *
 * Reset user password for account recovery.
 * Sends secure notification to user email.
 *
 * **Request Body:**
 * ```json
 * {
 * "new_password": "NewSecurePass123"
 * }
 * ```
 *
 * **Security Process:**
 * 1. Validates admin permissions
 * 2. Hashes new password securely
 * 3. Updates user credentials
 * 4. Sends notification email
 * 5. Logs password change event
 *
 * **Best Practice:** User should change password on next login
 */
export const adminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordMutation =
  (
    options?: Partial<
      Options<AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordData>
    >
  ): UseMutationOptions<
    unknown,
    AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordError,
    Options<AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordData>
  > => {
    const mutationOptions: UseMutationOptions<
      unknown,
      AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordError,
      Options<AdminPostApiV1AdminUsersUserIdResetPasswordResetUserPasswordData>
    > = {
      mutationFn: async (localOptions) => {
        const { data } =
          await adminPostApiV1AdminUsersUserIdResetPasswordResetUserPassword({
            ...options,
            ...localOptions,
            throwOnError: true,
          });
        return data;
      },
    };
    return mutationOptions;
  };

export const oauth2PostApiV1Oauth2ClientsCreateOauthClientQueryKey = (
  options: Options<Oauth2PostApiV1Oauth2ClientsCreateOauthClientData>
) => createQueryKey("oauth2PostApiV1Oauth2ClientsCreateOauthClient", options);

/**
 * Create Oauth Client
 * Create a new OAuth2 client.
 */
export const oauth2PostApiV1Oauth2ClientsCreateOauthClientOptions = (
  options: Options<Oauth2PostApiV1Oauth2ClientsCreateOauthClientData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await oauth2PostApiV1Oauth2ClientsCreateOauthClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: oauth2PostApiV1Oauth2ClientsCreateOauthClientQueryKey(options),
  });
};

/**
 * Create Oauth Client
 * Create a new OAuth2 client.
 */
export const oauth2PostApiV1Oauth2ClientsCreateOauthClientMutation = (
  options?: Partial<Options<Oauth2PostApiV1Oauth2ClientsCreateOauthClientData>>
): UseMutationOptions<
  Oauth2PostApiV1Oauth2ClientsCreateOauthClientResponse,
  Oauth2PostApiV1Oauth2ClientsCreateOauthClientError,
  Options<Oauth2PostApiV1Oauth2ClientsCreateOauthClientData>
> => {
  const mutationOptions: UseMutationOptions<
    Oauth2PostApiV1Oauth2ClientsCreateOauthClientResponse,
    Oauth2PostApiV1Oauth2ClientsCreateOauthClientError,
    Options<Oauth2PostApiV1Oauth2ClientsCreateOauthClientData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await oauth2PostApiV1Oauth2ClientsCreateOauthClient({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientQueryKey = (
  options: Options<Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientData>
) =>
  createQueryKey("oauth2GetApiV1Oauth2ClientsClientIdGetOauthClient", options);

/**
 * Get Oauth Client
 * Get OAuth2 client by ID.
 */
export const oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientOptions = (
  options: Options<Oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await oauth2GetApiV1Oauth2ClientsClientIdGetOauthClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey:
      oauth2GetApiV1Oauth2ClientsClientIdGetOauthClientQueryKey(options),
  });
};

export const oauth2GetApiV1Oauth2AuthorizeAuthorizeQueryKey = (
  options: Options<Oauth2GetApiV1Oauth2AuthorizeAuthorizeData>
) => createQueryKey("oauth2GetApiV1Oauth2AuthorizeAuthorize", options);

/**
 * Authorize
 * OAuth2 authorization endpoint.
 */
export const oauth2GetApiV1Oauth2AuthorizeAuthorizeOptions = (
  options: Options<Oauth2GetApiV1Oauth2AuthorizeAuthorizeData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await oauth2GetApiV1Oauth2AuthorizeAuthorize({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: oauth2GetApiV1Oauth2AuthorizeAuthorizeQueryKey(options),
  });
};

export const smsPostApiV1SmsSendSendSmsQueryKey = (
  options: Options<SmsPostApiV1SmsSendSendSmsData>
) => createQueryKey("smsPostApiV1SmsSendSendSms", options);

/**
 * Send Sms
 * 📱 Send SMS to Nigerian Number
 */
export const smsPostApiV1SmsSendSendSmsOptions = (
  options: Options<SmsPostApiV1SmsSendSendSmsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsPostApiV1SmsSendSendSms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsPostApiV1SmsSendSendSmsQueryKey(options),
  });
};

/**
 * Send Sms
 * 📱 Send SMS to Nigerian Number
 */
export const smsPostApiV1SmsSendSendSmsMutation = (
  options?: Partial<Options<SmsPostApiV1SmsSendSendSmsData>>
): UseMutationOptions<
  unknown,
  SmsPostApiV1SmsSendSendSmsError,
  Options<SmsPostApiV1SmsSendSendSmsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SmsPostApiV1SmsSendSendSmsError,
    Options<SmsPostApiV1SmsSendSendSmsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await smsPostApiV1SmsSendSendSms({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const smsPostApiV1SmsBulkSendBulkSmsQueryKey = (
  options: Options<SmsPostApiV1SmsBulkSendBulkSmsData>
) => createQueryKey("smsPostApiV1SmsBulkSendBulkSms", options);

/**
 * Send Bulk Sms
 * 📤 Send Bulk SMS Messages
 */
export const smsPostApiV1SmsBulkSendBulkSmsOptions = (
  options: Options<SmsPostApiV1SmsBulkSendBulkSmsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsPostApiV1SmsBulkSendBulkSms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsPostApiV1SmsBulkSendBulkSmsQueryKey(options),
  });
};

/**
 * Send Bulk Sms
 * 📤 Send Bulk SMS Messages
 */
export const smsPostApiV1SmsBulkSendBulkSmsMutation = (
  options?: Partial<Options<SmsPostApiV1SmsBulkSendBulkSmsData>>
): UseMutationOptions<
  unknown,
  SmsPostApiV1SmsBulkSendBulkSmsError,
  Options<SmsPostApiV1SmsBulkSendBulkSmsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SmsPostApiV1SmsBulkSendBulkSmsError,
    Options<SmsPostApiV1SmsBulkSendBulkSmsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await smsPostApiV1SmsBulkSendBulkSms({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const smsPostApiV1SmsOtpGenerateGenerateOtpQueryKey = (
  options: Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>
) => createQueryKey("smsPostApiV1SmsOtpGenerateGenerateOtp", options);

/**
 * Generate Otp
 * 🔐 Generate and Send OTP
 */
export const smsPostApiV1SmsOtpGenerateGenerateOtpOptions = (
  options: Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsPostApiV1SmsOtpGenerateGenerateOtp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsPostApiV1SmsOtpGenerateGenerateOtpQueryKey(options),
  });
};

/**
 * Generate Otp
 * 🔐 Generate and Send OTP
 */
export const smsPostApiV1SmsOtpGenerateGenerateOtpMutation = (
  options?: Partial<Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>>
): UseMutationOptions<
  unknown,
  SmsPostApiV1SmsOtpGenerateGenerateOtpError,
  Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SmsPostApiV1SmsOtpGenerateGenerateOtpError,
    Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await smsPostApiV1SmsOtpGenerateGenerateOtp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const smsPostApiV1SmsOtpVerifyVerifyOtpQueryKey = (
  options: Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>
) => createQueryKey("smsPostApiV1SmsOtpVerifyVerifyOtp", options);

/**
 * Verify Otp
 * ✅ Verify OTP Code
 */
export const smsPostApiV1SmsOtpVerifyVerifyOtpOptions = (
  options: Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsPostApiV1SmsOtpVerifyVerifyOtp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsPostApiV1SmsOtpVerifyVerifyOtpQueryKey(options),
  });
};

/**
 * Verify Otp
 * ✅ Verify OTP Code
 */
export const smsPostApiV1SmsOtpVerifyVerifyOtpMutation = (
  options?: Partial<Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>>
): UseMutationOptions<
  unknown,
  SmsPostApiV1SmsOtpVerifyVerifyOtpError,
  Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SmsPostApiV1SmsOtpVerifyVerifyOtpError,
    Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await smsPostApiV1SmsOtpVerifyVerifyOtp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const smsGetApiV1SmsStatusMessageIdGetMessageStatusQueryKey = (
  options: Options<SmsGetApiV1SmsStatusMessageIdGetMessageStatusData>
) => createQueryKey("smsGetApiV1SmsStatusMessageIdGetMessageStatus", options);

/**
 * Get Message Status
 * 📊 Check Message Delivery Status
 */
export const smsGetApiV1SmsStatusMessageIdGetMessageStatusOptions = (
  options: Options<SmsGetApiV1SmsStatusMessageIdGetMessageStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsGetApiV1SmsStatusMessageIdGetMessageStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsGetApiV1SmsStatusMessageIdGetMessageStatusQueryKey(options),
  });
};

export const smsGetApiV1SmsBalanceGetSmsBalanceQueryKey = (
  options?: Options<SmsGetApiV1SmsBalanceGetSmsBalanceData>
) => createQueryKey("smsGetApiV1SmsBalanceGetSmsBalance", options);

/**
 * Get Sms Balance
 * 💰 Check SMS Credit Balance
 */
export const smsGetApiV1SmsBalanceGetSmsBalanceOptions = (
  options?: Options<SmsGetApiV1SmsBalanceGetSmsBalanceData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsGetApiV1SmsBalanceGetSmsBalance({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsGetApiV1SmsBalanceGetSmsBalanceQueryKey(options),
  });
};

export const smsGetApiV1SmsTemplatesGetMessageTemplatesQueryKey = (
  options?: Options<SmsGetApiV1SmsTemplatesGetMessageTemplatesData>
) => createQueryKey("smsGetApiV1SmsTemplatesGetMessageTemplates", options);

/**
 * Get Message Templates
 * 📝 Get Message Templates
 */
export const smsGetApiV1SmsTemplatesGetMessageTemplatesOptions = (
  options?: Options<SmsGetApiV1SmsTemplatesGetMessageTemplatesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsGetApiV1SmsTemplatesGetMessageTemplates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsGetApiV1SmsTemplatesGetMessageTemplatesQueryKey(options),
  });
};

export const aiPostApiV1AiChatChatCompletionQueryKey = (
  options: Options<AiPostApiV1AiChatChatCompletionData>
) => createQueryKey("aiPostApiV1AiChatChatCompletion", options);

/**
 * Chat Completion
 * 🤖 Interactive Chat Completion
 */
export const aiPostApiV1AiChatChatCompletionOptions = (
  options: Options<AiPostApiV1AiChatChatCompletionData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiPostApiV1AiChatChatCompletion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiPostApiV1AiChatChatCompletionQueryKey(options),
  });
};

/**
 * Chat Completion
 * 🤖 Interactive Chat Completion
 */
export const aiPostApiV1AiChatChatCompletionMutation = (
  options?: Partial<Options<AiPostApiV1AiChatChatCompletionData>>
): UseMutationOptions<
  unknown,
  AiPostApiV1AiChatChatCompletionError,
  Options<AiPostApiV1AiChatChatCompletionData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AiPostApiV1AiChatChatCompletionError,
    Options<AiPostApiV1AiChatChatCompletionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await aiPostApiV1AiChatChatCompletion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const aiPostApiV1AiGenerateGenerateContentQueryKey = (
  options: Options<AiPostApiV1AiGenerateGenerateContentData>
) => createQueryKey("aiPostApiV1AiGenerateGenerateContent", options);

/**
 * Generate Content
 * 📝 Generate Content
 */
export const aiPostApiV1AiGenerateGenerateContentOptions = (
  options: Options<AiPostApiV1AiGenerateGenerateContentData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiPostApiV1AiGenerateGenerateContent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiPostApiV1AiGenerateGenerateContentQueryKey(options),
  });
};

/**
 * Generate Content
 * 📝 Generate Content
 */
export const aiPostApiV1AiGenerateGenerateContentMutation = (
  options?: Partial<Options<AiPostApiV1AiGenerateGenerateContentData>>
): UseMutationOptions<
  unknown,
  AiPostApiV1AiGenerateGenerateContentError,
  Options<AiPostApiV1AiGenerateGenerateContentData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AiPostApiV1AiGenerateGenerateContentError,
    Options<AiPostApiV1AiGenerateGenerateContentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await aiPostApiV1AiGenerateGenerateContent({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const aiPostApiV1AiAnalyzeAnalyzeTextQueryKey = (
  options: Options<AiPostApiV1AiAnalyzeAnalyzeTextData>
) => createQueryKey("aiPostApiV1AiAnalyzeAnalyzeText", options);

/**
 * Analyze Text
 * 🔍 Analyze Text Content
 */
export const aiPostApiV1AiAnalyzeAnalyzeTextOptions = (
  options: Options<AiPostApiV1AiAnalyzeAnalyzeTextData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiPostApiV1AiAnalyzeAnalyzeText({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiPostApiV1AiAnalyzeAnalyzeTextQueryKey(options),
  });
};

/**
 * Analyze Text
 * 🔍 Analyze Text Content
 */
export const aiPostApiV1AiAnalyzeAnalyzeTextMutation = (
  options?: Partial<Options<AiPostApiV1AiAnalyzeAnalyzeTextData>>
): UseMutationOptions<
  unknown,
  AiPostApiV1AiAnalyzeAnalyzeTextError,
  Options<AiPostApiV1AiAnalyzeAnalyzeTextData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AiPostApiV1AiAnalyzeAnalyzeTextError,
    Options<AiPostApiV1AiAnalyzeAnalyzeTextData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await aiPostApiV1AiAnalyzeAnalyzeText({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const aiPostApiV1AiTranslateTranslateTextQueryKey = (
  options: Options<AiPostApiV1AiTranslateTranslateTextData>
) => createQueryKey("aiPostApiV1AiTranslateTranslateText", options);

/**
 * Translate Text
 * 🌍 Nigerian Language Translation
 */
export const aiPostApiV1AiTranslateTranslateTextOptions = (
  options: Options<AiPostApiV1AiTranslateTranslateTextData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiPostApiV1AiTranslateTranslateText({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiPostApiV1AiTranslateTranslateTextQueryKey(options),
  });
};

/**
 * Translate Text
 * 🌍 Nigerian Language Translation
 */
export const aiPostApiV1AiTranslateTranslateTextMutation = (
  options?: Partial<Options<AiPostApiV1AiTranslateTranslateTextData>>
): UseMutationOptions<
  unknown,
  AiPostApiV1AiTranslateTranslateTextError,
  Options<AiPostApiV1AiTranslateTranslateTextData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AiPostApiV1AiTranslateTranslateTextError,
    Options<AiPostApiV1AiTranslateTranslateTextData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await aiPostApiV1AiTranslateTranslateText({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const aiGetApiV1AiModelsGetAvailableModelsQueryKey = (
  options?: Options<AiGetApiV1AiModelsGetAvailableModelsData>
) => createQueryKey("aiGetApiV1AiModelsGetAvailableModels", options);

/**
 * Get Available Models
 * 🧠 Get Available AI Models
 */
export const aiGetApiV1AiModelsGetAvailableModelsOptions = (
  options?: Options<AiGetApiV1AiModelsGetAvailableModelsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiGetApiV1AiModelsGetAvailableModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiGetApiV1AiModelsGetAvailableModelsQueryKey(options),
  });
};

export const aiGetApiV1AiConversationsConversationIdGetConversationQueryKey = (
  options: Options<AiGetApiV1AiConversationsConversationIdGetConversationData>
) =>
  createQueryKey(
    "aiGetApiV1AiConversationsConversationIdGetConversation",
    options
  );

/**
 * Get Conversation
 * 💬 Get Conversation History
 */
export const aiGetApiV1AiConversationsConversationIdGetConversationOptions = (
  options: Options<AiGetApiV1AiConversationsConversationIdGetConversationData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await aiGetApiV1AiConversationsConversationIdGetConversation({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      aiGetApiV1AiConversationsConversationIdGetConversationQueryKey(options),
  });
};

export const aiGetApiV1AiUsageGetUsageStatisticsQueryKey = (
  options?: Options<AiGetApiV1AiUsageGetUsageStatisticsData>
) => createQueryKey("aiGetApiV1AiUsageGetUsageStatistics", options);

/**
 * Get Usage Statistics
 * 📊 Get Token Usage Statistics
 */
export const aiGetApiV1AiUsageGetUsageStatisticsOptions = (
  options?: Options<AiGetApiV1AiUsageGetUsageStatisticsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiGetApiV1AiUsageGetUsageStatistics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiGetApiV1AiUsageGetUsageStatisticsQueryKey(options),
  });
};

export const apiGetMetricsMetrics2QueryKey = (
  options?: Options<ApiGetMetricsMetrics2Data>
) => createQueryKey("apiGetMetricsMetrics2", options);

/**
 * Metrics
 * Endpoint that serves Prometheus metrics.
 */
export const apiGetMetricsMetrics2Options = (
  options?: Options<ApiGetMetricsMetrics2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetMetricsMetrics2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetMetricsMetrics2QueryKey(options),
  });
};

export const apiGetHealthHealthCheck2QueryKey = (
  options?: Options<ApiGetHealthHealthCheck2Data>
) => createQueryKey("apiGetHealthHealthCheck2", options);

/**
 * Health Check
 * Health check endpoint.
 */
export const apiGetHealthHealthCheck2Options = (
  options?: Options<ApiGetHealthHealthCheck2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetHealthHealthCheck2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetHealthHealthCheck2QueryKey(options),
  });
};

export const apiGetRootRoot2QueryKey = (
  options?: Options<ApiGetRootRoot2Data>
) => createQueryKey("apiGetRootRoot2", options);

/**
 * Root
 * Root endpoint.
 */
export const apiGetRootRoot2Options = (
  options?: Options<ApiGetRootRoot2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetRootRoot2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetRootRoot2QueryKey(options),
  });
};

export const apiGetWellKnownOpenidConfigurationOpenidConfigurationQueryKey = (
  options?: Options<ApiGetWellKnownOpenidConfigurationOpenidConfigurationData>
) =>
  createQueryKey(
    "apiGetWellKnownOpenidConfigurationOpenidConfiguration",
    options
  );

/**
 * Openid Configuration
 * OpenID Connect Discovery endpoint.
 */
export const apiGetWellKnownOpenidConfigurationOpenidConfigurationOptions = (
  options?: Options<ApiGetWellKnownOpenidConfigurationOpenidConfigurationData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await apiGetWellKnownOpenidConfigurationOpenidConfiguration({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      apiGetWellKnownOpenidConfigurationOpenidConfigurationQueryKey(options),
  });
};

export const apiGetWellKnownJwksJsonJwksQueryKey = (
  options?: Options<ApiGetWellKnownJwksJsonJwksData>
) => createQueryKey("apiGetWellKnownJwksJsonJwks", options);

/**
 * Jwks
 * JSON Web Key Set endpoint.
 */
export const apiGetWellKnownJwksJsonJwksOptions = (
  options?: Options<ApiGetWellKnownJwksJsonJwksData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetWellKnownJwksJsonJwks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetWellKnownJwksJsonJwksQueryKey(options),
  });
};

export const oauth2PostApiV1Oauth2TokenGetTokenQueryKey = (
  options: Options<Oauth2PostApiV1Oauth2TokenGetTokenData>
) => createQueryKey("oauth2PostApiV1Oauth2TokenGetToken", options);

/**
 * Get Token
 * OAuth2 token endpoint.
 */
export const oauth2PostApiV1Oauth2TokenGetTokenOptions = (
  options: Options<Oauth2PostApiV1Oauth2TokenGetTokenData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await oauth2PostApiV1Oauth2TokenGetToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: oauth2PostApiV1Oauth2TokenGetTokenQueryKey(options),
  });
};

/**
 * Get Token
 * OAuth2 token endpoint.
 */
export const oauth2PostApiV1Oauth2TokenGetTokenMutation = (
  options?: Partial<Options<Oauth2PostApiV1Oauth2TokenGetTokenData>>
): UseMutationOptions<
  Oauth2PostApiV1Oauth2TokenGetTokenResponse,
  Oauth2PostApiV1Oauth2TokenGetTokenError,
  Options<Oauth2PostApiV1Oauth2TokenGetTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    Oauth2PostApiV1Oauth2TokenGetTokenResponse,
    Oauth2PostApiV1Oauth2TokenGetTokenError,
    Options<Oauth2PostApiV1Oauth2TokenGetTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await oauth2PostApiV1Oauth2TokenGetToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const apiGetHealthHealthCheck3QueryKey = (
  options?: Options<ApiGetHealthHealthCheck3Data>
) => createQueryKey("apiGetHealthHealthCheck3", options);

/**
 * Health Check
 */
export const apiGetHealthHealthCheck3Options = (
  options?: Options<ApiGetHealthHealthCheck3Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetHealthHealthCheck3({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetHealthHealthCheck3QueryKey(options),
  });
};

export const apiGetRootRoot3QueryKey = (
  options?: Options<ApiGetRootRoot3Data>
) => createQueryKey("apiGetRootRoot3", options);

/**
 * Root
 */
export const apiGetRootRoot3Options = (
  options?: Options<ApiGetRootRoot3Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetRootRoot3({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetRootRoot3QueryKey(options),
  });
};

export const apiGetMetricsMetrics3QueryKey = (
  options?: Options<ApiGetMetricsMetrics3Data>
) => createQueryKey("apiGetMetricsMetrics3", options);

/**
 * Metrics
 * Endpoint that serves Prometheus metrics.
 */
export const apiGetMetricsMetrics3Options = (
  options?: Options<ApiGetMetricsMetrics3Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetMetricsMetrics3({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetMetricsMetrics3QueryKey(options),
  });
};

export const apiGetHealthHealthCheck4QueryKey = (
  options?: Options<ApiGetHealthHealthCheck4Data>
) => createQueryKey("apiGetHealthHealthCheck4", options);

/**
 * Health Check
 */
export const apiGetHealthHealthCheck4Options = (
  options?: Options<ApiGetHealthHealthCheck4Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetHealthHealthCheck4({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetHealthHealthCheck4QueryKey(options),
  });
};

export const apiGetMetricsMetrics4QueryKey = (
  options?: Options<ApiGetMetricsMetrics4Data>
) => createQueryKey("apiGetMetricsMetrics4", options);

/**
 * Metrics
 * Endpoint that serves Prometheus metrics.
 */
export const apiGetMetricsMetrics4Options = (
  options?: Options<ApiGetMetricsMetrics4Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetMetricsMetrics4({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetMetricsMetrics4QueryKey(options),
  });
};

export const apiGetHealthHealthCheck5QueryKey = (
  options?: Options<ApiGetHealthHealthCheck5Data>
) => createQueryKey("apiGetHealthHealthCheck5", options);

/**
 * Health Check
 */
export const apiGetHealthHealthCheck5Options = (
  options?: Options<ApiGetHealthHealthCheck5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetHealthHealthCheck5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetHealthHealthCheck5QueryKey(options),
  });
};

export const apiGetMetricsMetrics5QueryKey = (
  options?: Options<ApiGetMetricsMetrics5Data>
) => createQueryKey("apiGetMetricsMetrics5", options);

/**
 * Metrics
 * Endpoint that serves Prometheus metrics.
 */
export const apiGetMetricsMetrics5Options = (
  options?: Options<ApiGetMetricsMetrics5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetMetricsMetrics5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetMetricsMetrics5QueryKey(options),
  });
};
