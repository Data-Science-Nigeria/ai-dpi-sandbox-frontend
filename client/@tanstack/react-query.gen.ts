// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  healthCheckHealthGet,
  metricsMetricsGet,
  rootGet,
  proxyAuthServiceApiV1AuthPathOptions,
  proxyAuthServiceApiV1AuthPathOptions2,
  proxyAuthServiceApiV1AuthPathOptions4,
  proxyAuthServiceApiV1AuthPathOptions5,
  proxyAuthServiceApiV1AuthPathOptions6,
  proxySmsServiceApiV1SmsPathOptions,
  proxySmsServiceApiV1SmsPathOptions2,
  proxySmsServiceApiV1SmsPathOptions4,
  proxySmsServiceApiV1SmsPathOptions5,
  proxySmsServiceApiV1SmsPathOptions6,
  proxyLlmServiceApiV1LlmPathOptions,
  proxyLlmServiceApiV1LlmPathOptions2,
  proxyLlmServiceApiV1LlmPathOptions4,
  proxyLlmServiceApiV1LlmPathOptions5,
  proxyLlmServiceApiV1LlmPathOptions6,
  getServicesHealthApiV1ServicesHealthGet,
  getServicesStatusApiV1ServicesStatusGet,
  getServiceHealthApiV1ServicesServiceNameHealthGet,
  getServiceMetricsApiV1ServicesServiceNameMetricsGet,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  HealthCheckHealthGetData,
  MetricsMetricsGetData,
  RootGetData,
  ProxyAuthServiceApiV1AuthPathOptionsData,
  ProxyAuthServiceApiV1AuthPathOptionsError,
  ProxyAuthServiceApiV1AuthPathOptions2Data,
  ProxyAuthServiceApiV1AuthPathOptions4Data,
  ProxyAuthServiceApiV1AuthPathOptions4Error,
  ProxyAuthServiceApiV1AuthPathOptions5Data,
  ProxyAuthServiceApiV1AuthPathOptions5Error,
  ProxyAuthServiceApiV1AuthPathOptions6Data,
  ProxyAuthServiceApiV1AuthPathOptions6Error,
  ProxySmsServiceApiV1SmsPathOptionsData,
  ProxySmsServiceApiV1SmsPathOptionsError,
  ProxySmsServiceApiV1SmsPathOptions2Data,
  ProxySmsServiceApiV1SmsPathOptions4Data,
  ProxySmsServiceApiV1SmsPathOptions4Error,
  ProxySmsServiceApiV1SmsPathOptions5Data,
  ProxySmsServiceApiV1SmsPathOptions5Error,
  ProxySmsServiceApiV1SmsPathOptions6Data,
  ProxySmsServiceApiV1SmsPathOptions6Error,
  ProxyLlmServiceApiV1LlmPathOptionsData,
  ProxyLlmServiceApiV1LlmPathOptionsError,
  ProxyLlmServiceApiV1LlmPathOptions2Data,
  ProxyLlmServiceApiV1LlmPathOptions4Data,
  ProxyLlmServiceApiV1LlmPathOptions4Error,
  ProxyLlmServiceApiV1LlmPathOptions5Data,
  ProxyLlmServiceApiV1LlmPathOptions5Error,
  ProxyLlmServiceApiV1LlmPathOptions6Data,
  ProxyLlmServiceApiV1LlmPathOptions6Error,
  GetServicesHealthApiV1ServicesHealthGetData,
  GetServicesStatusApiV1ServicesStatusGetData,
  GetServiceHealthApiV1ServicesServiceNameHealthGetData,
  GetServiceMetricsApiV1ServicesServiceNameMetricsGetData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const healthCheckHealthGetQueryKey = (
  options?: Options<HealthCheckHealthGetData>
) => createQueryKey("healthCheckHealthGet", options);

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGetOptions = (
  options?: Options<HealthCheckHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthCheckHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckHealthGetQueryKey(options),
  });
};

export const metricsMetricsGetQueryKey = (
  options?: Options<MetricsMetricsGetData>
) => createQueryKey("metricsMetricsGet", options);

/**
 * Metrics
 * Prometheus metrics endpoint.
 */
export const metricsMetricsGetOptions = (
  options?: Options<MetricsMetricsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metricsMetricsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metricsMetricsGetQueryKey(options),
  });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) =>
  createQueryKey("rootGet", options);

/**
 * Root
 * Root endpoint.
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rootGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootGetQueryKey(options),
  });
};

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathOptionsMutation = (
  options?: Partial<Options<ProxyAuthServiceApiV1AuthPathOptionsData>>
): UseMutationOptions<
  unknown,
  ProxyAuthServiceApiV1AuthPathOptionsError,
  Options<ProxyAuthServiceApiV1AuthPathOptionsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyAuthServiceApiV1AuthPathOptionsError,
    Options<ProxyAuthServiceApiV1AuthPathOptionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyAuthServiceApiV1AuthPathOptions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyAuthServiceApiV1AuthPathOptions2QueryKey = (
  options: Options<ProxyAuthServiceApiV1AuthPathOptions2Data>
) => createQueryKey("proxyAuthServiceApiV1AuthPathOptions2", options);

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathOptions2Options = (
  options: Options<ProxyAuthServiceApiV1AuthPathOptions2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyAuthServiceApiV1AuthPathOptions2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyAuthServiceApiV1AuthPathOptions2QueryKey(options),
  });
};

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathOptions4Mutation = (
  options?: Partial<Options<ProxyAuthServiceApiV1AuthPathOptions4Data>>
): UseMutationOptions<
  unknown,
  ProxyAuthServiceApiV1AuthPathOptions4Error,
  Options<ProxyAuthServiceApiV1AuthPathOptions4Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyAuthServiceApiV1AuthPathOptions4Error,
    Options<ProxyAuthServiceApiV1AuthPathOptions4Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyAuthServiceApiV1AuthPathOptions4({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyAuthServiceApiV1AuthPathOptions5QueryKey = (
  options: Options<ProxyAuthServiceApiV1AuthPathOptions5Data>
) => createQueryKey("proxyAuthServiceApiV1AuthPathOptions5", options);

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathOptions5Options = (
  options: Options<ProxyAuthServiceApiV1AuthPathOptions5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyAuthServiceApiV1AuthPathOptions5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyAuthServiceApiV1AuthPathOptions5QueryKey(options),
  });
};

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathOptions5Mutation = (
  options?: Partial<Options<ProxyAuthServiceApiV1AuthPathOptions5Data>>
): UseMutationOptions<
  unknown,
  ProxyAuthServiceApiV1AuthPathOptions5Error,
  Options<ProxyAuthServiceApiV1AuthPathOptions5Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyAuthServiceApiV1AuthPathOptions5Error,
    Options<ProxyAuthServiceApiV1AuthPathOptions5Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyAuthServiceApiV1AuthPathOptions5({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Auth Service
 * Proxy requests to auth service.
 */
export const proxyAuthServiceApiV1AuthPathOptions6Mutation = (
  options?: Partial<Options<ProxyAuthServiceApiV1AuthPathOptions6Data>>
): UseMutationOptions<
  unknown,
  ProxyAuthServiceApiV1AuthPathOptions6Error,
  Options<ProxyAuthServiceApiV1AuthPathOptions6Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyAuthServiceApiV1AuthPathOptions6Error,
    Options<ProxyAuthServiceApiV1AuthPathOptions6Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyAuthServiceApiV1AuthPathOptions6({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathOptionsMutation = (
  options?: Partial<Options<ProxySmsServiceApiV1SmsPathOptionsData>>
): UseMutationOptions<
  unknown,
  ProxySmsServiceApiV1SmsPathOptionsError,
  Options<ProxySmsServiceApiV1SmsPathOptionsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxySmsServiceApiV1SmsPathOptionsError,
    Options<ProxySmsServiceApiV1SmsPathOptionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxySmsServiceApiV1SmsPathOptions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxySmsServiceApiV1SmsPathOptions2QueryKey = (
  options: Options<ProxySmsServiceApiV1SmsPathOptions2Data>
) => createQueryKey("proxySmsServiceApiV1SmsPathOptions2", options);

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathOptions2Options = (
  options: Options<ProxySmsServiceApiV1SmsPathOptions2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxySmsServiceApiV1SmsPathOptions2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxySmsServiceApiV1SmsPathOptions2QueryKey(options),
  });
};

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathOptions4Mutation = (
  options?: Partial<Options<ProxySmsServiceApiV1SmsPathOptions4Data>>
): UseMutationOptions<
  unknown,
  ProxySmsServiceApiV1SmsPathOptions4Error,
  Options<ProxySmsServiceApiV1SmsPathOptions4Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxySmsServiceApiV1SmsPathOptions4Error,
    Options<ProxySmsServiceApiV1SmsPathOptions4Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxySmsServiceApiV1SmsPathOptions4({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxySmsServiceApiV1SmsPathOptions5QueryKey = (
  options: Options<ProxySmsServiceApiV1SmsPathOptions5Data>
) => createQueryKey("proxySmsServiceApiV1SmsPathOptions5", options);

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathOptions5Options = (
  options: Options<ProxySmsServiceApiV1SmsPathOptions5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxySmsServiceApiV1SmsPathOptions5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxySmsServiceApiV1SmsPathOptions5QueryKey(options),
  });
};

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathOptions5Mutation = (
  options?: Partial<Options<ProxySmsServiceApiV1SmsPathOptions5Data>>
): UseMutationOptions<
  unknown,
  ProxySmsServiceApiV1SmsPathOptions5Error,
  Options<ProxySmsServiceApiV1SmsPathOptions5Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxySmsServiceApiV1SmsPathOptions5Error,
    Options<ProxySmsServiceApiV1SmsPathOptions5Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxySmsServiceApiV1SmsPathOptions5({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Sms Service
 * Proxy requests to SMS service.
 */
export const proxySmsServiceApiV1SmsPathOptions6Mutation = (
  options?: Partial<Options<ProxySmsServiceApiV1SmsPathOptions6Data>>
): UseMutationOptions<
  unknown,
  ProxySmsServiceApiV1SmsPathOptions6Error,
  Options<ProxySmsServiceApiV1SmsPathOptions6Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxySmsServiceApiV1SmsPathOptions6Error,
    Options<ProxySmsServiceApiV1SmsPathOptions6Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxySmsServiceApiV1SmsPathOptions6({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathOptionsMutation = (
  options?: Partial<Options<ProxyLlmServiceApiV1LlmPathOptionsData>>
): UseMutationOptions<
  unknown,
  ProxyLlmServiceApiV1LlmPathOptionsError,
  Options<ProxyLlmServiceApiV1LlmPathOptionsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyLlmServiceApiV1LlmPathOptionsError,
    Options<ProxyLlmServiceApiV1LlmPathOptionsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyLlmServiceApiV1LlmPathOptions({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyLlmServiceApiV1LlmPathOptions2QueryKey = (
  options: Options<ProxyLlmServiceApiV1LlmPathOptions2Data>
) => createQueryKey("proxyLlmServiceApiV1LlmPathOptions2", options);

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathOptions2Options = (
  options: Options<ProxyLlmServiceApiV1LlmPathOptions2Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyLlmServiceApiV1LlmPathOptions2({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyLlmServiceApiV1LlmPathOptions2QueryKey(options),
  });
};

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathOptions4Mutation = (
  options?: Partial<Options<ProxyLlmServiceApiV1LlmPathOptions4Data>>
): UseMutationOptions<
  unknown,
  ProxyLlmServiceApiV1LlmPathOptions4Error,
  Options<ProxyLlmServiceApiV1LlmPathOptions4Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyLlmServiceApiV1LlmPathOptions4Error,
    Options<ProxyLlmServiceApiV1LlmPathOptions4Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyLlmServiceApiV1LlmPathOptions4({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const proxyLlmServiceApiV1LlmPathOptions5QueryKey = (
  options: Options<ProxyLlmServiceApiV1LlmPathOptions5Data>
) => createQueryKey("proxyLlmServiceApiV1LlmPathOptions5", options);

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathOptions5Options = (
  options: Options<ProxyLlmServiceApiV1LlmPathOptions5Data>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await proxyLlmServiceApiV1LlmPathOptions5({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: proxyLlmServiceApiV1LlmPathOptions5QueryKey(options),
  });
};

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathOptions5Mutation = (
  options?: Partial<Options<ProxyLlmServiceApiV1LlmPathOptions5Data>>
): UseMutationOptions<
  unknown,
  ProxyLlmServiceApiV1LlmPathOptions5Error,
  Options<ProxyLlmServiceApiV1LlmPathOptions5Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyLlmServiceApiV1LlmPathOptions5Error,
    Options<ProxyLlmServiceApiV1LlmPathOptions5Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyLlmServiceApiV1LlmPathOptions5({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Proxy Llm Service
 * Proxy requests to LLM service.
 */
export const proxyLlmServiceApiV1LlmPathOptions6Mutation = (
  options?: Partial<Options<ProxyLlmServiceApiV1LlmPathOptions6Data>>
): UseMutationOptions<
  unknown,
  ProxyLlmServiceApiV1LlmPathOptions6Error,
  Options<ProxyLlmServiceApiV1LlmPathOptions6Data>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    ProxyLlmServiceApiV1LlmPathOptions6Error,
    Options<ProxyLlmServiceApiV1LlmPathOptions6Data>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await proxyLlmServiceApiV1LlmPathOptions6({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getServicesHealthApiV1ServicesHealthGetQueryKey = (
  options?: Options<GetServicesHealthApiV1ServicesHealthGetData>
) => createQueryKey("getServicesHealthApiV1ServicesHealthGet", options);

/**
 * Get Services Health
 * Get health status of all backend services.
 */
export const getServicesHealthApiV1ServicesHealthGetOptions = (
  options?: Options<GetServicesHealthApiV1ServicesHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServicesHealthApiV1ServicesHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServicesHealthApiV1ServicesHealthGetQueryKey(options),
  });
};

export const getServicesStatusApiV1ServicesStatusGetQueryKey = (
  options?: Options<GetServicesStatusApiV1ServicesStatusGetData>
) => createQueryKey("getServicesStatusApiV1ServicesStatusGet", options);

/**
 * Get Services Status
 * Get detailed status of all services.
 */
export const getServicesStatusApiV1ServicesStatusGetOptions = (
  options?: Options<GetServicesStatusApiV1ServicesStatusGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServicesStatusApiV1ServicesStatusGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServicesStatusApiV1ServicesStatusGetQueryKey(options),
  });
};

export const getServiceHealthApiV1ServicesServiceNameHealthGetQueryKey = (
  options: Options<GetServiceHealthApiV1ServicesServiceNameHealthGetData>
) =>
  createQueryKey("getServiceHealthApiV1ServicesServiceNameHealthGet", options);

/**
 * Get Service Health
 * Get health status of a specific service.
 */
export const getServiceHealthApiV1ServicesServiceNameHealthGetOptions = (
  options: Options<GetServiceHealthApiV1ServicesServiceNameHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServiceHealthApiV1ServicesServiceNameHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey:
      getServiceHealthApiV1ServicesServiceNameHealthGetQueryKey(options),
  });
};

export const getServiceMetricsApiV1ServicesServiceNameMetricsGetQueryKey = (
  options: Options<GetServiceMetricsApiV1ServicesServiceNameMetricsGetData>
) =>
  createQueryKey(
    "getServiceMetricsApiV1ServicesServiceNameMetricsGet",
    options
  );

/**
 * Get Service Metrics
 * Get metrics for a specific service.
 */
export const getServiceMetricsApiV1ServicesServiceNameMetricsGetOptions = (
  options: Options<GetServiceMetricsApiV1ServicesServiceNameMetricsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await getServiceMetricsApiV1ServicesServiceNameMetricsGet({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      getServiceMetricsApiV1ServicesServiceNameMetricsGetQueryKey(options),
  });
};
