// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  healthCheckHealthGet,
  metricsMetricsGet,
  rootGet,
  registerApiV1AuthRegisterPost,
  loginApiV1AuthLoginPost,
  getCurrentUserApiV1AuthMeGet,
  refreshTokenApiV1AuthRefreshPost,
  sendSmsApiV1SmsSendPost,
  getSmsStatusApiV1SmsStatusMessageIdGet,
  chatCompletionApiV1LlmChatPost,
  createEmbeddingsApiV1LlmEmbeddingsPost,
  listConfigsApiV1ConfigsGet,
  createConfigApiV1ConfigsPost,
  getConfigApiV1ConfigsConfigIdGet,
  updateConfigApiV1ConfigsConfigIdPut,
  getServicesHealthApiV1ServicesHealthGet,
  getServicesStatusApiV1ServicesStatusGet,
  getServiceHealthApiV1ServicesServiceNameHealthGet,
  getServiceMetricsApiV1ServicesServiceNameMetricsGet,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  HealthCheckHealthGetData,
  MetricsMetricsGetData,
  RootGetData,
  RegisterApiV1AuthRegisterPostData,
  LoginApiV1AuthLoginPostData,
  GetCurrentUserApiV1AuthMeGetData,
  RefreshTokenApiV1AuthRefreshPostData,
  SendSmsApiV1SmsSendPostData,
  GetSmsStatusApiV1SmsStatusMessageIdGetData,
  ChatCompletionApiV1LlmChatPostData,
  CreateEmbeddingsApiV1LlmEmbeddingsPostData,
  ListConfigsApiV1ConfigsGetData,
  CreateConfigApiV1ConfigsPostData,
  GetConfigApiV1ConfigsConfigIdGetData,
  UpdateConfigApiV1ConfigsConfigIdPutData,
  UpdateConfigApiV1ConfigsConfigIdPutError,
  GetServicesHealthApiV1ServicesHealthGetData,
  GetServicesStatusApiV1ServicesStatusGetData,
  GetServiceHealthApiV1ServicesServiceNameHealthGetData,
  GetServiceMetricsApiV1ServicesServiceNameMetricsGetData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const healthCheckHealthGetQueryKey = (
  options?: Options<HealthCheckHealthGetData>
) => createQueryKey("healthCheckHealthGet", options);

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGetOptions = (
  options?: Options<HealthCheckHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthCheckHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckHealthGetQueryKey(options),
  });
};

export const metricsMetricsGetQueryKey = (
  options?: Options<MetricsMetricsGetData>
) => createQueryKey("metricsMetricsGet", options);

/**
 * Metrics
 * Prometheus metrics endpoint.
 */
export const metricsMetricsGetOptions = (
  options?: Options<MetricsMetricsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await metricsMetricsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: metricsMetricsGetQueryKey(options),
  });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) =>
  createQueryKey("rootGet", options);

/**
 * Root
 * Root endpoint.
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rootGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootGetQueryKey(options),
  });
};

export const registerApiV1AuthRegisterPostQueryKey = (
  options?: Options<RegisterApiV1AuthRegisterPostData>
) => createQueryKey("registerApiV1AuthRegisterPost", options);

/**
 * Register
 * Register a new user.
 */
export const registerApiV1AuthRegisterPostOptions = (
  options?: Options<RegisterApiV1AuthRegisterPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await registerApiV1AuthRegisterPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerApiV1AuthRegisterPostQueryKey(options),
  });
};

/**
 * Register
 * Register a new user.
 */
export const registerApiV1AuthRegisterPostMutation = (
  options?: Partial<Options<RegisterApiV1AuthRegisterPostData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<RegisterApiV1AuthRegisterPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<RegisterApiV1AuthRegisterPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await registerApiV1AuthRegisterPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginApiV1AuthLoginPostQueryKey = (
  options?: Options<LoginApiV1AuthLoginPostData>
) => createQueryKey("loginApiV1AuthLoginPost", options);

/**
 * Login
 * User login.
 */
export const loginApiV1AuthLoginPostOptions = (
  options?: Options<LoginApiV1AuthLoginPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginApiV1AuthLoginPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginApiV1AuthLoginPostQueryKey(options),
  });
};

/**
 * Login
 * User login.
 */
export const loginApiV1AuthLoginPostMutation = (
  options?: Partial<Options<LoginApiV1AuthLoginPostData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<LoginApiV1AuthLoginPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<LoginApiV1AuthLoginPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginApiV1AuthLoginPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getCurrentUserApiV1AuthMeGetQueryKey = (
  options?: Options<GetCurrentUserApiV1AuthMeGetData>
) => createQueryKey("getCurrentUserApiV1AuthMeGet", options);

/**
 * Get Current User
 * Get current user info.
 */
export const getCurrentUserApiV1AuthMeGetOptions = (
  options?: Options<GetCurrentUserApiV1AuthMeGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getCurrentUserApiV1AuthMeGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getCurrentUserApiV1AuthMeGetQueryKey(options),
  });
};

export const refreshTokenApiV1AuthRefreshPostQueryKey = (
  options?: Options<RefreshTokenApiV1AuthRefreshPostData>
) => createQueryKey("refreshTokenApiV1AuthRefreshPost", options);

/**
 * Refresh Token
 * Refresh access token.
 */
export const refreshTokenApiV1AuthRefreshPostOptions = (
  options?: Options<RefreshTokenApiV1AuthRefreshPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await refreshTokenApiV1AuthRefreshPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: refreshTokenApiV1AuthRefreshPostQueryKey(options),
  });
};

/**
 * Refresh Token
 * Refresh access token.
 */
export const refreshTokenApiV1AuthRefreshPostMutation = (
  options?: Partial<Options<RefreshTokenApiV1AuthRefreshPostData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<RefreshTokenApiV1AuthRefreshPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<RefreshTokenApiV1AuthRefreshPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await refreshTokenApiV1AuthRefreshPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const sendSmsApiV1SmsSendPostQueryKey = (
  options?: Options<SendSmsApiV1SmsSendPostData>
) => createQueryKey("sendSmsApiV1SmsSendPost", options);

/**
 * Send Sms
 * Send SMS message.
 */
export const sendSmsApiV1SmsSendPostOptions = (
  options?: Options<SendSmsApiV1SmsSendPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await sendSmsApiV1SmsSendPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: sendSmsApiV1SmsSendPostQueryKey(options),
  });
};

/**
 * Send Sms
 * Send SMS message.
 */
export const sendSmsApiV1SmsSendPostMutation = (
  options?: Partial<Options<SendSmsApiV1SmsSendPostData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<SendSmsApiV1SmsSendPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<SendSmsApiV1SmsSendPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await sendSmsApiV1SmsSendPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getSmsStatusApiV1SmsStatusMessageIdGetQueryKey = (
  options: Options<GetSmsStatusApiV1SmsStatusMessageIdGetData>
) => createQueryKey("getSmsStatusApiV1SmsStatusMessageIdGet", options);

/**
 * Get Sms Status
 * Get SMS delivery status.
 */
export const getSmsStatusApiV1SmsStatusMessageIdGetOptions = (
  options: Options<GetSmsStatusApiV1SmsStatusMessageIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getSmsStatusApiV1SmsStatusMessageIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getSmsStatusApiV1SmsStatusMessageIdGetQueryKey(options),
  });
};

export const chatCompletionApiV1LlmChatPostQueryKey = (
  options?: Options<ChatCompletionApiV1LlmChatPostData>
) => createQueryKey("chatCompletionApiV1LlmChatPost", options);

/**
 * Chat Completion
 * Generate chat completion.
 */
export const chatCompletionApiV1LlmChatPostOptions = (
  options?: Options<ChatCompletionApiV1LlmChatPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await chatCompletionApiV1LlmChatPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: chatCompletionApiV1LlmChatPostQueryKey(options),
  });
};

/**
 * Chat Completion
 * Generate chat completion.
 */
export const chatCompletionApiV1LlmChatPostMutation = (
  options?: Partial<Options<ChatCompletionApiV1LlmChatPostData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<ChatCompletionApiV1LlmChatPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<ChatCompletionApiV1LlmChatPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await chatCompletionApiV1LlmChatPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const createEmbeddingsApiV1LlmEmbeddingsPostQueryKey = (
  options?: Options<CreateEmbeddingsApiV1LlmEmbeddingsPostData>
) => createQueryKey("createEmbeddingsApiV1LlmEmbeddingsPost", options);

/**
 * Create Embeddings
 * Create text embeddings.
 */
export const createEmbeddingsApiV1LlmEmbeddingsPostOptions = (
  options?: Options<CreateEmbeddingsApiV1LlmEmbeddingsPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createEmbeddingsApiV1LlmEmbeddingsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createEmbeddingsApiV1LlmEmbeddingsPostQueryKey(options),
  });
};

/**
 * Create Embeddings
 * Create text embeddings.
 */
export const createEmbeddingsApiV1LlmEmbeddingsPostMutation = (
  options?: Partial<Options<CreateEmbeddingsApiV1LlmEmbeddingsPostData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<CreateEmbeddingsApiV1LlmEmbeddingsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<CreateEmbeddingsApiV1LlmEmbeddingsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createEmbeddingsApiV1LlmEmbeddingsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const listConfigsApiV1ConfigsGetQueryKey = (
  options?: Options<ListConfigsApiV1ConfigsGetData>
) => createQueryKey("listConfigsApiV1ConfigsGet", options);

/**
 * List Configs
 * List all configurations.
 */
export const listConfigsApiV1ConfigsGetOptions = (
  options?: Options<ListConfigsApiV1ConfigsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await listConfigsApiV1ConfigsGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: listConfigsApiV1ConfigsGetQueryKey(options),
  });
};

export const createConfigApiV1ConfigsPostQueryKey = (
  options?: Options<CreateConfigApiV1ConfigsPostData>
) => createQueryKey("createConfigApiV1ConfigsPost", options);

/**
 * Create Config
 * Create new configuration.
 */
export const createConfigApiV1ConfigsPostOptions = (
  options?: Options<CreateConfigApiV1ConfigsPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createConfigApiV1ConfigsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createConfigApiV1ConfigsPostQueryKey(options),
  });
};

/**
 * Create Config
 * Create new configuration.
 */
export const createConfigApiV1ConfigsPostMutation = (
  options?: Partial<Options<CreateConfigApiV1ConfigsPostData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<CreateConfigApiV1ConfigsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<CreateConfigApiV1ConfigsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createConfigApiV1ConfigsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getConfigApiV1ConfigsConfigIdGetQueryKey = (
  options: Options<GetConfigApiV1ConfigsConfigIdGetData>
) => createQueryKey("getConfigApiV1ConfigsConfigIdGet", options);

/**
 * Get Config
 * Get configuration by ID.
 */
export const getConfigApiV1ConfigsConfigIdGetOptions = (
  options: Options<GetConfigApiV1ConfigsConfigIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getConfigApiV1ConfigsConfigIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getConfigApiV1ConfigsConfigIdGetQueryKey(options),
  });
};

/**
 * Update Config
 * Update configuration.
 */
export const updateConfigApiV1ConfigsConfigIdPutMutation = (
  options?: Partial<Options<UpdateConfigApiV1ConfigsConfigIdPutData>>
): UseMutationOptions<
  unknown,
  UpdateConfigApiV1ConfigsConfigIdPutError,
  Options<UpdateConfigApiV1ConfigsConfigIdPutData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    UpdateConfigApiV1ConfigsConfigIdPutError,
    Options<UpdateConfigApiV1ConfigsConfigIdPutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await updateConfigApiV1ConfigsConfigIdPut({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getServicesHealthApiV1ServicesHealthGetQueryKey = (
  options?: Options<GetServicesHealthApiV1ServicesHealthGetData>
) => createQueryKey("getServicesHealthApiV1ServicesHealthGet", options);

/**
 * Get Services Health
 * Get health status of all backend services.
 */
export const getServicesHealthApiV1ServicesHealthGetOptions = (
  options?: Options<GetServicesHealthApiV1ServicesHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServicesHealthApiV1ServicesHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServicesHealthApiV1ServicesHealthGetQueryKey(options),
  });
};

export const getServicesStatusApiV1ServicesStatusGetQueryKey = (
  options?: Options<GetServicesStatusApiV1ServicesStatusGetData>
) => createQueryKey("getServicesStatusApiV1ServicesStatusGet", options);

/**
 * Get Services Status
 * Get detailed status of all services.
 */
export const getServicesStatusApiV1ServicesStatusGetOptions = (
  options?: Options<GetServicesStatusApiV1ServicesStatusGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServicesStatusApiV1ServicesStatusGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getServicesStatusApiV1ServicesStatusGetQueryKey(options),
  });
};

export const getServiceHealthApiV1ServicesServiceNameHealthGetQueryKey = (
  options: Options<GetServiceHealthApiV1ServicesServiceNameHealthGetData>
) =>
  createQueryKey("getServiceHealthApiV1ServicesServiceNameHealthGet", options);

/**
 * Get Service Health
 * Get health status of a specific service.
 */
export const getServiceHealthApiV1ServicesServiceNameHealthGetOptions = (
  options: Options<GetServiceHealthApiV1ServicesServiceNameHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getServiceHealthApiV1ServicesServiceNameHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey:
      getServiceHealthApiV1ServicesServiceNameHealthGetQueryKey(options),
  });
};

export const getServiceMetricsApiV1ServicesServiceNameMetricsGetQueryKey = (
  options: Options<GetServiceMetricsApiV1ServicesServiceNameMetricsGetData>
) =>
  createQueryKey(
    "getServiceMetricsApiV1ServicesServiceNameMetricsGet",
    options
  );

/**
 * Get Service Metrics
 * Get metrics for a specific service.
 */
export const getServiceMetricsApiV1ServicesServiceNameMetricsGetOptions = (
  options: Options<GetServiceMetricsApiV1ServicesServiceNameMetricsGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await getServiceMetricsApiV1ServicesServiceNameMetricsGet({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      getServiceMetricsApiV1ServicesServiceNameMetricsGetQueryKey(options),
  });
};
