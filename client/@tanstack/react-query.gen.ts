// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  healthCheckHealthGet,
  rootGet,
  openidConfigurationWellKnownOpenidConfigurationGet,
  jwksWellKnownJwksJsonGet,
  registerUserApiV1AuthRegisterPost,
  loginUserApiV1AuthLoginPost,
  loginUserJsonApiV1AuthLoginJsonPost,
  getUserInfoApiV1AuthUserinfoGet,
  readUserMeApiV1AuthMeGet,
  createOauthClientApiV1Oauth2ClientsPost,
  getOauthClientApiV1Oauth2ClientsClientIdGet,
  authorizeApiV1Oauth2AuthorizeGet,
  getTokenApiV1Oauth2TokenPost,
  verifyNinBvnApiV1IdentityVerifyNinBvnPost,
  getVerificationStatusApiV1IdentityVerificationStatusGet,
} from "../sdk.gen";
import { queryOptions, type UseMutationOptions } from "@tanstack/react-query";
import type {
  HealthCheckHealthGetData,
  RootGetData,
  OpenidConfigurationWellKnownOpenidConfigurationGetData,
  JwksWellKnownJwksJsonGetData,
  RegisterUserApiV1AuthRegisterPostData,
  RegisterUserApiV1AuthRegisterPostError,
  RegisterUserApiV1AuthRegisterPostResponse,
  LoginUserApiV1AuthLoginPostData,
  LoginUserApiV1AuthLoginPostError,
  LoginUserApiV1AuthLoginPostResponse,
  LoginUserJsonApiV1AuthLoginJsonPostData,
  LoginUserJsonApiV1AuthLoginJsonPostError,
  LoginUserJsonApiV1AuthLoginJsonPostResponse,
  GetUserInfoApiV1AuthUserinfoGetData,
  ReadUserMeApiV1AuthMeGetData,
  CreateOauthClientApiV1Oauth2ClientsPostData,
  CreateOauthClientApiV1Oauth2ClientsPostError,
  CreateOauthClientApiV1Oauth2ClientsPostResponse,
  GetOauthClientApiV1Oauth2ClientsClientIdGetData,
  AuthorizeApiV1Oauth2AuthorizeGetData,
  GetTokenApiV1Oauth2TokenPostData,
  GetTokenApiV1Oauth2TokenPostError,
  GetTokenApiV1Oauth2TokenPostResponse,
  VerifyNinBvnApiV1IdentityVerifyNinBvnPostData,
  VerifyNinBvnApiV1IdentityVerifyNinBvnPostError,
  VerifyNinBvnApiV1IdentityVerifyNinBvnPostResponse,
  GetVerificationStatusApiV1IdentityVerificationStatusGetData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: ReadonlyArray<string>;
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: ReadonlyArray<string>
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const healthCheckHealthGetQueryKey = (
  options?: Options<HealthCheckHealthGetData>
) => createQueryKey("healthCheckHealthGet", options);

/**
 * Health Check
 * Health check endpoint.
 */
export const healthCheckHealthGetOptions = (
  options?: Options<HealthCheckHealthGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthCheckHealthGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthCheckHealthGetQueryKey(options),
  });
};

export const rootGetQueryKey = (options?: Options<RootGetData>) =>
  createQueryKey("rootGet", options);

/**
 * Root
 * Root endpoint.
 */
export const rootGetOptions = (options?: Options<RootGetData>) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await rootGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: rootGetQueryKey(options),
  });
};

export const openidConfigurationWellKnownOpenidConfigurationGetQueryKey = (
  options?: Options<OpenidConfigurationWellKnownOpenidConfigurationGetData>
) =>
  createQueryKey("openidConfigurationWellKnownOpenidConfigurationGet", options);

/**
 * Openid Configuration
 * OpenID Connect Discovery endpoint.
 */
export const openidConfigurationWellKnownOpenidConfigurationGetOptions = (
  options?: Options<OpenidConfigurationWellKnownOpenidConfigurationGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await openidConfigurationWellKnownOpenidConfigurationGet(
        {
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        }
      );
      return data;
    },
    queryKey:
      openidConfigurationWellKnownOpenidConfigurationGetQueryKey(options),
  });
};

export const jwksWellKnownJwksJsonGetQueryKey = (
  options?: Options<JwksWellKnownJwksJsonGetData>
) => createQueryKey("jwksWellKnownJwksJsonGet", options);

/**
 * Jwks
 * JSON Web Key Set endpoint.
 */
export const jwksWellKnownJwksJsonGetOptions = (
  options?: Options<JwksWellKnownJwksJsonGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await jwksWellKnownJwksJsonGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: jwksWellKnownJwksJsonGetQueryKey(options),
  });
};

export const registerUserApiV1AuthRegisterPostQueryKey = (
  options: Options<RegisterUserApiV1AuthRegisterPostData>
) => createQueryKey("registerUserApiV1AuthRegisterPost", options);

/**
 * Register User
 * Register a new user.
 */
export const registerUserApiV1AuthRegisterPostOptions = (
  options: Options<RegisterUserApiV1AuthRegisterPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await registerUserApiV1AuthRegisterPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: registerUserApiV1AuthRegisterPostQueryKey(options),
  });
};

/**
 * Register User
 * Register a new user.
 */
export const registerUserApiV1AuthRegisterPostMutation = (
  options?: Partial<Options<RegisterUserApiV1AuthRegisterPostData>>
): UseMutationOptions<
  RegisterUserApiV1AuthRegisterPostResponse,
  RegisterUserApiV1AuthRegisterPostError,
  Options<RegisterUserApiV1AuthRegisterPostData>
> => {
  const mutationOptions: UseMutationOptions<
    RegisterUserApiV1AuthRegisterPostResponse,
    RegisterUserApiV1AuthRegisterPostError,
    Options<RegisterUserApiV1AuthRegisterPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await registerUserApiV1AuthRegisterPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginUserApiV1AuthLoginPostQueryKey = (
  options: Options<LoginUserApiV1AuthLoginPostData>
) => createQueryKey("loginUserApiV1AuthLoginPost", options);

/**
 * Login User
 * OAuth2 compatible token login, get an access token for future requests.
 */
export const loginUserApiV1AuthLoginPostOptions = (
  options: Options<LoginUserApiV1AuthLoginPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginUserApiV1AuthLoginPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginUserApiV1AuthLoginPostQueryKey(options),
  });
};

/**
 * Login User
 * OAuth2 compatible token login, get an access token for future requests.
 */
export const loginUserApiV1AuthLoginPostMutation = (
  options?: Partial<Options<LoginUserApiV1AuthLoginPostData>>
): UseMutationOptions<
  LoginUserApiV1AuthLoginPostResponse,
  LoginUserApiV1AuthLoginPostError,
  Options<LoginUserApiV1AuthLoginPostData>
> => {
  const mutationOptions: UseMutationOptions<
    LoginUserApiV1AuthLoginPostResponse,
    LoginUserApiV1AuthLoginPostError,
    Options<LoginUserApiV1AuthLoginPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginUserApiV1AuthLoginPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const loginUserJsonApiV1AuthLoginJsonPostQueryKey = (
  options: Options<LoginUserJsonApiV1AuthLoginJsonPostData>
) => createQueryKey("loginUserJsonApiV1AuthLoginJsonPost", options);

/**
 * Login User Json
 * Login with JSON payload.
 */
export const loginUserJsonApiV1AuthLoginJsonPostOptions = (
  options: Options<LoginUserJsonApiV1AuthLoginJsonPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await loginUserJsonApiV1AuthLoginJsonPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: loginUserJsonApiV1AuthLoginJsonPostQueryKey(options),
  });
};

/**
 * Login User Json
 * Login with JSON payload.
 */
export const loginUserJsonApiV1AuthLoginJsonPostMutation = (
  options?: Partial<Options<LoginUserJsonApiV1AuthLoginJsonPostData>>
): UseMutationOptions<
  LoginUserJsonApiV1AuthLoginJsonPostResponse,
  LoginUserJsonApiV1AuthLoginJsonPostError,
  Options<LoginUserJsonApiV1AuthLoginJsonPostData>
> => {
  const mutationOptions: UseMutationOptions<
    LoginUserJsonApiV1AuthLoginJsonPostResponse,
    LoginUserJsonApiV1AuthLoginJsonPostError,
    Options<LoginUserJsonApiV1AuthLoginJsonPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await loginUserJsonApiV1AuthLoginJsonPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getUserInfoApiV1AuthUserinfoGetQueryKey = (
  options?: Options<GetUserInfoApiV1AuthUserinfoGetData>
) => createQueryKey("getUserInfoApiV1AuthUserinfoGet", options);

/**
 * Get User Info
 * Get current user information.
 */
export const getUserInfoApiV1AuthUserinfoGetOptions = (
  options?: Options<GetUserInfoApiV1AuthUserinfoGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getUserInfoApiV1AuthUserinfoGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getUserInfoApiV1AuthUserinfoGetQueryKey(options),
  });
};

export const readUserMeApiV1AuthMeGetQueryKey = (
  options?: Options<ReadUserMeApiV1AuthMeGetData>
) => createQueryKey("readUserMeApiV1AuthMeGet", options);

/**
 * Read User Me
 * Get current user.
 */
export const readUserMeApiV1AuthMeGetOptions = (
  options?: Options<ReadUserMeApiV1AuthMeGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await readUserMeApiV1AuthMeGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: readUserMeApiV1AuthMeGetQueryKey(options),
  });
};

export const createOauthClientApiV1Oauth2ClientsPostQueryKey = (
  options: Options<CreateOauthClientApiV1Oauth2ClientsPostData>
) => createQueryKey("createOauthClientApiV1Oauth2ClientsPost", options);

/**
 * Create Oauth Client
 * Create a new OAuth2 client.
 */
export const createOauthClientApiV1Oauth2ClientsPostOptions = (
  options: Options<CreateOauthClientApiV1Oauth2ClientsPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await createOauthClientApiV1Oauth2ClientsPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: createOauthClientApiV1Oauth2ClientsPostQueryKey(options),
  });
};

/**
 * Create Oauth Client
 * Create a new OAuth2 client.
 */
export const createOauthClientApiV1Oauth2ClientsPostMutation = (
  options?: Partial<Options<CreateOauthClientApiV1Oauth2ClientsPostData>>
): UseMutationOptions<
  CreateOauthClientApiV1Oauth2ClientsPostResponse,
  CreateOauthClientApiV1Oauth2ClientsPostError,
  Options<CreateOauthClientApiV1Oauth2ClientsPostData>
> => {
  const mutationOptions: UseMutationOptions<
    CreateOauthClientApiV1Oauth2ClientsPostResponse,
    CreateOauthClientApiV1Oauth2ClientsPostError,
    Options<CreateOauthClientApiV1Oauth2ClientsPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await createOauthClientApiV1Oauth2ClientsPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getOauthClientApiV1Oauth2ClientsClientIdGetQueryKey = (
  options: Options<GetOauthClientApiV1Oauth2ClientsClientIdGetData>
) => createQueryKey("getOauthClientApiV1Oauth2ClientsClientIdGet", options);

/**
 * Get Oauth Client
 * Get OAuth2 client by ID.
 */
export const getOauthClientApiV1Oauth2ClientsClientIdGetOptions = (
  options: Options<GetOauthClientApiV1Oauth2ClientsClientIdGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getOauthClientApiV1Oauth2ClientsClientIdGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getOauthClientApiV1Oauth2ClientsClientIdGetQueryKey(options),
  });
};

export const authorizeApiV1Oauth2AuthorizeGetQueryKey = (
  options: Options<AuthorizeApiV1Oauth2AuthorizeGetData>
) => createQueryKey("authorizeApiV1Oauth2AuthorizeGet", options);

/**
 * Authorize
 * OAuth2 authorization endpoint.
 */
export const authorizeApiV1Oauth2AuthorizeGetOptions = (
  options: Options<AuthorizeApiV1Oauth2AuthorizeGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authorizeApiV1Oauth2AuthorizeGet({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authorizeApiV1Oauth2AuthorizeGetQueryKey(options),
  });
};

export const getTokenApiV1Oauth2TokenPostQueryKey = (
  options: Options<GetTokenApiV1Oauth2TokenPostData>
) => createQueryKey("getTokenApiV1Oauth2TokenPost", options);

/**
 * Get Token
 * OAuth2 token endpoint.
 */
export const getTokenApiV1Oauth2TokenPostOptions = (
  options: Options<GetTokenApiV1Oauth2TokenPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await getTokenApiV1Oauth2TokenPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: getTokenApiV1Oauth2TokenPostQueryKey(options),
  });
};

/**
 * Get Token
 * OAuth2 token endpoint.
 */
export const getTokenApiV1Oauth2TokenPostMutation = (
  options?: Partial<Options<GetTokenApiV1Oauth2TokenPostData>>
): UseMutationOptions<
  GetTokenApiV1Oauth2TokenPostResponse,
  GetTokenApiV1Oauth2TokenPostError,
  Options<GetTokenApiV1Oauth2TokenPostData>
> => {
  const mutationOptions: UseMutationOptions<
    GetTokenApiV1Oauth2TokenPostResponse,
    GetTokenApiV1Oauth2TokenPostError,
    Options<GetTokenApiV1Oauth2TokenPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await getTokenApiV1Oauth2TokenPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const verifyNinBvnApiV1IdentityVerifyNinBvnPostQueryKey = (
  options: Options<VerifyNinBvnApiV1IdentityVerifyNinBvnPostData>
) => createQueryKey("verifyNinBvnApiV1IdentityVerifyNinBvnPost", options);

/**
 * Verify Nin Bvn
 * Verify NIN and/or BVN for the current user.
 */
export const verifyNinBvnApiV1IdentityVerifyNinBvnPostOptions = (
  options: Options<VerifyNinBvnApiV1IdentityVerifyNinBvnPostData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await verifyNinBvnApiV1IdentityVerifyNinBvnPost({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: verifyNinBvnApiV1IdentityVerifyNinBvnPostQueryKey(options),
  });
};

/**
 * Verify Nin Bvn
 * Verify NIN and/or BVN for the current user.
 */
export const verifyNinBvnApiV1IdentityVerifyNinBvnPostMutation = (
  options?: Partial<Options<VerifyNinBvnApiV1IdentityVerifyNinBvnPostData>>
): UseMutationOptions<
  VerifyNinBvnApiV1IdentityVerifyNinBvnPostResponse,
  VerifyNinBvnApiV1IdentityVerifyNinBvnPostError,
  Options<VerifyNinBvnApiV1IdentityVerifyNinBvnPostData>
> => {
  const mutationOptions: UseMutationOptions<
    VerifyNinBvnApiV1IdentityVerifyNinBvnPostResponse,
    VerifyNinBvnApiV1IdentityVerifyNinBvnPostError,
    Options<VerifyNinBvnApiV1IdentityVerifyNinBvnPostData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await verifyNinBvnApiV1IdentityVerifyNinBvnPost({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const getVerificationStatusApiV1IdentityVerificationStatusGetQueryKey = (
  options?: Options<GetVerificationStatusApiV1IdentityVerificationStatusGetData>
) =>
  createQueryKey(
    "getVerificationStatusApiV1IdentityVerificationStatusGet",
    options
  );

/**
 * Get Verification Status
 * Get current user's verification status.
 */
export const getVerificationStatusApiV1IdentityVerificationStatusGetOptions = (
  options?: Options<GetVerificationStatusApiV1IdentityVerificationStatusGetData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await getVerificationStatusApiV1IdentityVerificationStatusGet({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      getVerificationStatusApiV1IdentityVerificationStatusGetQueryKey(options),
  });
};
