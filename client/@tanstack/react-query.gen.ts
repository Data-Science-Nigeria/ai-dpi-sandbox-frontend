// This file is auto-generated by @hey-api/openapi-ts

import {
  type Options,
  apiGetHealthHealthCheck,
  apiGetMetricsMetrics,
  apiGetRootRoot,
  authPostApiV1AuthLoginLogin,
  authPostApiV1AuthLoginJsonLoginJson,
  authGetApiV1AuthMeGetCurrentUserProfile,
  authPostApiV1AuthLogoutLogout,
  authPostApiV1AuthTokenOauthToken,
  authGetApiV1AuthAdminUsersListUsers,
  authPostApiV1AuthAdminUsersCreateUser,
  authDeleteApiV1AuthAdminUsersUserIdDeleteUser,
  authGetApiV1AuthAdminUsersUserIdGetUser,
  authPutApiV1AuthAdminUsersUserIdUpdateUser,
  authPostApiV1AuthAdminUsersUserIdActivateActivateUser,
  authPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUser,
  authPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPassword,
  authPostApiV1AuthOauth2ClientsCreateOauthClient,
  authGetApiV1AuthOauth2ClientsClientIdGetOauthClient,
  authGetApiV1AuthOauth2AuthorizeOauthAuthorize,
  ninPostApiV1NinVerifyVerifyNin,
  ninGetApiV1NinStatusNinGetNinStatus,
  ninPostApiV1NinLookupLookupNin,
  bvnPostApiV1BvnVerifyVerifyBvn,
  bvnGetApiV1BvnStatusBvnGetBvnStatus,
  bvnPostApiV1BvnLookupLookupBvn,
  bvnPostApiV1BvnMatchMatchBvn,
  bvnGetApiV1BvnBanksGetSupportedBanks,
  smsPostApiV1SmsSendSendSms,
  smsPostApiV1SmsBulkSendBulkSms,
  smsPostApiV1SmsOtpGenerateGenerateOtp,
  smsPostApiV1SmsOtpVerifyVerifyOtp,
  smsGetApiV1SmsStatusMessageIdGetMessageStatus,
  smsGetApiV1SmsBalanceGetSmsBalance,
  smsGetApiV1SmsTemplatesGetMessageTemplates,
  aiPostApiV1AiChatChatCompletion,
  aiPostApiV1AiGenerateGenerateContent,
  aiPostApiV1AiAnalyzeAnalyzeText,
  aiPostApiV1AiTranslateTranslateText,
  aiGetApiV1AiModelsGetAvailableModels,
  aiGetApiV1AiConversationsConversationIdGetConversation,
  aiGetApiV1AiUsageGetUsageStatistics,
  healthGetApiV1ServicesHealthGetServicesHealth,
  healthGetApiV1DpiHealthGetDpiHealth,
  healthGetApiV1ServicesServiceNameHealthGetServiceHealth,
  healthGetApiV1ServicesServiceNameMetricsGetServiceMetrics,
  examplesGetApiV1ExamplesNinNinExamples,
  examplesGetApiV1ExamplesSmsSmsExamples,
  examplesGetApiV1ExamplesAuthAuthExamples,
  examplesGetApiV1ExamplesIntegrationIntegrationExamples,
} from "../sdk.gen";
import {
  queryOptions,
  type UseMutationOptions,
  type DefaultError,
} from "@tanstack/react-query";
import type {
  ApiGetHealthHealthCheckData,
  ApiGetMetricsMetricsData,
  ApiGetRootRootData,
  AuthPostApiV1AuthLoginLoginData,
  AuthPostApiV1AuthLoginLoginError,
  AuthPostApiV1AuthLoginJsonLoginJsonData,
  AuthPostApiV1AuthLoginJsonLoginJsonError,
  AuthGetApiV1AuthMeGetCurrentUserProfileData,
  AuthPostApiV1AuthLogoutLogoutData,
  AuthPostApiV1AuthTokenOauthTokenData,
  AuthPostApiV1AuthTokenOauthTokenError,
  AuthGetApiV1AuthAdminUsersListUsersData,
  AuthPostApiV1AuthAdminUsersCreateUserData,
  AuthPostApiV1AuthAdminUsersCreateUserError,
  AuthDeleteApiV1AuthAdminUsersUserIdDeleteUserData,
  AuthDeleteApiV1AuthAdminUsersUserIdDeleteUserError,
  AuthGetApiV1AuthAdminUsersUserIdGetUserData,
  AuthPutApiV1AuthAdminUsersUserIdUpdateUserData,
  AuthPutApiV1AuthAdminUsersUserIdUpdateUserError,
  AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserData,
  AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserError,
  AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserData,
  AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserError,
  AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordData,
  AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordError,
  AuthPostApiV1AuthOauth2ClientsCreateOauthClientData,
  AuthPostApiV1AuthOauth2ClientsCreateOauthClientError,
  AuthGetApiV1AuthOauth2ClientsClientIdGetOauthClientData,
  AuthGetApiV1AuthOauth2AuthorizeOauthAuthorizeData,
  NinPostApiV1NinVerifyVerifyNinData,
  NinPostApiV1NinVerifyVerifyNinError,
  NinGetApiV1NinStatusNinGetNinStatusData,
  NinPostApiV1NinLookupLookupNinData,
  NinPostApiV1NinLookupLookupNinError,
  BvnPostApiV1BvnVerifyVerifyBvnData,
  BvnPostApiV1BvnVerifyVerifyBvnError,
  BvnGetApiV1BvnStatusBvnGetBvnStatusData,
  BvnPostApiV1BvnLookupLookupBvnData,
  BvnPostApiV1BvnLookupLookupBvnError,
  BvnPostApiV1BvnMatchMatchBvnData,
  BvnPostApiV1BvnMatchMatchBvnError,
  BvnGetApiV1BvnBanksGetSupportedBanksData,
  SmsPostApiV1SmsSendSendSmsData,
  SmsPostApiV1SmsSendSendSmsError,
  SmsPostApiV1SmsBulkSendBulkSmsData,
  SmsPostApiV1SmsBulkSendBulkSmsError,
  SmsPostApiV1SmsOtpGenerateGenerateOtpData,
  SmsPostApiV1SmsOtpGenerateGenerateOtpError,
  SmsPostApiV1SmsOtpVerifyVerifyOtpData,
  SmsPostApiV1SmsOtpVerifyVerifyOtpError,
  SmsGetApiV1SmsStatusMessageIdGetMessageStatusData,
  SmsGetApiV1SmsBalanceGetSmsBalanceData,
  SmsGetApiV1SmsTemplatesGetMessageTemplatesData,
  AiPostApiV1AiChatChatCompletionData,
  AiPostApiV1AiChatChatCompletionError,
  AiPostApiV1AiGenerateGenerateContentData,
  AiPostApiV1AiGenerateGenerateContentError,
  AiPostApiV1AiAnalyzeAnalyzeTextData,
  AiPostApiV1AiAnalyzeAnalyzeTextError,
  AiPostApiV1AiTranslateTranslateTextData,
  AiPostApiV1AiTranslateTranslateTextError,
  AiGetApiV1AiModelsGetAvailableModelsData,
  AiGetApiV1AiConversationsConversationIdGetConversationData,
  AiGetApiV1AiUsageGetUsageStatisticsData,
  HealthGetApiV1ServicesHealthGetServicesHealthData,
  HealthGetApiV1DpiHealthGetDpiHealthData,
  HealthGetApiV1ServicesServiceNameHealthGetServiceHealthData,
  HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsData,
  ExamplesGetApiV1ExamplesNinNinExamplesData,
  ExamplesGetApiV1ExamplesSmsSmsExamplesData,
  ExamplesGetApiV1ExamplesAuthAuthExamplesData,
  ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesData,
} from "../types.gen";
import { client as _heyApiClient } from "../client.gen";

export type QueryKey<TOptions extends Options> = [
  Pick<TOptions, "baseUrl" | "body" | "headers" | "path" | "query"> & {
    _id: string;
    _infinite?: boolean;
    tags?: readonly string[];
  },
];

const createQueryKey = <TOptions extends Options>(
  id: string,
  options?: TOptions,
  infinite?: boolean,
  tags?: readonly string[]
): [QueryKey<TOptions>[0]] => {
  const params: QueryKey<TOptions>[0] = {
    _id: id,
    baseUrl:
      options?.baseUrl ||
      (options?.client ?? _heyApiClient).getConfig().baseUrl,
  } as QueryKey<TOptions>[0];
  if (infinite) {
    params._infinite = infinite;
  }
  if (tags) {
    params.tags = tags;
  }
  if (options?.body) {
    params.body = options.body;
  }
  if (options?.headers) {
    params.headers = options.headers;
  }
  if (options?.path) {
    params.path = options.path;
  }
  if (options?.query) {
    params.query = options.query;
  }
  return [params];
};

export const apiGetHealthHealthCheckQueryKey = (
  options?: Options<ApiGetHealthHealthCheckData>
) => createQueryKey("apiGetHealthHealthCheck", options);

/**
 * Health Check
 * Health check endpoint.
 */
export const apiGetHealthHealthCheckOptions = (
  options?: Options<ApiGetHealthHealthCheckData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetHealthHealthCheck({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetHealthHealthCheckQueryKey(options),
  });
};

export const apiGetMetricsMetricsQueryKey = (
  options?: Options<ApiGetMetricsMetricsData>
) => createQueryKey("apiGetMetricsMetrics", options);

/**
 * Metrics
 * Prometheus metrics endpoint.
 */
export const apiGetMetricsMetricsOptions = (
  options?: Options<ApiGetMetricsMetricsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetMetricsMetrics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetMetricsMetricsQueryKey(options),
  });
};

export const apiGetRootRootQueryKey = (options?: Options<ApiGetRootRootData>) =>
  createQueryKey("apiGetRootRoot", options);

/**
 * Root
 * Root endpoint.
 */
export const apiGetRootRootOptions = (
  options?: Options<ApiGetRootRootData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await apiGetRootRoot({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: apiGetRootRootQueryKey(options),
  });
};

export const authPostApiV1AuthLoginLoginQueryKey = (
  options: Options<AuthPostApiV1AuthLoginLoginData>
) => createQueryKey("authPostApiV1AuthLoginLogin", options);

/**
 * Login
 * üîê OAuth2 Compatible Login
 */
export const authPostApiV1AuthLoginLoginOptions = (
  options: Options<AuthPostApiV1AuthLoginLoginData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authPostApiV1AuthLoginLogin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authPostApiV1AuthLoginLoginQueryKey(options),
  });
};

/**
 * Login
 * üîê OAuth2 Compatible Login
 */
export const authPostApiV1AuthLoginLoginMutation = (
  options?: Partial<Options<AuthPostApiV1AuthLoginLoginData>>
): UseMutationOptions<
  unknown,
  AuthPostApiV1AuthLoginLoginError,
  Options<AuthPostApiV1AuthLoginLoginData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthPostApiV1AuthLoginLoginError,
    Options<AuthPostApiV1AuthLoginLoginData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authPostApiV1AuthLoginLogin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authPostApiV1AuthLoginJsonLoginJsonQueryKey = (
  options: Options<AuthPostApiV1AuthLoginJsonLoginJsonData>
) => createQueryKey("authPostApiV1AuthLoginJsonLoginJson", options);

/**
 * Login Json
 * üöÄ JSON Login for Nigerian Startups
 */
export const authPostApiV1AuthLoginJsonLoginJsonOptions = (
  options: Options<AuthPostApiV1AuthLoginJsonLoginJsonData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authPostApiV1AuthLoginJsonLoginJson({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authPostApiV1AuthLoginJsonLoginJsonQueryKey(options),
  });
};

/**
 * Login Json
 * üöÄ JSON Login for Nigerian Startups
 */
export const authPostApiV1AuthLoginJsonLoginJsonMutation = (
  options?: Partial<Options<AuthPostApiV1AuthLoginJsonLoginJsonData>>
): UseMutationOptions<
  unknown,
  AuthPostApiV1AuthLoginJsonLoginJsonError,
  Options<AuthPostApiV1AuthLoginJsonLoginJsonData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthPostApiV1AuthLoginJsonLoginJsonError,
    Options<AuthPostApiV1AuthLoginJsonLoginJsonData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authPostApiV1AuthLoginJsonLoginJson({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authGetApiV1AuthMeGetCurrentUserProfileQueryKey = (
  options?: Options<AuthGetApiV1AuthMeGetCurrentUserProfileData>
) => createQueryKey("authGetApiV1AuthMeGetCurrentUserProfile", options);

/**
 * Get Current User Profile
 * üë§ Get Current User Profile
 */
export const authGetApiV1AuthMeGetCurrentUserProfileOptions = (
  options?: Options<AuthGetApiV1AuthMeGetCurrentUserProfileData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authGetApiV1AuthMeGetCurrentUserProfile({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authGetApiV1AuthMeGetCurrentUserProfileQueryKey(options),
  });
};

export const authPostApiV1AuthLogoutLogoutQueryKey = (
  options?: Options<AuthPostApiV1AuthLogoutLogoutData>
) => createQueryKey("authPostApiV1AuthLogoutLogout", options);

/**
 * Logout
 * üö™ User Logout
 */
export const authPostApiV1AuthLogoutLogoutOptions = (
  options?: Options<AuthPostApiV1AuthLogoutLogoutData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authPostApiV1AuthLogoutLogout({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authPostApiV1AuthLogoutLogoutQueryKey(options),
  });
};

/**
 * Logout
 * üö™ User Logout
 */
export const authPostApiV1AuthLogoutLogoutMutation = (
  options?: Partial<Options<AuthPostApiV1AuthLogoutLogoutData>>
): UseMutationOptions<
  unknown,
  DefaultError,
  Options<AuthPostApiV1AuthLogoutLogoutData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    DefaultError,
    Options<AuthPostApiV1AuthLogoutLogoutData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authPostApiV1AuthLogoutLogout({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authPostApiV1AuthTokenOauthTokenQueryKey = (
  options: Options<AuthPostApiV1AuthTokenOauthTokenData>
) => createQueryKey("authPostApiV1AuthTokenOauthToken", options);

/**
 * Oauth Token
 * üîë OAuth2 Token Endpoint
 */
export const authPostApiV1AuthTokenOauthTokenOptions = (
  options: Options<AuthPostApiV1AuthTokenOauthTokenData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authPostApiV1AuthTokenOauthToken({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authPostApiV1AuthTokenOauthTokenQueryKey(options),
  });
};

/**
 * Oauth Token
 * üîë OAuth2 Token Endpoint
 */
export const authPostApiV1AuthTokenOauthTokenMutation = (
  options?: Partial<Options<AuthPostApiV1AuthTokenOauthTokenData>>
): UseMutationOptions<
  unknown,
  AuthPostApiV1AuthTokenOauthTokenError,
  Options<AuthPostApiV1AuthTokenOauthTokenData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthPostApiV1AuthTokenOauthTokenError,
    Options<AuthPostApiV1AuthTokenOauthTokenData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authPostApiV1AuthTokenOauthToken({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authGetApiV1AuthAdminUsersListUsersQueryKey = (
  options?: Options<AuthGetApiV1AuthAdminUsersListUsersData>
) => createQueryKey("authGetApiV1AuthAdminUsersListUsers", options);

/**
 * List Users
 * üìã List All Users (Admin Only)
 */
export const authGetApiV1AuthAdminUsersListUsersOptions = (
  options?: Options<AuthGetApiV1AuthAdminUsersListUsersData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authGetApiV1AuthAdminUsersListUsers({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authGetApiV1AuthAdminUsersListUsersQueryKey(options),
  });
};

export const authPostApiV1AuthAdminUsersCreateUserQueryKey = (
  options: Options<AuthPostApiV1AuthAdminUsersCreateUserData>
) => createQueryKey("authPostApiV1AuthAdminUsersCreateUser", options);

/**
 * Create User
 * üë• Create User Account (Admin Only)
 */
export const authPostApiV1AuthAdminUsersCreateUserOptions = (
  options: Options<AuthPostApiV1AuthAdminUsersCreateUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authPostApiV1AuthAdminUsersCreateUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authPostApiV1AuthAdminUsersCreateUserQueryKey(options),
  });
};

/**
 * Create User
 * üë• Create User Account (Admin Only)
 */
export const authPostApiV1AuthAdminUsersCreateUserMutation = (
  options?: Partial<Options<AuthPostApiV1AuthAdminUsersCreateUserData>>
): UseMutationOptions<
  unknown,
  AuthPostApiV1AuthAdminUsersCreateUserError,
  Options<AuthPostApiV1AuthAdminUsersCreateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthPostApiV1AuthAdminUsersCreateUserError,
    Options<AuthPostApiV1AuthAdminUsersCreateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authPostApiV1AuthAdminUsersCreateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

/**
 * Delete User
 * üóëÔ∏è Delete User (Admin Only)
 */
export const authDeleteApiV1AuthAdminUsersUserIdDeleteUserMutation = (
  options?: Partial<Options<AuthDeleteApiV1AuthAdminUsersUserIdDeleteUserData>>
): UseMutationOptions<
  unknown,
  AuthDeleteApiV1AuthAdminUsersUserIdDeleteUserError,
  Options<AuthDeleteApiV1AuthAdminUsersUserIdDeleteUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthDeleteApiV1AuthAdminUsersUserIdDeleteUserError,
    Options<AuthDeleteApiV1AuthAdminUsersUserIdDeleteUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authDeleteApiV1AuthAdminUsersUserIdDeleteUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authGetApiV1AuthAdminUsersUserIdGetUserQueryKey = (
  options: Options<AuthGetApiV1AuthAdminUsersUserIdGetUserData>
) => createQueryKey("authGetApiV1AuthAdminUsersUserIdGetUser", options);

/**
 * Get User
 * üë§ Get User by ID (Admin Only)
 */
export const authGetApiV1AuthAdminUsersUserIdGetUserOptions = (
  options: Options<AuthGetApiV1AuthAdminUsersUserIdGetUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authGetApiV1AuthAdminUsersUserIdGetUser({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authGetApiV1AuthAdminUsersUserIdGetUserQueryKey(options),
  });
};

/**
 * Update User
 * ‚úèÔ∏è Update User (Admin Only)
 */
export const authPutApiV1AuthAdminUsersUserIdUpdateUserMutation = (
  options?: Partial<Options<AuthPutApiV1AuthAdminUsersUserIdUpdateUserData>>
): UseMutationOptions<
  unknown,
  AuthPutApiV1AuthAdminUsersUserIdUpdateUserError,
  Options<AuthPutApiV1AuthAdminUsersUserIdUpdateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthPutApiV1AuthAdminUsersUserIdUpdateUserError,
    Options<AuthPutApiV1AuthAdminUsersUserIdUpdateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authPutApiV1AuthAdminUsersUserIdUpdateUser({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authPostApiV1AuthAdminUsersUserIdActivateActivateUserQueryKey = (
  options: Options<AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserData>
) =>
  createQueryKey(
    "authPostApiV1AuthAdminUsersUserIdActivateActivateUser",
    options
  );

/**
 * Activate User
 * ‚úÖ Activate User Account (Admin Only)
 */
export const authPostApiV1AuthAdminUsersUserIdActivateActivateUserOptions = (
  options: Options<AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await authPostApiV1AuthAdminUsersUserIdActivateActivateUser({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      authPostApiV1AuthAdminUsersUserIdActivateActivateUserQueryKey(options),
  });
};

/**
 * Activate User
 * ‚úÖ Activate User Account (Admin Only)
 */
export const authPostApiV1AuthAdminUsersUserIdActivateActivateUserMutation = (
  options?: Partial<
    Options<AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserData>
  >
): UseMutationOptions<
  unknown,
  AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserError,
  Options<AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserError,
    Options<AuthPostApiV1AuthAdminUsersUserIdActivateActivateUserData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } =
        await authPostApiV1AuthAdminUsersUserIdActivateActivateUser({
          ...options,
          ...localOptions,
          throwOnError: true,
        });
      return data;
    },
  };
  return mutationOptions;
};

export const authPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserQueryKey =
  (
    options: Options<AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserData>
  ) =>
    createQueryKey(
      "authPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUser",
      options
    );

/**
 * Deactivate User
 * ‚ùå Deactivate User Account (Admin Only)
 */
export const authPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserOptions =
  (
    options: Options<AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await authPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUser({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          });
        return data;
      },
      queryKey:
        authPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserQueryKey(
          options
        ),
    });
  };

/**
 * Deactivate User
 * ‚ùå Deactivate User Account (Admin Only)
 */
export const authPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserMutation =
  (
    options?: Partial<
      Options<AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserData>
    >
  ): UseMutationOptions<
    unknown,
    AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserError,
    Options<AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserData>
  > => {
    const mutationOptions: UseMutationOptions<
      unknown,
      AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserError,
      Options<AuthPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUserData>
    > = {
      mutationFn: async (localOptions) => {
        const { data } =
          await authPostApiV1AuthAdminUsersUserIdDeactivateDeactivateUser({
            ...options,
            ...localOptions,
            throwOnError: true,
          });
        return data;
      },
    };
    return mutationOptions;
  };

export const authPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordQueryKey =
  (
    options: Options<AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordData>
  ) =>
    createQueryKey(
      "authPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPassword",
      options
    );

/**
 * Reset User Password
 * üîë Reset User Password (Admin Only)
 */
export const authPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordOptions =
  (
    options: Options<AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await authPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPassword(
            {
              ...options,
              ...queryKey[0],
              signal,
              throwOnError: true,
            }
          );
        return data;
      },
      queryKey:
        authPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordQueryKey(
          options
        ),
    });
  };

/**
 * Reset User Password
 * üîë Reset User Password (Admin Only)
 */
export const authPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordMutation =
  (
    options?: Partial<
      Options<AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordData>
    >
  ): UseMutationOptions<
    unknown,
    AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordError,
    Options<AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordData>
  > => {
    const mutationOptions: UseMutationOptions<
      unknown,
      AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordError,
      Options<AuthPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPasswordData>
    > = {
      mutationFn: async (localOptions) => {
        const { data } =
          await authPostApiV1AuthAdminUsersUserIdResetPasswordResetUserPassword(
            {
              ...options,
              ...localOptions,
              throwOnError: true,
            }
          );
        return data;
      },
    };
    return mutationOptions;
  };

export const authPostApiV1AuthOauth2ClientsCreateOauthClientQueryKey = (
  options: Options<AuthPostApiV1AuthOauth2ClientsCreateOauthClientData>
) => createQueryKey("authPostApiV1AuthOauth2ClientsCreateOauthClient", options);

/**
 * Create Oauth Client
 * üîó Create OAuth2 Client
 */
export const authPostApiV1AuthOauth2ClientsCreateOauthClientOptions = (
  options: Options<AuthPostApiV1AuthOauth2ClientsCreateOauthClientData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authPostApiV1AuthOauth2ClientsCreateOauthClient({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authPostApiV1AuthOauth2ClientsCreateOauthClientQueryKey(options),
  });
};

/**
 * Create Oauth Client
 * üîó Create OAuth2 Client
 */
export const authPostApiV1AuthOauth2ClientsCreateOauthClientMutation = (
  options?: Partial<
    Options<AuthPostApiV1AuthOauth2ClientsCreateOauthClientData>
  >
): UseMutationOptions<
  unknown,
  AuthPostApiV1AuthOauth2ClientsCreateOauthClientError,
  Options<AuthPostApiV1AuthOauth2ClientsCreateOauthClientData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AuthPostApiV1AuthOauth2ClientsCreateOauthClientError,
    Options<AuthPostApiV1AuthOauth2ClientsCreateOauthClientData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await authPostApiV1AuthOauth2ClientsCreateOauthClient({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const authGetApiV1AuthOauth2ClientsClientIdGetOauthClientQueryKey = (
  options: Options<AuthGetApiV1AuthOauth2ClientsClientIdGetOauthClientData>
) =>
  createQueryKey(
    "authGetApiV1AuthOauth2ClientsClientIdGetOauthClient",
    options
  );

/**
 * Get Oauth Client
 * üîç Get OAuth2 Client
 */
export const authGetApiV1AuthOauth2ClientsClientIdGetOauthClientOptions = (
  options: Options<AuthGetApiV1AuthOauth2ClientsClientIdGetOauthClientData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await authGetApiV1AuthOauth2ClientsClientIdGetOauthClient({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      authGetApiV1AuthOauth2ClientsClientIdGetOauthClientQueryKey(options),
  });
};

export const authGetApiV1AuthOauth2AuthorizeOauthAuthorizeQueryKey = (
  options?: Options<AuthGetApiV1AuthOauth2AuthorizeOauthAuthorizeData>
) => createQueryKey("authGetApiV1AuthOauth2AuthorizeOauthAuthorize", options);

/**
 * Oauth Authorize
 * üîê OAuth2 Authorization Endpoint
 */
export const authGetApiV1AuthOauth2AuthorizeOauthAuthorizeOptions = (
  options?: Options<AuthGetApiV1AuthOauth2AuthorizeOauthAuthorizeData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await authGetApiV1AuthOauth2AuthorizeOauthAuthorize({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: authGetApiV1AuthOauth2AuthorizeOauthAuthorizeQueryKey(options),
  });
};

export const ninPostApiV1NinVerifyVerifyNinQueryKey = (
  options: Options<NinPostApiV1NinVerifyVerifyNinData>
) => createQueryKey("ninPostApiV1NinVerifyVerifyNin", options);

/**
 * Verify Nin
 * üá≥üá¨ Verify Nigerian Identity Number (NIN)
 */
export const ninPostApiV1NinVerifyVerifyNinOptions = (
  options: Options<NinPostApiV1NinVerifyVerifyNinData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ninPostApiV1NinVerifyVerifyNin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: ninPostApiV1NinVerifyVerifyNinQueryKey(options),
  });
};

/**
 * Verify Nin
 * üá≥üá¨ Verify Nigerian Identity Number (NIN)
 */
export const ninPostApiV1NinVerifyVerifyNinMutation = (
  options?: Partial<Options<NinPostApiV1NinVerifyVerifyNinData>>
): UseMutationOptions<
  unknown,
  NinPostApiV1NinVerifyVerifyNinError,
  Options<NinPostApiV1NinVerifyVerifyNinData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    NinPostApiV1NinVerifyVerifyNinError,
    Options<NinPostApiV1NinVerifyVerifyNinData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ninPostApiV1NinVerifyVerifyNin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const ninGetApiV1NinStatusNinGetNinStatusQueryKey = (
  options: Options<NinGetApiV1NinStatusNinGetNinStatusData>
) => createQueryKey("ninGetApiV1NinStatusNinGetNinStatus", options);

/**
 * Get Nin Status
 * üìä Get NIN Verification Status
 */
export const ninGetApiV1NinStatusNinGetNinStatusOptions = (
  options: Options<NinGetApiV1NinStatusNinGetNinStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ninGetApiV1NinStatusNinGetNinStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: ninGetApiV1NinStatusNinGetNinStatusQueryKey(options),
  });
};

export const ninPostApiV1NinLookupLookupNinQueryKey = (
  options: Options<NinPostApiV1NinLookupLookupNinData>
) => createQueryKey("ninPostApiV1NinLookupLookupNin", options);

/**
 * Lookup Nin
 * üîç Basic NIN Lookup
 */
export const ninPostApiV1NinLookupLookupNinOptions = (
  options: Options<NinPostApiV1NinLookupLookupNinData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await ninPostApiV1NinLookupLookupNin({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: ninPostApiV1NinLookupLookupNinQueryKey(options),
  });
};

/**
 * Lookup Nin
 * üîç Basic NIN Lookup
 */
export const ninPostApiV1NinLookupLookupNinMutation = (
  options?: Partial<Options<NinPostApiV1NinLookupLookupNinData>>
): UseMutationOptions<
  unknown,
  NinPostApiV1NinLookupLookupNinError,
  Options<NinPostApiV1NinLookupLookupNinData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    NinPostApiV1NinLookupLookupNinError,
    Options<NinPostApiV1NinLookupLookupNinData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await ninPostApiV1NinLookupLookupNin({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const bvnPostApiV1BvnVerifyVerifyBvnQueryKey = (
  options: Options<BvnPostApiV1BvnVerifyVerifyBvnData>
) => createQueryKey("bvnPostApiV1BvnVerifyVerifyBvn", options);

/**
 * Verify Bvn
 * üá≥üá¨ Verify Bank Verification Number (BVN)
 */
export const bvnPostApiV1BvnVerifyVerifyBvnOptions = (
  options: Options<BvnPostApiV1BvnVerifyVerifyBvnData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await bvnPostApiV1BvnVerifyVerifyBvn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: bvnPostApiV1BvnVerifyVerifyBvnQueryKey(options),
  });
};

/**
 * Verify Bvn
 * üá≥üá¨ Verify Bank Verification Number (BVN)
 */
export const bvnPostApiV1BvnVerifyVerifyBvnMutation = (
  options?: Partial<Options<BvnPostApiV1BvnVerifyVerifyBvnData>>
): UseMutationOptions<
  unknown,
  BvnPostApiV1BvnVerifyVerifyBvnError,
  Options<BvnPostApiV1BvnVerifyVerifyBvnData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    BvnPostApiV1BvnVerifyVerifyBvnError,
    Options<BvnPostApiV1BvnVerifyVerifyBvnData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bvnPostApiV1BvnVerifyVerifyBvn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const bvnGetApiV1BvnStatusBvnGetBvnStatusQueryKey = (
  options: Options<BvnGetApiV1BvnStatusBvnGetBvnStatusData>
) => createQueryKey("bvnGetApiV1BvnStatusBvnGetBvnStatus", options);

/**
 * Get Bvn Status
 * üìä Get BVN Verification Status
 */
export const bvnGetApiV1BvnStatusBvnGetBvnStatusOptions = (
  options: Options<BvnGetApiV1BvnStatusBvnGetBvnStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await bvnGetApiV1BvnStatusBvnGetBvnStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: bvnGetApiV1BvnStatusBvnGetBvnStatusQueryKey(options),
  });
};

export const bvnPostApiV1BvnLookupLookupBvnQueryKey = (
  options: Options<BvnPostApiV1BvnLookupLookupBvnData>
) => createQueryKey("bvnPostApiV1BvnLookupLookupBvn", options);

/**
 * Lookup Bvn
 * üîç Basic BVN Lookup
 */
export const bvnPostApiV1BvnLookupLookupBvnOptions = (
  options: Options<BvnPostApiV1BvnLookupLookupBvnData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await bvnPostApiV1BvnLookupLookupBvn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: bvnPostApiV1BvnLookupLookupBvnQueryKey(options),
  });
};

/**
 * Lookup Bvn
 * üîç Basic BVN Lookup
 */
export const bvnPostApiV1BvnLookupLookupBvnMutation = (
  options?: Partial<Options<BvnPostApiV1BvnLookupLookupBvnData>>
): UseMutationOptions<
  unknown,
  BvnPostApiV1BvnLookupLookupBvnError,
  Options<BvnPostApiV1BvnLookupLookupBvnData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    BvnPostApiV1BvnLookupLookupBvnError,
    Options<BvnPostApiV1BvnLookupLookupBvnData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bvnPostApiV1BvnLookupLookupBvn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const bvnPostApiV1BvnMatchMatchBvnQueryKey = (
  options: Options<BvnPostApiV1BvnMatchMatchBvnData>
) => createQueryKey("bvnPostApiV1BvnMatchMatchBvn", options);

/**
 * Match Bvn
 * üîó Match BVN with User Data
 */
export const bvnPostApiV1BvnMatchMatchBvnOptions = (
  options: Options<BvnPostApiV1BvnMatchMatchBvnData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await bvnPostApiV1BvnMatchMatchBvn({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: bvnPostApiV1BvnMatchMatchBvnQueryKey(options),
  });
};

/**
 * Match Bvn
 * üîó Match BVN with User Data
 */
export const bvnPostApiV1BvnMatchMatchBvnMutation = (
  options?: Partial<Options<BvnPostApiV1BvnMatchMatchBvnData>>
): UseMutationOptions<
  unknown,
  BvnPostApiV1BvnMatchMatchBvnError,
  Options<BvnPostApiV1BvnMatchMatchBvnData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    BvnPostApiV1BvnMatchMatchBvnError,
    Options<BvnPostApiV1BvnMatchMatchBvnData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await bvnPostApiV1BvnMatchMatchBvn({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const bvnGetApiV1BvnBanksGetSupportedBanksQueryKey = (
  options?: Options<BvnGetApiV1BvnBanksGetSupportedBanksData>
) => createQueryKey("bvnGetApiV1BvnBanksGetSupportedBanks", options);

/**
 * Get Supported Banks
 * üè¶ Get Supported Nigerian Banks
 */
export const bvnGetApiV1BvnBanksGetSupportedBanksOptions = (
  options?: Options<BvnGetApiV1BvnBanksGetSupportedBanksData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await bvnGetApiV1BvnBanksGetSupportedBanks({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: bvnGetApiV1BvnBanksGetSupportedBanksQueryKey(options),
  });
};

export const smsPostApiV1SmsSendSendSmsQueryKey = (
  options: Options<SmsPostApiV1SmsSendSendSmsData>
) => createQueryKey("smsPostApiV1SmsSendSendSms", options);

/**
 * Send Sms
 * üì± Send SMS to Nigerian Number
 */
export const smsPostApiV1SmsSendSendSmsOptions = (
  options: Options<SmsPostApiV1SmsSendSendSmsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsPostApiV1SmsSendSendSms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsPostApiV1SmsSendSendSmsQueryKey(options),
  });
};

/**
 * Send Sms
 * üì± Send SMS to Nigerian Number
 */
export const smsPostApiV1SmsSendSendSmsMutation = (
  options?: Partial<Options<SmsPostApiV1SmsSendSendSmsData>>
): UseMutationOptions<
  unknown,
  SmsPostApiV1SmsSendSendSmsError,
  Options<SmsPostApiV1SmsSendSendSmsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SmsPostApiV1SmsSendSendSmsError,
    Options<SmsPostApiV1SmsSendSendSmsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await smsPostApiV1SmsSendSendSms({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const smsPostApiV1SmsBulkSendBulkSmsQueryKey = (
  options: Options<SmsPostApiV1SmsBulkSendBulkSmsData>
) => createQueryKey("smsPostApiV1SmsBulkSendBulkSms", options);

/**
 * Send Bulk Sms
 * üì§ Send Bulk SMS Messages
 */
export const smsPostApiV1SmsBulkSendBulkSmsOptions = (
  options: Options<SmsPostApiV1SmsBulkSendBulkSmsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsPostApiV1SmsBulkSendBulkSms({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsPostApiV1SmsBulkSendBulkSmsQueryKey(options),
  });
};

/**
 * Send Bulk Sms
 * üì§ Send Bulk SMS Messages
 */
export const smsPostApiV1SmsBulkSendBulkSmsMutation = (
  options?: Partial<Options<SmsPostApiV1SmsBulkSendBulkSmsData>>
): UseMutationOptions<
  unknown,
  SmsPostApiV1SmsBulkSendBulkSmsError,
  Options<SmsPostApiV1SmsBulkSendBulkSmsData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SmsPostApiV1SmsBulkSendBulkSmsError,
    Options<SmsPostApiV1SmsBulkSendBulkSmsData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await smsPostApiV1SmsBulkSendBulkSms({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const smsPostApiV1SmsOtpGenerateGenerateOtpQueryKey = (
  options: Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>
) => createQueryKey("smsPostApiV1SmsOtpGenerateGenerateOtp", options);

/**
 * Generate Otp
 * üîê Generate and Send OTP
 */
export const smsPostApiV1SmsOtpGenerateGenerateOtpOptions = (
  options: Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsPostApiV1SmsOtpGenerateGenerateOtp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsPostApiV1SmsOtpGenerateGenerateOtpQueryKey(options),
  });
};

/**
 * Generate Otp
 * üîê Generate and Send OTP
 */
export const smsPostApiV1SmsOtpGenerateGenerateOtpMutation = (
  options?: Partial<Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>>
): UseMutationOptions<
  unknown,
  SmsPostApiV1SmsOtpGenerateGenerateOtpError,
  Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SmsPostApiV1SmsOtpGenerateGenerateOtpError,
    Options<SmsPostApiV1SmsOtpGenerateGenerateOtpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await smsPostApiV1SmsOtpGenerateGenerateOtp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const smsPostApiV1SmsOtpVerifyVerifyOtpQueryKey = (
  options: Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>
) => createQueryKey("smsPostApiV1SmsOtpVerifyVerifyOtp", options);

/**
 * Verify Otp
 * ‚úÖ Verify OTP Code
 */
export const smsPostApiV1SmsOtpVerifyVerifyOtpOptions = (
  options: Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsPostApiV1SmsOtpVerifyVerifyOtp({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsPostApiV1SmsOtpVerifyVerifyOtpQueryKey(options),
  });
};

/**
 * Verify Otp
 * ‚úÖ Verify OTP Code
 */
export const smsPostApiV1SmsOtpVerifyVerifyOtpMutation = (
  options?: Partial<Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>>
): UseMutationOptions<
  unknown,
  SmsPostApiV1SmsOtpVerifyVerifyOtpError,
  Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    SmsPostApiV1SmsOtpVerifyVerifyOtpError,
    Options<SmsPostApiV1SmsOtpVerifyVerifyOtpData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await smsPostApiV1SmsOtpVerifyVerifyOtp({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const smsGetApiV1SmsStatusMessageIdGetMessageStatusQueryKey = (
  options: Options<SmsGetApiV1SmsStatusMessageIdGetMessageStatusData>
) => createQueryKey("smsGetApiV1SmsStatusMessageIdGetMessageStatus", options);

/**
 * Get Message Status
 * üìä Check Message Delivery Status
 */
export const smsGetApiV1SmsStatusMessageIdGetMessageStatusOptions = (
  options: Options<SmsGetApiV1SmsStatusMessageIdGetMessageStatusData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsGetApiV1SmsStatusMessageIdGetMessageStatus({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsGetApiV1SmsStatusMessageIdGetMessageStatusQueryKey(options),
  });
};

export const smsGetApiV1SmsBalanceGetSmsBalanceQueryKey = (
  options?: Options<SmsGetApiV1SmsBalanceGetSmsBalanceData>
) => createQueryKey("smsGetApiV1SmsBalanceGetSmsBalance", options);

/**
 * Get Sms Balance
 * üí∞ Check SMS Credit Balance
 */
export const smsGetApiV1SmsBalanceGetSmsBalanceOptions = (
  options?: Options<SmsGetApiV1SmsBalanceGetSmsBalanceData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsGetApiV1SmsBalanceGetSmsBalance({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsGetApiV1SmsBalanceGetSmsBalanceQueryKey(options),
  });
};

export const smsGetApiV1SmsTemplatesGetMessageTemplatesQueryKey = (
  options?: Options<SmsGetApiV1SmsTemplatesGetMessageTemplatesData>
) => createQueryKey("smsGetApiV1SmsTemplatesGetMessageTemplates", options);

/**
 * Get Message Templates
 * üìù Get Message Templates
 */
export const smsGetApiV1SmsTemplatesGetMessageTemplatesOptions = (
  options?: Options<SmsGetApiV1SmsTemplatesGetMessageTemplatesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await smsGetApiV1SmsTemplatesGetMessageTemplates({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: smsGetApiV1SmsTemplatesGetMessageTemplatesQueryKey(options),
  });
};

export const aiPostApiV1AiChatChatCompletionQueryKey = (
  options: Options<AiPostApiV1AiChatChatCompletionData>
) => createQueryKey("aiPostApiV1AiChatChatCompletion", options);

/**
 * Chat Completion
 * ü§ñ Interactive Chat Completion
 */
export const aiPostApiV1AiChatChatCompletionOptions = (
  options: Options<AiPostApiV1AiChatChatCompletionData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiPostApiV1AiChatChatCompletion({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiPostApiV1AiChatChatCompletionQueryKey(options),
  });
};

/**
 * Chat Completion
 * ü§ñ Interactive Chat Completion
 */
export const aiPostApiV1AiChatChatCompletionMutation = (
  options?: Partial<Options<AiPostApiV1AiChatChatCompletionData>>
): UseMutationOptions<
  unknown,
  AiPostApiV1AiChatChatCompletionError,
  Options<AiPostApiV1AiChatChatCompletionData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AiPostApiV1AiChatChatCompletionError,
    Options<AiPostApiV1AiChatChatCompletionData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await aiPostApiV1AiChatChatCompletion({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const aiPostApiV1AiGenerateGenerateContentQueryKey = (
  options: Options<AiPostApiV1AiGenerateGenerateContentData>
) => createQueryKey("aiPostApiV1AiGenerateGenerateContent", options);

/**
 * Generate Content
 * üìù Generate Content
 */
export const aiPostApiV1AiGenerateGenerateContentOptions = (
  options: Options<AiPostApiV1AiGenerateGenerateContentData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiPostApiV1AiGenerateGenerateContent({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiPostApiV1AiGenerateGenerateContentQueryKey(options),
  });
};

/**
 * Generate Content
 * üìù Generate Content
 */
export const aiPostApiV1AiGenerateGenerateContentMutation = (
  options?: Partial<Options<AiPostApiV1AiGenerateGenerateContentData>>
): UseMutationOptions<
  unknown,
  AiPostApiV1AiGenerateGenerateContentError,
  Options<AiPostApiV1AiGenerateGenerateContentData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AiPostApiV1AiGenerateGenerateContentError,
    Options<AiPostApiV1AiGenerateGenerateContentData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await aiPostApiV1AiGenerateGenerateContent({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const aiPostApiV1AiAnalyzeAnalyzeTextQueryKey = (
  options: Options<AiPostApiV1AiAnalyzeAnalyzeTextData>
) => createQueryKey("aiPostApiV1AiAnalyzeAnalyzeText", options);

/**
 * Analyze Text
 * üîç Analyze Text Content
 */
export const aiPostApiV1AiAnalyzeAnalyzeTextOptions = (
  options: Options<AiPostApiV1AiAnalyzeAnalyzeTextData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiPostApiV1AiAnalyzeAnalyzeText({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiPostApiV1AiAnalyzeAnalyzeTextQueryKey(options),
  });
};

/**
 * Analyze Text
 * üîç Analyze Text Content
 */
export const aiPostApiV1AiAnalyzeAnalyzeTextMutation = (
  options?: Partial<Options<AiPostApiV1AiAnalyzeAnalyzeTextData>>
): UseMutationOptions<
  unknown,
  AiPostApiV1AiAnalyzeAnalyzeTextError,
  Options<AiPostApiV1AiAnalyzeAnalyzeTextData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AiPostApiV1AiAnalyzeAnalyzeTextError,
    Options<AiPostApiV1AiAnalyzeAnalyzeTextData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await aiPostApiV1AiAnalyzeAnalyzeText({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const aiPostApiV1AiTranslateTranslateTextQueryKey = (
  options: Options<AiPostApiV1AiTranslateTranslateTextData>
) => createQueryKey("aiPostApiV1AiTranslateTranslateText", options);

/**
 * Translate Text
 * üåç Nigerian Language Translation
 */
export const aiPostApiV1AiTranslateTranslateTextOptions = (
  options: Options<AiPostApiV1AiTranslateTranslateTextData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiPostApiV1AiTranslateTranslateText({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiPostApiV1AiTranslateTranslateTextQueryKey(options),
  });
};

/**
 * Translate Text
 * üåç Nigerian Language Translation
 */
export const aiPostApiV1AiTranslateTranslateTextMutation = (
  options?: Partial<Options<AiPostApiV1AiTranslateTranslateTextData>>
): UseMutationOptions<
  unknown,
  AiPostApiV1AiTranslateTranslateTextError,
  Options<AiPostApiV1AiTranslateTranslateTextData>
> => {
  const mutationOptions: UseMutationOptions<
    unknown,
    AiPostApiV1AiTranslateTranslateTextError,
    Options<AiPostApiV1AiTranslateTranslateTextData>
  > = {
    mutationFn: async (localOptions) => {
      const { data } = await aiPostApiV1AiTranslateTranslateText({
        ...options,
        ...localOptions,
        throwOnError: true,
      });
      return data;
    },
  };
  return mutationOptions;
};

export const aiGetApiV1AiModelsGetAvailableModelsQueryKey = (
  options?: Options<AiGetApiV1AiModelsGetAvailableModelsData>
) => createQueryKey("aiGetApiV1AiModelsGetAvailableModels", options);

/**
 * Get Available Models
 * üß† Get Available AI Models
 */
export const aiGetApiV1AiModelsGetAvailableModelsOptions = (
  options?: Options<AiGetApiV1AiModelsGetAvailableModelsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiGetApiV1AiModelsGetAvailableModels({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiGetApiV1AiModelsGetAvailableModelsQueryKey(options),
  });
};

export const aiGetApiV1AiConversationsConversationIdGetConversationQueryKey = (
  options: Options<AiGetApiV1AiConversationsConversationIdGetConversationData>
) =>
  createQueryKey(
    "aiGetApiV1AiConversationsConversationIdGetConversation",
    options
  );

/**
 * Get Conversation
 * üí¨ Get Conversation History
 */
export const aiGetApiV1AiConversationsConversationIdGetConversationOptions = (
  options: Options<AiGetApiV1AiConversationsConversationIdGetConversationData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await aiGetApiV1AiConversationsConversationIdGetConversation({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      aiGetApiV1AiConversationsConversationIdGetConversationQueryKey(options),
  });
};

export const aiGetApiV1AiUsageGetUsageStatisticsQueryKey = (
  options?: Options<AiGetApiV1AiUsageGetUsageStatisticsData>
) => createQueryKey("aiGetApiV1AiUsageGetUsageStatistics", options);

/**
 * Get Usage Statistics
 * üìä Get Token Usage Statistics
 */
export const aiGetApiV1AiUsageGetUsageStatisticsOptions = (
  options?: Options<AiGetApiV1AiUsageGetUsageStatisticsData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await aiGetApiV1AiUsageGetUsageStatistics({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: aiGetApiV1AiUsageGetUsageStatisticsQueryKey(options),
  });
};

export const healthGetApiV1ServicesHealthGetServicesHealthQueryKey = (
  options?: Options<HealthGetApiV1ServicesHealthGetServicesHealthData>
) => createQueryKey("healthGetApiV1ServicesHealthGetServicesHealth", options);

/**
 * Get Services Health
 * üíö Platform Health Overview
 *
 * Comprehensive health check for all backend services.
 * Essential for monitoring Nigerian DPI platform status.
 */
export const healthGetApiV1ServicesHealthGetServicesHealthOptions = (
  options?: Options<HealthGetApiV1ServicesHealthGetServicesHealthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthGetApiV1ServicesHealthGetServicesHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthGetApiV1ServicesHealthGetServicesHealthQueryKey(options),
  });
};

export const healthGetApiV1DpiHealthGetDpiHealthQueryKey = (
  options?: Options<HealthGetApiV1DpiHealthGetDpiHealthData>
) => createQueryKey("healthGetApiV1DpiHealthGetDpiHealth", options);

/**
 * Get Dpi Health
 * üá≥üá¨ Nigerian DPI Services Health
 *
 * Focused health check for core DPI services.
 * Tailored for Nigerian startup developers.
 */
export const healthGetApiV1DpiHealthGetDpiHealthOptions = (
  options?: Options<HealthGetApiV1DpiHealthGetDpiHealthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await healthGetApiV1DpiHealthGetDpiHealth({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: healthGetApiV1DpiHealthGetDpiHealthQueryKey(options),
  });
};

export const healthGetApiV1ServicesServiceNameHealthGetServiceHealthQueryKey = (
  options: Options<HealthGetApiV1ServicesServiceNameHealthGetServiceHealthData>
) =>
  createQueryKey(
    "healthGetApiV1ServicesServiceNameHealthGetServiceHealth",
    options
  );

/**
 * Get Service Health
 * üîç Individual Service Health
 *
 * Detailed health check for a specific service.
 * Essential for troubleshooting and monitoring.
 */
export const healthGetApiV1ServicesServiceNameHealthGetServiceHealthOptions = (
  options: Options<HealthGetApiV1ServicesServiceNameHealthGetServiceHealthData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await healthGetApiV1ServicesServiceNameHealthGetServiceHealth({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      healthGetApiV1ServicesServiceNameHealthGetServiceHealthQueryKey(options),
  });
};

export const healthGetApiV1ServicesServiceNameMetricsGetServiceMetricsQueryKey =
  (
    options: Options<HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsData>
  ) =>
    createQueryKey(
      "healthGetApiV1ServicesServiceNameMetricsGetServiceMetrics",
      options
    );

/**
 * Get Service Metrics
 * üìà Service Performance Metrics
 *
 * Detailed performance and usage metrics for specific service.
 * Critical for capacity planning and optimization.
 */
export const healthGetApiV1ServicesServiceNameMetricsGetServiceMetricsOptions =
  (
    options: Options<HealthGetApiV1ServicesServiceNameMetricsGetServiceMetricsData>
  ) => {
    return queryOptions({
      queryFn: async ({ queryKey, signal }) => {
        const { data } =
          await healthGetApiV1ServicesServiceNameMetricsGetServiceMetrics({
            ...options,
            ...queryKey[0],
            signal,
            throwOnError: true,
          });
        return data;
      },
      queryKey:
        healthGetApiV1ServicesServiceNameMetricsGetServiceMetricsQueryKey(
          options
        ),
    });
  };

export const examplesGetApiV1ExamplesNinNinExamplesQueryKey = (
  options?: Options<ExamplesGetApiV1ExamplesNinNinExamplesData>
) => createQueryKey("examplesGetApiV1ExamplesNinNinExamples", options);

/**
 * Nin Examples
 * üìã NIN Verification Examples
 */
export const examplesGetApiV1ExamplesNinNinExamplesOptions = (
  options?: Options<ExamplesGetApiV1ExamplesNinNinExamplesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await examplesGetApiV1ExamplesNinNinExamples({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: examplesGetApiV1ExamplesNinNinExamplesQueryKey(options),
  });
};

export const examplesGetApiV1ExamplesSmsSmsExamplesQueryKey = (
  options?: Options<ExamplesGetApiV1ExamplesSmsSmsExamplesData>
) => createQueryKey("examplesGetApiV1ExamplesSmsSmsExamples", options);

/**
 * Sms Examples
 * üì± Nigerian SMS Examples
 */
export const examplesGetApiV1ExamplesSmsSmsExamplesOptions = (
  options?: Options<ExamplesGetApiV1ExamplesSmsSmsExamplesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await examplesGetApiV1ExamplesSmsSmsExamples({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: examplesGetApiV1ExamplesSmsSmsExamplesQueryKey(options),
  });
};

export const examplesGetApiV1ExamplesAuthAuthExamplesQueryKey = (
  options?: Options<ExamplesGetApiV1ExamplesAuthAuthExamplesData>
) => createQueryKey("examplesGetApiV1ExamplesAuthAuthExamples", options);

/**
 * Auth Examples
 * üîê OAuth2 Bearer Token Examples
 */
export const examplesGetApiV1ExamplesAuthAuthExamplesOptions = (
  options?: Options<ExamplesGetApiV1ExamplesAuthAuthExamplesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } = await examplesGetApiV1ExamplesAuthAuthExamples({
        ...options,
        ...queryKey[0],
        signal,
        throwOnError: true,
      });
      return data;
    },
    queryKey: examplesGetApiV1ExamplesAuthAuthExamplesQueryKey(options),
  });
};

export const examplesGetApiV1ExamplesIntegrationIntegrationExamplesQueryKey = (
  options?: Options<ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesData>
) =>
  createQueryKey(
    "examplesGetApiV1ExamplesIntegrationIntegrationExamples",
    options
  );

/**
 * Integration Examples
 * üöÄ Complete DPI Integration Examples
 */
export const examplesGetApiV1ExamplesIntegrationIntegrationExamplesOptions = (
  options?: Options<ExamplesGetApiV1ExamplesIntegrationIntegrationExamplesData>
) => {
  return queryOptions({
    queryFn: async ({ queryKey, signal }) => {
      const { data } =
        await examplesGetApiV1ExamplesIntegrationIntegrationExamples({
          ...options,
          ...queryKey[0],
          signal,
          throwOnError: true,
        });
      return data;
    },
    queryKey:
      examplesGetApiV1ExamplesIntegrationIntegrationExamplesQueryKey(options),
  });
};
